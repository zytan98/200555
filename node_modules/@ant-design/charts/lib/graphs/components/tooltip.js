"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTooltip = void 0;
var react_dom_1 = __importDefault(require("react-dom"));
var util_1 = require("@antv/util");
var utils_1 = require("../utils");
var createTooltip = function (_a) {
    var graph = _a.graph, container = _a.container, tooltipCfg = _a.tooltipCfg, nodeCfg = _a.nodeCfg;
    var _b = nodeCfg.size, size = _b === void 0 ? [120, 40] : _b;
    var style = tooltipCfg.style, show = tooltipCfg.show, className = tooltipCfg.className, customContent = tooltipCfg.customContent;
    if (typeof size === 'number')
        size = [size, size];
    var nodeWidth = size[0], nodeHeight = size[1];
    var createTooltipContainer = function (positionStyle, item) {
        var _a;
        var tooltipId = graph.get('id') + "-toolitp";
        var exist = document.querySelector("#" + tooltipId);
        if (exist) {
            (_a = exist.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(exist);
        }
        if (!show || !positionStyle) {
            return;
        }
        var defaultStyle = {
            position: 'absolute',
            width: nodeWidth + "px",
            padding: '6px',
            borderRadius: '2px',
            fontSize: '24px',
            backgroundColor: '#fff',
            boxShadow: '0 0 3px #ccc',
            minHeight: '40px',
            boxSizing: 'border-box',
        };
        var mountPoint = document.createElement('div');
        mountPoint.id = tooltipId;
        mountPoint.className = className !== null && className !== void 0 ? className : 'charts-toolbar';
        (0, utils_1.setStyles)(mountPoint, defaultStyle);
        (0, utils_1.setStyles)(mountPoint, positionStyle);
        (0, utils_1.setStyles)(mountPoint, style);
        react_dom_1.default.render(customContent(item), mountPoint);
        // @ts-ignore
        container.appendChild(mountPoint);
    };
    var bindEvents = function () {
        var currentNode = {
            current: '',
        };
        graph.on('node:mousemove', function (evt) {
            var _a, _b, _c;
            if (!currentNode.current) {
                // 这里有瑕疵，获取的 minX 不一定是最外层的容器
                var _d = (_a = (0, util_1.get)(evt, 'shape.cfg.canvasBBox')) !== null && _a !== void 0 ? _a : {}, minX = _d.minX, minY = _d.minY;
                if (!minX) {
                    return;
                }
                var modelId = (0, util_1.get)((_b = evt.item) === null || _b === void 0 ? void 0 : _b.getModel(), 'id', '');
                if (modelId) {
                    currentNode.current = modelId;
                }
                createTooltipContainer({
                    left: Math.min(Math.max(minX, 0), graph.getWidth() - nodeWidth) + "px",
                    bottom: graph.getHeight() - minY + nodeHeight + "px",
                }, (_c = evt.item) === null || _c === void 0 ? void 0 : _c.getModel());
            }
        });
        graph.on('node:mouseleave', function () {
            currentNode.current = '';
            createTooltipContainer();
        });
    };
    bindEvents();
};
exports.createTooltip = createTooltip;
