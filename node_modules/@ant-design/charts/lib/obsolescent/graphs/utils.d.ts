/// <reference types="react" />
import { IGraph, IGroup, Graph } from '@antv/g6';
import { CardNodeConfig, MiniMapConfig, CardModelConfig, GraphConfig } from './types';
export declare const getGraphSize: (width: number | undefined, height: number | undefined, container: React.RefObject<HTMLDivElement>) => number[];
export declare const bindDefaultEvents: (graph: IGraph, collapseExpand?: boolean | undefined) => void;
export declare const getDefaultEdgeArrowCfg: (d?: number, arrowType?: string, fill?: string) => {
    endArrow: {
        path: any;
        fill: string;
        d: number;
    };
};
export declare const getContentAndStyle: (cfg: CardNodeConfig) => {
    text: string | number;
    style?: undefined;
} | {
    text: string | number;
    style: Partial<{
        rotate: number;
        textAlign: "left" | "right" | "center" | "end" | "start";
        angle: number;
        x: number;
        y: number;
        text: string;
        stroke: string | null;
        opacity: number;
        fontSize: number;
        fontStyle: "normal" | "italic" | "oblique";
        fontWeight?: number | "bold" | "normal" | "bolder" | "lighter" | undefined;
        fill: string | null;
        rotateCenter: string;
        lineWidth: number;
        shadowColor: string;
        shadowBlur: number;
        shadowOffsetX?: number | undefined;
        shadowOffsetY?: number | undefined;
        position: string;
        textBaseline: "top" | "bottom" | "middle" | "alphabetic" | "hanging" | "ideographic";
        offset: number;
        background?: {
            fill?: string | undefined;
            stroke?: string | undefined;
            lineWidth?: number | undefined;
            radius?: number | number[] | undefined;
            padding?: number | number[] | undefined;
        } | undefined;
    }> | undefined;
};
export declare const getConfig: (source: unknown, item: IGroup | undefined, cfg?: CardModelConfig | undefined) => any;
export declare const getGraphId: (graph: {
    current?: string;
}) => string;
export declare const renderGraph: (graph: IGraph, data: any) => void;
export declare const processMinimap: (cfg: MiniMapConfig | undefined, graph: Graph) => import("_@antv_g6-plugin@0.2.4@@antv/g6-plugin").Minimap | null | undefined;
/**
 * min ma
 */
export declare const getMarkerPosition: (direction: string | undefined, size: number[]) => {
    x: number;
    y: number;
};
/**
 * 设置 props 默认值
 * props 会在对应图表和 hooks 里面使用，不想加个很长的赋值表达式。
 * layout 使用 merge
 */
export declare const useProps: (props: Partial<GraphConfig>, defaultProps: Partial<GraphConfig>) => {
    layout: any;
    titleStyle?: Partial<{
        rotate: number;
        textAlign: "left" | "right" | "center" | "end" | "start";
        angle: number;
        x: number;
        y: number;
        text: string;
        stroke: string | null;
        opacity: number;
        fontSize: number;
        fontStyle: "normal" | "italic" | "oblique";
        fontWeight?: number | "bold" | "normal" | "bolder" | "lighter" | undefined;
        fill: string | null;
        rotateCenter: string;
        lineWidth: number;
        shadowColor: string;
        shadowBlur: number;
        shadowOffsetX?: number | undefined;
        shadowOffsetY?: number | undefined;
        position: string;
        textBaseline: "top" | "bottom" | "middle" | "alphabetic" | "hanging" | "ideographic";
        offset: number;
        background?: {
            fill?: string | undefined;
            stroke?: string | undefined;
            lineWidth?: number | undefined;
            radius?: number | number[] | undefined;
            padding?: number | number[] | undefined;
        } | undefined;
    }> | undefined;
    bodyStyle?: Partial<{
        rotate: number;
        textAlign: "left" | "right" | "center" | "end" | "start";
        angle: number;
        x: number;
        y: number;
        text: string;
        stroke: string | null;
        opacity: number;
        fontSize: number;
        fontStyle: "normal" | "italic" | "oblique";
        fontWeight?: number | "bold" | "normal" | "bolder" | "lighter" | undefined;
        fill: string | null;
        rotateCenter: string;
        lineWidth: number;
        shadowColor: string;
        shadowBlur: number;
        shadowOffsetX?: number | undefined;
        shadowOffsetY?: number | undefined;
        position: string;
        textBaseline: "top" | "bottom" | "middle" | "alphabetic" | "hanging" | "ideographic";
        offset: number;
        background?: {
            fill?: string | undefined;
            stroke?: string | undefined;
            lineWidth?: number | undefined;
            radius?: number | number[] | undefined;
            padding?: number | number[] | undefined;
        } | undefined;
    }> | undefined;
    footerStyle?: Partial<{
        rotate: number;
        textAlign: "left" | "right" | "center" | "end" | "start";
        angle: number;
        x: number;
        y: number;
        text: string;
        stroke: string | null;
        opacity: number;
        fontSize: number;
        fontStyle: "normal" | "italic" | "oblique";
        fontWeight?: number | "bold" | "normal" | "bolder" | "lighter" | undefined;
        fill: string | null;
        rotateCenter: string;
        lineWidth: number;
        shadowColor: string;
        shadowBlur: number;
        shadowOffsetX?: number | undefined;
        shadowOffsetY?: number | undefined;
        position: string;
        textBaseline: "top" | "bottom" | "middle" | "alphabetic" | "hanging" | "ideographic";
        offset: number;
        background?: {
            fill?: string | undefined;
            stroke?: string | undefined;
            lineWidth?: number | undefined;
            radius?: number | number[] | undefined;
            padding?: number | number[] | undefined;
        } | undefined;
    }> | undefined;
    footerValueStyle?: Partial<{
        rotate: number;
        textAlign: "left" | "right" | "center" | "end" | "start";
        angle: number;
        x: number;
        y: number;
        text: string;
        stroke: string | null;
        opacity: number;
        fontSize: number;
        fontStyle: "normal" | "italic" | "oblique";
        fontWeight?: number | "bold" | "normal" | "bolder" | "lighter" | undefined;
        fill: string | null;
        rotateCenter: string;
        lineWidth: number;
        shadowColor: string;
        shadowBlur: number;
        shadowOffsetX?: number | undefined;
        shadowOffsetY?: number | undefined;
        position: string;
        textBaseline: "top" | "bottom" | "middle" | "alphabetic" | "hanging" | "ideographic";
        offset: number;
        background?: {
            fill?: string | undefined;
            stroke?: string | undefined;
            lineWidth?: number | undefined;
            radius?: number | number[] | undefined;
            padding?: number | number[] | undefined;
        } | undefined;
    }> | undefined;
    showArrow?: boolean | undefined;
    collapseExpand?: boolean | undefined;
    markerPosition?: "left" | "top" | "right" | "bottom" | undefined;
    data?: import("@antv/g6").TreeGraphData | undefined;
    width?: number | undefined;
    height?: number | undefined;
    pixelRatio?: number | undefined;
    nodeType?: string | undefined;
    edgeType?: string | undefined;
    nodeStyle?: import("./types").INodeStyle | undefined;
    edgeStyle?: import("./types").IEdgeStyle | undefined;
    edgeCfg?: import("./types").IEdgeCfg | undefined;
    nodeCfg?: import("./types").INodeCfg | undefined;
    markerStyle?: import("./types").INodeStyle | undefined;
    nodeStateStyles?: import("@antv/g6").StateStyles | undefined;
    edgeStateStyles?: import("@antv/g6").StateStyles | undefined;
    nodeSize?: number | number[] | undefined;
    nodeAnchorPoints?: number[][] | undefined;
    minimapCfg?: MiniMapConfig | undefined;
    behaviors?: string[] | undefined;
    arrowType?: string | undefined;
    animate?: boolean | undefined;
    autoFit?: boolean | undefined;
    onReady?: ((graph: IGraph) => void) | undefined;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    loading?: boolean | undefined;
    loadingTemplate?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    errorTemplate?: ((e: Error) => import("react").ReactNode) | undefined;
    showMarker?: boolean | undefined;
    nodeLabelCfg?: {
        style: import("./types").ILabelStyle;
    } | undefined;
    linkCenter?: boolean | undefined;
};
