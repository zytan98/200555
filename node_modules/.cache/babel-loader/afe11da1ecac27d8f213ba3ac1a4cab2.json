{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, size, valuesOfKey } from \"@antv/util\";\nimport { Action } from '..';\n\nfunction isWheelDown(event) {\n  var wheelEvent = event.gEvent.originalEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nvar DEFAULT_WHEELDELTA = 1;\n\nvar MousewheelScroll =\n/** @class */\nfunction (_super) {\n  __extends(MousewheelScroll, _super);\n\n  function MousewheelScroll() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MousewheelScroll.prototype.scroll = function (arg) {\n    var _a = this.context,\n        view = _a.view,\n        event = _a.event;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    var wheelDelta = (arg === null || arg === void 0 ? void 0 : arg.wheelDelta) || DEFAULT_WHEELDELTA;\n    var scrollbarController = view.getController('scrollbar');\n    var xScale = view.getXScale();\n    var data = view.getOptions().data;\n    var dataSize = size(valuesOfKey(data, xScale.field));\n    var step = size(xScale.values);\n    var currentRatio = scrollbarController.getValue();\n    var currentStart = Math.floor((dataSize - step) * currentRatio);\n    var nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    var correction = wheelDelta / (dataSize - step) / 10000;\n    var nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  };\n\n  return MousewheelScroll;\n}(Action);\n\nexport default MousewheelScroll;","map":{"version":3,"sources":["../../../../src/interaction/action/view/mousewheel-scroll.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,EAAgB,IAAhB,EAAsB,WAAtB,QAAyC,YAAzC;AAEA,SAAS,MAAT,QAAuB,IAAvB;;AAGA,SAAS,WAAT,CAAqB,KAArB,EAAuC;AACrC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAN,CAAa,aAAhC;AACA,SAAO,UAAU,CAAC,MAAX,GAAoB,CAA3B;AACD;;AAED,IAAM,kBAAkB,GAAG,CAA3B;;AACA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,gBAAA,GAAA;;AAyBC;;AAvBQ,EAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,GAAd,EAAkB;AACV,QAAA,EAAA,GAAkB,KAAK,OAAvB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;;AAEN,QAAI,CAAC,IAAI,CAAC,UAAL,GAAkB,SAAvB,EAAkC;AAChC;AACD;;AAED,QAAM,UAAU,GAAG,CAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,UAAL,KAAmB,kBAAtC;AACA,QAAM,mBAAmB,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAA5B;AAEA,QAAM,MAAM,GAAG,IAAI,CAAC,SAAL,EAAf;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,UAAL,GAAkB,IAA/B;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAD,EAAO,MAAM,CAAC,KAAd,CAAZ,CAArB;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAR,CAAjB;AAEA,QAAM,YAAY,GAAG,mBAAmB,CAAC,QAApB,EAArB;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,QAAQ,GAAG,IAAZ,IAAoB,YAA/B,CAArB;AAEA,QAAM,SAAS,GAAG,YAAY,IAAI,WAAW,CAAC,KAAD,CAAX,GAAqB,UAArB,GAAkC,CAAC,UAAvC,CAA9B;AACA,QAAM,UAAU,GAAG,UAAU,IAAI,QAAQ,GAAG,IAAf,CAAV,GAAiC,KAApD;AACA,QAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,QAAQ,GAAG,IAAf,CAAT,GAAgC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAAvB;AACA,IAAA,mBAAmB,CAAC,QAApB,CAA6B,SAA7B;AACD,GAtBM;;AAuBT,SAAA,gBAAA;AAAC,CAzBD,CAA+B,MAA/B,CAAA;;AA2BA,eAAe,gBAAf","sourcesContent":["import { clamp, size, valuesOfKey } from \"@antv/util\";\nimport { COMPONENT_TYPE } from \"../../../constant\";\nimport { Action } from '..';\nimport { LooseObject } from \"../../../interface\";\n\nfunction isWheelDown(event: LooseObject) {\n  const wheelEvent = event.gEvent.originalEvent as WheelEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nconst DEFAULT_WHEELDELTA = 1;\nclass MousewheelScroll extends Action {\n\n  public scroll(arg?) {\n    const { view, event } = this.context;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    const wheelDelta = arg?.wheelDelta || DEFAULT_WHEELDELTA;\n    const scrollbarController = view.getController('scrollbar');\n\n    const xScale = view.getXScale();\n    const data = view.getOptions().data;\n    const dataSize = size(valuesOfKey(data, xScale.field));\n    const step = size(xScale.values);\n\n    const currentRatio = scrollbarController.getValue();\n    const currentStart = Math.floor((dataSize - step) * currentRatio);\n\n    const nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    const correction = wheelDelta / (dataSize - step) / 10000;\n    const nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  }\n}\n\nexport default MousewheelScroll;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}