{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each } from '@antv/util';\nimport { tooltip, slider, interaction, animation, theme, annotation, limitInPlot, pattern } from '../../adaptor/common';\nimport { findGeometry } from '../../utils';\nimport { area, point, line } from '../../adaptor/geometries';\nimport { flow, transformLabel, deepAssign } from '../../utils';\nimport { getDataWhetherPecentage } from '../../utils/transform/percent';\nimport { meta, legend, axis } from '../line/adaptor';\nexport { meta };\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      areaStyle = options.areaStyle,\n      color = options.color,\n      pointMapping = options.point,\n      lineMapping = options.line,\n      isPercent = options.isPercent,\n      xField = options.xField,\n      yField = options.yField,\n      tooltip = options.tooltip,\n      seriesField = options.seriesField,\n      startOnZero = options.startOnZero;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var chartData = getDataWhetherPecentage(data, yField, xField, yField, isPercent);\n  chart.data(chartData); // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function (datum) {\n      return {\n        name: datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var primary = deepAssign({}, params, {\n    options: {\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      line: lineMapping && __assign({\n        color: color\n      }, lineMapping),\n      point: pointMapping && __assign({\n        color: color\n      }, pointMapping),\n      tooltip: tooltipOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero: startOnZero\n      }\n    }\n  }); // 线默认 2px\n\n  var lineParams = deepAssign({\n    options: {\n      line: {\n        size: 2\n      }\n    }\n  }, primary, {\n    options: {\n      sizeField: seriesField,\n      tooltip: false\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  }); // area geometry 处理\n\n  area(primary);\n  line(lineParams);\n  point(pointParams);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var areaGeometry = findGeometry(chart, 'area'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    areaGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    areaGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        layout: [{\n          type: 'limit-in-plot'\n        }, {\n          type: 'path-adjust-position'\n        }, {\n          type: 'point-adjust-position'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(cfg))\n    });\n  }\n\n  return params;\n}\n/**\n * 处理 adjust\n * @param params\n */\n\n\nfunction adjust(params) {\n  var chart = params.chart,\n      options = params.options;\n  var isStack = options.isStack,\n      isPercent = options.isPercent,\n      seriesField = options.seriesField;\n\n  if ((isPercent || isStack) && seriesField) {\n    each(chart.geometries, function (g) {\n      g.adjust('stack');\n    });\n  }\n\n  return params;\n}\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('areaStyle'), geometry, meta, adjust, axis, legend, tooltip, label, slider, annotation(), interaction, animation, limitInPlot)(params);\n}","map":{"version":3,"sources":["../../../src/plots/area/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { tooltip, slider, interaction, animation, theme, annotation, limitInPlot, pattern } from '../../adaptor/common';\nimport { findGeometry } from '../../utils';\nimport { Params } from '../../core/adaptor';\nimport { area, point, line } from '../../adaptor/geometries';\nimport { flow, transformLabel, deepAssign } from '../../utils';\nimport { getDataWhetherPecentage } from '../../utils/transform/percent';\nimport { Datum } from '../../types';\nimport { meta, legend, axis } from '../line/adaptor';\nimport { AreaOptions } from './types';\n\nexport { meta };\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    areaStyle,\n    color,\n    point: pointMapping,\n    line: lineMapping,\n    isPercent,\n    xField,\n    yField,\n    tooltip,\n    seriesField,\n    startOnZero,\n  } = options;\n  const pointState = pointMapping?.state;\n\n  const chartData = getDataWhetherPecentage(data, yField, xField, yField, isPercent);\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  const tooltipOptions = isPercent\n    ? {\n        formatter: (datum: Datum) => ({\n          name: datum[seriesField] || datum[xField],\n          value: (Number(datum[yField]) * 100).toFixed(2) + '%',\n        }),\n        ...tooltip,\n      }\n    : tooltip;\n  const primary = deepAssign({}, params, {\n    options: {\n      area: { color, style: areaStyle },\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      line: lineMapping && {\n        color,\n        ...lineMapping,\n      },\n      point: pointMapping && {\n        color,\n        ...pointMapping,\n      },\n      tooltip: tooltipOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero,\n      },\n    },\n  });\n  // 线默认 2px\n  const lineParams = deepAssign({ options: { line: { size: 2 } } }, primary, {\n    options: { sizeField: seriesField, tooltip: false },\n  });\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  // area geometry 处理\n  area(primary);\n  line(lineParams);\n  point(pointParams);\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const areaGeometry = findGeometry(chart, 'area');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    areaGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    areaGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        layout: [\n          { type: 'limit-in-plot' },\n          { type: 'path-adjust-position' },\n          { type: 'point-adjust-position' },\n          { type: 'limit-in-plot', cfg: { action: 'hide' } },\n        ],\n        ...transformLabel(cfg),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 处理 adjust\n * @param params\n */\nfunction adjust(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const { isStack, isPercent, seriesField } = options;\n  if ((isPercent || isStack) && seriesField) {\n    each(chart.geometries, (g: Geometry) => {\n      g.adjust('stack');\n    });\n  }\n\n  return params;\n}\n\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<AreaOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    pattern('areaStyle'),\n    geometry,\n    meta,\n    adjust,\n    axis,\n    legend,\n    tooltip,\n    label,\n    slider,\n    annotation(),\n    interaction,\n    animation,\n    limitInPlot\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}