{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { Plot } from '../../core/plot';\nimport { getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS, FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD, FUNNEL_PERCENT, FUNNEL_TOTAL_PERCENT } from './constant';\nexport { FUNNEL_CONVERSATION_FIELD };\n\nvar Funnel =\n/** @class */\nfunction (_super) {\n  __extends(Funnel, _super);\n\n  function Funnel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'funnel';\n    return _this;\n  }\n\n  Funnel.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n\n\n  Funnel.prototype.getDefaultOptions = function () {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  };\n  /**\n   * 获取 漏斗图 的适配器\n   */\n\n\n  Funnel.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n\n\n  Funnel.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n\n\n  Funnel.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  }; // 内部变量\n\n  /** 漏斗 转化率 字段 */\n\n\n  Funnel.CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n\n  Funnel.PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n\n  Funnel.TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n  return Funnel;\n}(Plot);\n\nexport { Funnel };","map":{"version":3,"sources":["../../../src/plots/funnel/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,YAArB;AAEA,SAAS,IAAT,QAAqB,iBAArB;AAGA,SAAS,yBAAT,QAA0C,aAA1C;AAEA,SAAS,OAAT,QAAwB,WAAxB;AACA,SACE,eADF,EAEE,mBAAmB,IAAI,yBAFzB,EAGE,cAHF,EAIE,oBAJF,QAKO,YALP;AASA,SAAS,yBAAT;;AAEA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;;AA8DR;;AA5DQ,EAAA,MAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAYP;;AAEG;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE;AACA,WAAO,MAAM,CAAC,iBAAP,EAAP;AACD,GAHS;AAKV;;AAEG;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;AAIV;;;;;AAKG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAiC,SAAjC,EAA4D,MAA5D,EAAkF;AAAtB,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,IAAA;AAAsB;;AAChF,QAAM,QAAQ,GAAG,yBAAyB,CAAC,KAAK,KAAN,CAA1C;AAEA,IAAA,IAAI,CAAC,QAAD,EAAW,UAAC,GAAD,EAAa;AAC1B,UAAI,SAAS,CAAC,GAAG,CAAC,OAAJ,EAAD,CAAb,EAA8B;AAC5B,QAAA,GAAG,CAAC,QAAJ,CAAa,IAAb,EAAmB,MAAnB;AACD;AACF,KAJG,CAAJ;AAKD,GARM;AAUP;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAM,QAAQ,GAAG,yBAAyB,CAAC,KAAK,KAAN,CAA1C;AAEA,QAAM,YAAY,GAAkB,EAApC;AACA,IAAA,IAAI,CAAC,QAAD,EAAW,UAAC,OAAD,EAAiB;AAC9B,UAAM,IAAI,GAAG,OAAO,CAAC,OAAR,EAAb;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,SAAR,EAAf;AACA,MAAA,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAM;AACjB,QAAA,YAAY,CAAC,IAAb,CAAkB;AAAE,UAAA,IAAI,EAAA,IAAN;AAAQ,UAAA,KAAK,EAAA,KAAb;AAAe,UAAA,QAAQ,EAAE,OAAO,CAAC,QAAjC;AAA2C,UAAA,OAAO,EAAA;AAAlD,SAAlB;AACD,OAFG,CAAJ;AAGD,KANG,CAAJ;AAQA,WAAO,YAAP;AACD,GAbM,CAlDT,CAQE;;AACA;;;AACO,EAAA,MAAA,CAAA,kBAAA,GAAqB,yBAArB;AACP;;AACO,EAAA,MAAA,CAAA,aAAA,GAAgB,cAAhB;AACP;;AACO,EAAA,MAAA,CAAA,mBAAA,GAAsB,oBAAtB;AAkDT,SAAA,MAAA;AAAC,CAhED,CAA4B,IAA5B,CAAA;;SAAa,M","sourcesContent":["import { each } from '@antv/util';\nimport { Element } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { StateName, StateCondition, StateObject } from '../..';\nimport { getAllElementsRecursively } from '../../utils';\nimport { FunnelOptions } from './types';\nimport { adaptor } from './adaptor';\nimport {\n  DEFAULT_OPTIONS,\n  FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD,\n  FUNNEL_PERCENT,\n  FUNNEL_TOTAL_PERCENT,\n} from './constant';\n\nexport type { FunnelOptions };\n\nexport { FUNNEL_CONVERSATION_FIELD };\n\nexport class Funnel extends Plot<FunnelOptions> {\n  /** 图表类型 */\n  public type: string = 'funnel';\n\n  static getDefaultOptions(): Partial<FunnelOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  // 内部变量\n  /** 漏斗 转化率 字段 */\n  static CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n  static PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n  static TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n  protected getDefaultOptions(): Partial<FunnelOptions> {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  }\n\n  /**\n   * 获取 漏斗图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<FunnelOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}