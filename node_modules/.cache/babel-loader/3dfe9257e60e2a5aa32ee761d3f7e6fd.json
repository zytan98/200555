{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      radius = options.radius; // coordinate\n\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\n\n\nexport function statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n  /** 中心文本 指标卡 */\n\n  if (innerRadius && statistic) {\n    var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n      return (v * 100).toFixed(2) + \"%\";\n    };\n\n    var contentOpt = statistic.content;\n\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n      });\n    }\n\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: contentOpt\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/ring-progress/adaptor.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,EAAc,KAAd,QAA2B,YAA3B;AAEA,SAAS,UAAT,EAAqB,IAArB,EAA2B,eAA3B,QAAkD,aAAlD;AACA,SAAS,KAAT,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,UAAlC,QAAoD,sBAApD;AACA,SAAS,QAAT,QAAyB,qBAAzB;AAGA;;;AAGG;;AACH,SAAS,UAAT,CAAoB,MAApB,EAAuD;AAC7C,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,WAAW,GAAa,OAAO,CAApB,WAAX;AAAA,MAAa,MAAM,GAAK,OAAO,CAAZ,MAAnB,CAF6C,CAIrD;;AACA,EAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB,EAA0B;AACxB,IAAA,WAAW,EAAA,WADa;AAExB,IAAA,MAAM,EAAA;AAFkB,GAA1B;AAKA,SAAO,MAAP;AACD;AAED;;;AAGG;;;AACH,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAyD,OAAzD,EAA0E;AACtE,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,WAAW,GAA+B,OAAO,CAAtC,WAAX;AAAA,MAAa,SAAS,GAAoB,OAAO,CAA3B,SAAtB;AAAA,MAAwB,OAAO,GAAW,OAAO,CAAlB,OAA/B;AAAA,MAAiC,IAAI,GAAK,OAAO,CAAZ,IAArC,CAFsE,CAI9E;;AACA,EAAA,KAAK,CAAC,aAAN,CAAoB,YAApB,EAAkC,KAAlC,CAAwC,IAAxC;AAEA;;AACA,MAAI,WAAW,IAAI,SAAnB,EAA8B;AAC5B,QAAM,aAAa,GAAG,GAAG,CAAC,IAAD,EAAO,CAAC,SAAD,EAAY,WAAZ,CAAP,CAAH,IAAwC,UAAC,CAAD,EAAE;AAAK,aAAG,CAAC,CAAC,GAAG,GAAL,EAAU,OAAV,CAAkB,CAAlB,IAAH,GAAA;AAA0B,KAA/F;;AACA,QAAI,UAAU,GAAG,SAAS,CAAC,OAA3B;;AACA,QAAI,UAAJ,EAAgB;AACd,MAAA,UAAU,GAAG,UAAU,CAAC,EAAD,EAAK,UAAL,EAAiB;AACtC,QAAA,OAAO,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,OAAZ,CAAN,GAA6B,UAAU,CAAC,OAAxC,GAAkD,aAAa,CAAC,OAAD;AADlC,OAAjB,CAAvB;AAGD;;AACD,IAAA,eAAe,CACb,KADa,EAEb;AAAE,MAAA,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,SAAP,CAAA,EAAgB;AAAE,QAAA,OAAO,EAAE;AAAX,OAAhB,CAAX;AAAoD,MAAA,QAAQ,EAAE;AAA9D,KAFa,EAGb;AAAE,MAAA,OAAO,EAAA;AAAT,KAHa,CAAf;AAKD;;AAED,MAAI,OAAJ,EAAa;AACX,IAAA,KAAK,CAAC,MAAN,CAAa,IAAb;AACD;;AAED,SAAO,MAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAqD;AACzD,SAAO,IAAI,CAAC,QAAD,EAAW,KAAK,CAAC,EAAD,CAAhB,EAAsB,UAAtB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,KAAxD,EAA+D,UAAU,EAAzE,CAAJ,CAAiF,MAAjF,CAAP;AACD","sourcesContent":["import { get, isNil } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\nimport { RingProgressOptions } from './types';\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius } = options;\n\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius,\n    radius,\n  });\n\n  return params;\n}\n\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params: Params<RingProgressOptions>, updated?: boolean): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n    let contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n      });\n    }\n    renderStatistic(\n      chart,\n      { statistic: { ...statistic, content: contentOpt }, plotType: 'ring-progress' },\n      { percent }\n    );\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RingProgressOptions>) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}