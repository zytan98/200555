{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { adaptor as columnAdaptor } from '../column/adaptor';\nimport { transformBarData } from './utils';\nexport { meta } from '../column/adaptor';\n/**\n * 柱形图适配器\n * @param params\n */\n\nexport function adaptor(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      barStyle = options.barStyle,\n      barWidthRatio = options.barWidthRatio,\n      label = options.label,\n      data = options.data,\n      seriesField = options.seriesField,\n      isStack = options.isStack,\n      minBarWidth = options.minBarWidth,\n      maxBarWidth = options.maxBarWidth; // label of bar charts default position is left, if plot has label\n\n  if (label && !label.position) {\n    label.position = 'left'; // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n\n    if (!label.layout) {\n      label.layout = [{\n        type: 'interval-adjust-position'\n      }, {\n        type: 'interval-hide-overlap'\n      }, {\n        type: 'adjust-color'\n      }, {\n        type: 'limit-in-plot',\n        cfg: {\n          action: 'hide'\n        }\n      }];\n    }\n  } // 默认 legend 位置\n\n\n  var legend = options.legend;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'top-left' : 'right-top',\n        reversed: isStack ? false : true\n      }, legend || {});\n    }\n  } else {\n    legend = false;\n  } // @ts-ignore 直接改值\n\n\n  params.options.legend = legend; // 默认 tooltip 配置\n\n  var tooltip = options.tooltip;\n\n  if (seriesField) {\n    if (tooltip !== false) {\n      tooltip = __assign({\n        reversed: isStack ? false : true\n      }, tooltip || {});\n    }\n  } // @ts-ignore 直接改值\n\n\n  params.options.tooltip = tooltip; // transpose column to bar\n\n  chart.coordinate().transpose();\n  return columnAdaptor({\n    chart: chart,\n    options: __assign(__assign({}, options), {\n      label: label,\n      // switch xField and yField\n      xField: yField,\n      yField: xField,\n      xAxis: yAxis,\n      yAxis: xAxis,\n      // rename attrs as column\n      columnStyle: barStyle,\n      columnWidthRatio: barWidthRatio,\n      minColumnWidth: minBarWidth,\n      maxColumnWidth: maxBarWidth,\n      columnBackground: options.barBackground,\n      // bar 调整数据顺序\n      data: transformBarData(data)\n    })\n  }, true);\n}","map":{"version":3,"sources":["../../../src/plots/bar/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Params } from '../../core/adaptor';\nimport { adaptor as columnAdaptor } from '../column/adaptor';\nimport { BarOptions } from './types';\nimport { transformBarData } from './utils';\n\nexport { meta } from '../column/adaptor';\n\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params: Params<BarOptions>) {\n  const { chart, options } = params;\n  const {\n    xField,\n    yField,\n    xAxis,\n    yAxis,\n    barStyle,\n    barWidthRatio,\n    label,\n    data,\n    seriesField,\n    isStack,\n    minBarWidth,\n    maxBarWidth,\n  } = options;\n\n  // label of bar charts default position is left, if plot has label\n  if (label && !label.position) {\n    label.position = 'left';\n    // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n    if (!label.layout) {\n      label.layout = [\n        { type: 'interval-adjust-position' },\n        { type: 'interval-hide-overlap' },\n        { type: 'adjust-color' },\n        { type: 'limit-in-plot', cfg: { action: 'hide' } },\n      ];\n    }\n  }\n\n  // 默认 legend 位置\n  let { legend } = options;\n  if (seriesField) {\n    if (legend !== false) {\n      legend = {\n        position: isStack ? 'top-left' : 'right-top',\n        reversed: isStack ? false : true,\n        ...(legend || {}),\n      };\n    }\n  } else {\n    legend = false;\n  }\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n\n  // 默认 tooltip 配置\n  let { tooltip } = options;\n  if (seriesField) {\n    if (tooltip !== false) {\n      tooltip = {\n        reversed: isStack ? false : true,\n        ...(tooltip || {}),\n      };\n    }\n  }\n  // @ts-ignore 直接改值\n  params.options.tooltip = tooltip;\n\n  // transpose column to bar\n  chart.coordinate().transpose();\n\n  return columnAdaptor(\n    {\n      chart,\n      options: {\n        ...options,\n        label,\n        // switch xField and yField\n        xField: yField,\n        yField: xField,\n        xAxis: yAxis,\n        yAxis: xAxis,\n        // rename attrs as column\n        columnStyle: barStyle,\n        columnWidthRatio: barWidthRatio,\n        minColumnWidth: minBarWidth,\n        maxColumnWidth: maxBarWidth,\n        columnBackground: options.barBackground,\n        // bar 调整数据顺序\n        data: transformBarData(data),\n      },\n    },\n    true\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}