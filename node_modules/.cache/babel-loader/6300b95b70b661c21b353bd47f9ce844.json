{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { injectable } from 'inversify';\nimport { Geometry } from '.';\nexport var\n/**\n * borrow from playcanvas\n */\nPlane = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_Geometry) {\n  _inherits(Plane, _Geometry);\n\n  var _super = _createSuper(Plane);\n\n  function Plane() {\n    _classCallCheck(this, Plane);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Plane, [{\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var _this$config = this.config,\n          _this$config$halfExte = _this$config.halfExtents,\n          halfExtents = _this$config$halfExte === void 0 ? [0.5, 0.5] : _this$config$halfExte,\n          _this$config$widthSeg = _this$config.widthSegments,\n          widthSegments = _this$config$widthSeg === void 0 ? 5 : _this$config$widthSeg,\n          _this$config$lengthSe = _this$config.lengthSegments,\n          lengthSegments = _this$config$lengthSe === void 0 ? 5 : _this$config$lengthSe;\n      var positions = [];\n      var normals = [];\n      var uvs = [];\n      var indices = [];\n      var vcounter = 0;\n\n      for (var i = 0; i <= widthSegments; i++) {\n        for (var j = 0; j <= lengthSegments; j++) {\n          var x = -halfExtents[0] + 2.0 * halfExtents[0] * i / widthSegments;\n          var y = 0.0;\n          var z = -(-halfExtents[1] + 2.0 * halfExtents[1] * j / lengthSegments);\n          var u = i / widthSegments;\n          var v = j / lengthSegments;\n          positions.push(x, y, z);\n          normals.push(0.0, 1.0, 0.0);\n          uvs.push(u, v);\n\n          if (i < widthSegments && j < lengthSegments) {\n            indices.push(vcounter + lengthSegments + 1, vcounter + 1, vcounter);\n            indices.push(vcounter + lengthSegments + 1, vcounter + lengthSegments + 2, vcounter + 1);\n          }\n\n          vcounter++;\n        }\n      } // generate AABB\n\n\n      var aabb = generateAABBFromVertices(positions);\n      var component = this.getComponent();\n      component.indices = Uint32Array.from(indices);\n      component.aabb = aabb;\n      component.vertexCount = vcounter;\n      component.attributes = [{\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float2'\n        }]\n      }]; // TODO: barycentric & tangent\n    }\n  }]);\n\n  return Plane;\n}(Geometry)) || _class);","map":{"version":3,"sources":["../../src/geometry/Plane.ts"],"names":["injectable","Plane","halfExtents","widthSegments","lengthSegments","positions","normals","uvs","indices","vcounter","i","j","x","y","z","u","v","aabb","generateAABBFromVertices","component","Uint32Array","dirty","name","data","Float32Array","arrayStride","stepMode","attributes","shaderLocation","offset","format"],"mappings":"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","sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface IPlaneGeometryParams {\n  halfExtents: vec3;\n  widthSegments: number;\n  lengthSegments: number;\n}\n\n@injectable()\n/**\n * borrow from playcanvas\n */\nexport class Plane extends Geometry<Partial<IPlaneGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      halfExtents = [0.5, 0.5],\n      widthSegments = 5,\n      lengthSegments = 5,\n    } = this.config;\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    for (let i = 0; i <= widthSegments; i++) {\n      for (let j = 0; j <= lengthSegments; j++) {\n        const x = -halfExtents[0] + (2.0 * halfExtents[0] * i) / widthSegments;\n        const y = 0.0;\n        const z = -(\n          -halfExtents[1] +\n          (2.0 * halfExtents[1] * j) / lengthSegments\n        );\n        const u = i / widthSegments;\n        const v = j / lengthSegments;\n\n        positions.push(x, y, z);\n        normals.push(0.0, 1.0, 0.0);\n        uvs.push(u, v);\n\n        if (i < widthSegments && j < lengthSegments) {\n          indices.push(vcounter + lengthSegments + 1, vcounter + 1, vcounter);\n          indices.push(\n            vcounter + lengthSegments + 1,\n            vcounter + lengthSegments + 2,\n            vcounter + 1,\n          );\n        }\n\n        vcounter++;\n      }\n    }\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = vcounter;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"]},"metadata":{},"sourceType":"module"}