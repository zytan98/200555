{"ast":null,"code":"export function merge(a, b) {\n  // Checks for truthy values on both arrays\n  if (!a && !b) {\n    throw new Error('Please specify valid arguments for parameters a and b.');\n  } // Checks for truthy values or empty arrays on each argument\n  // to avoid the unnecessary construction of a new array and\n  // the type comparison\n\n\n  if (!b || b.length === 0) {\n    return a;\n  }\n\n  if (!a || a.length === 0) {\n    return b;\n  } // Make sure that both typed arrays are of the same type\n\n\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    throw new Error('The types of the two arguments passed for parameters a and b do not match.');\n  } // @ts-ignore\n\n\n  var c = new a.constructor(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n  return c;\n}","map":{"version":3,"sources":["../../src/utils/typedarray.ts"],"names":["b","a","Object","c"],"mappings":"AAAA,OAAO,SAAA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAiD;AACtD;AACA,MAAI,CAAA,CAAA,IAAM,CAAV,CAAA,EAAc;AACZ,UAAM,IAAA,KAAA,CAAN,wDAAM,CAAN;AAHoD,GAAA,CAMtD;AACA;AACA;;;AACA,MAAI,CAAA,CAAA,IAAMA,CAAC,CAADA,MAAAA,KAAV,CAAA,EAA0B;AACxB,WAAA,CAAA;AACD;;AACD,MAAI,CAAA,CAAA,IAAMC,CAAC,CAADA,MAAAA,KAAV,CAAA,EAA0B;AACxB,WAAA,CAAA;AAboD,GAAA,CAgBtD;;;AACA,MAAIC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAsCA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAA1C,CAA0CA,CAA1C,EAA6E;AAC3E,UAAM,IAAA,KAAA,CAAN,4EAAM,CAAN;AAlBoD,GAAA,CAuBtD;;;AACA,MAAMC,CAAC,GAAG,IAAIF,CAAC,CAAL,WAAA,CAAkBA,CAAC,CAADA,MAAAA,GAAWD,CAAC,CAAxC,MAAU,CAAV;AACAG,EAAAA,CAAC,CAADA,GAAAA,CAAAA,CAAAA;AACAA,EAAAA,CAAC,CAADA,GAAAA,CAAAA,CAAAA,EAASF,CAAC,CAAVE,MAAAA;AAEA,SAAA,CAAA;AACD","sourcesContent":["export function merge(a: Float32Array, b: Float32Array) {\n  // Checks for truthy values on both arrays\n  if (!a && !b) {\n    throw new Error('Please specify valid arguments for parameters a and b.');\n  }\n\n  // Checks for truthy values or empty arrays on each argument\n  // to avoid the unnecessary construction of a new array and\n  // the type comparison\n  if (!b || b.length === 0) {\n    return a;\n  }\n  if (!a || a.length === 0) {\n    return b;\n  }\n\n  // Make sure that both typed arrays are of the same type\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    throw new Error(\n      'The types of the two arguments passed for parameters a and b do not match.',\n    );\n  }\n\n  // @ts-ignore\n  const c = new a.constructor(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n\n  return c;\n}\n"]},"metadata":{},"sourceType":"module"}