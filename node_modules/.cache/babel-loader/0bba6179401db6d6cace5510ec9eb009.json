{"ast":null,"code":"import { each } from '@antv/util'; // 自定义 Behavior 时候共有的方法\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {};\n  },\n\n  /**\n   * register event handler, behavior will auto bind events\n   * for example:\n   * return {\n   *  click: 'onClick'\n   * }\n   */\n  getEvents: function getEvents() {\n    return {};\n  },\n  updateCfg: function updateCfg(cfg) {\n    Object.assign(this, cfg);\n    return true;\n  },\n  shouldBegin: function shouldBegin() {\n    return true;\n  },\n  shouldUpdate: function shouldUpdate() {\n    return true;\n  },\n  shouldEnd: function shouldEnd() {\n    return true;\n  },\n\n  /**\n   * auto bind events when register behavior\n   * @param graph Graph instance\n   */\n  bind: function bind(graph) {\n    var _this = this;\n\n    var events = this.events;\n    this.graph = graph;\n\n    if (this.type === 'drag-canvas' || this.type === 'brush-select' || this.type === 'lasso-select') {\n      graph.get('canvas').set('draggable', true);\n    }\n\n    each(events, function (handler, event) {\n      graph.on(event, handler);\n    }); // To avoid the tabs switching makes the keydown related behaviors disable\n\n    document.addEventListener('visibilitychange', function () {\n      _this.keydown = false;\n    });\n  },\n  unbind: function unbind(graph) {\n    var events = this.events;\n\n    if (this.type === 'drag-canvas' || this.type === 'brush-select' || this.type === 'lasso-select') {\n      graph.get('canvas').set('draggable', false);\n    }\n\n    each(events, function (handler, event) {\n      graph.off(event, handler);\n    });\n  },\n  get: function get(val) {\n    return this[val];\n  },\n  set: function set(key, val) {\n    this[key] = val;\n    return this;\n  }\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-core/es/behavior/behaviorOption.js"],"names":["each","getDefaultCfg","getEvents","updateCfg","cfg","Object","assign","shouldBegin","shouldUpdate","shouldEnd","bind","graph","_this","events","type","get","set","handler","event","on","document","addEventListener","keydown","unbind","off","val","key"],"mappings":"AAAA,SAASA,IAAT,QAAqB,YAArB,C,CAAmC;;AAEnC,eAAe;AACbC,EAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,WAAO,EAAP;AACD,GAHY;;AAKb;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAO,EAAP;AACD,GAdY;AAebC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACjCC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,GAApB;AACA,WAAO,IAAP;AACD,GAlBY;AAmBbG,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,WAAO,IAAP;AACD,GArBY;AAsBbC,EAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,WAAO,IAAP;AACD,GAxBY;AAyBbC,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAO,IAAP;AACD,GA3BY;;AA6Bb;AACF;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACzB,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,SAAKF,KAAL,GAAaA,KAAb;;AAEA,QAAI,KAAKG,IAAL,KAAc,aAAd,IAA+B,KAAKA,IAAL,KAAc,cAA7C,IAA+D,KAAKA,IAAL,KAAc,cAAjF,EAAiG;AAC/FH,MAAAA,KAAK,CAACI,GAAN,CAAU,QAAV,EAAoBC,GAApB,CAAwB,WAAxB,EAAqC,IAArC;AACD;;AAEDhB,IAAAA,IAAI,CAACa,MAAD,EAAS,UAAUI,OAAV,EAAmBC,KAAnB,EAA0B;AACrCP,MAAAA,KAAK,CAACQ,EAAN,CAASD,KAAT,EAAgBD,OAAhB;AACD,KAFG,CAAJ,CAVyB,CAYrB;;AAEJG,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAY;AACxDT,MAAAA,KAAK,CAACU,OAAN,GAAgB,KAAhB;AACD,KAFD;AAGD,GAlDY;AAmDbC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBZ,KAAhB,EAAuB;AAC7B,QAAIE,MAAM,GAAG,KAAKA,MAAlB;;AAEA,QAAI,KAAKC,IAAL,KAAc,aAAd,IAA+B,KAAKA,IAAL,KAAc,cAA7C,IAA+D,KAAKA,IAAL,KAAc,cAAjF,EAAiG;AAC/FH,MAAAA,KAAK,CAACI,GAAN,CAAU,QAAV,EAAoBC,GAApB,CAAwB,WAAxB,EAAqC,KAArC;AACD;;AAEDhB,IAAAA,IAAI,CAACa,MAAD,EAAS,UAAUI,OAAV,EAAmBC,KAAnB,EAA0B;AACrCP,MAAAA,KAAK,CAACa,GAAN,CAAUN,KAAV,EAAiBD,OAAjB;AACD,KAFG,CAAJ;AAGD,GA7DY;AA8DbF,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaU,GAAb,EAAkB;AACrB,WAAO,KAAKA,GAAL,CAAP;AACD,GAhEY;AAiEbT,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaU,GAAb,EAAkBD,GAAlB,EAAuB;AAC1B,SAAKC,GAAL,IAAYD,GAAZ;AACA,WAAO,IAAP;AACD;AApEY,CAAf","sourcesContent":["import { each } from '@antv/util'; // 自定义 Behavior 时候共有的方法\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {};\n  },\n\n  /**\n   * register event handler, behavior will auto bind events\n   * for example:\n   * return {\n   *  click: 'onClick'\n   * }\n   */\n  getEvents: function getEvents() {\n    return {};\n  },\n  updateCfg: function updateCfg(cfg) {\n    Object.assign(this, cfg);\n    return true;\n  },\n  shouldBegin: function shouldBegin() {\n    return true;\n  },\n  shouldUpdate: function shouldUpdate() {\n    return true;\n  },\n  shouldEnd: function shouldEnd() {\n    return true;\n  },\n\n  /**\n   * auto bind events when register behavior\n   * @param graph Graph instance\n   */\n  bind: function bind(graph) {\n    var _this = this;\n\n    var events = this.events;\n    this.graph = graph;\n\n    if (this.type === 'drag-canvas' || this.type === 'brush-select' || this.type === 'lasso-select') {\n      graph.get('canvas').set('draggable', true);\n    }\n\n    each(events, function (handler, event) {\n      graph.on(event, handler);\n    }); // To avoid the tabs switching makes the keydown related behaviors disable\n\n    document.addEventListener('visibilitychange', function () {\n      _this.keydown = false;\n    });\n  },\n  unbind: function unbind(graph) {\n    var events = this.events;\n\n    if (this.type === 'drag-canvas' || this.type === 'brush-select' || this.type === 'lasso-select') {\n      graph.get('canvas').set('draggable', false);\n    }\n\n    each(events, function (handler, event) {\n      graph.off(event, handler);\n    });\n  },\n  get: function get(val) {\n    return this[val];\n  },\n  set: function set(key, val) {\n    this[key] = val;\n    return this;\n  }\n};"]},"metadata":{},"sourceType":"module"}