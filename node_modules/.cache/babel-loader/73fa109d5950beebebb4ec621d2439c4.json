{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      beforeDragNodes.push(clone(t.getModel()));\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.hidenEdge = {};\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge] = true;\n          edge.hide();\n        });\n      });\n    }\n\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n\n    if (!this.origin || !this.shouldEnd.call(this, evt)) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    var item = evt.item;\n\n    if (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    }\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    this.updatePositions(evt);\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n\n    this.hidenEdge = {};\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack')) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push({\n          id: model.id,\n          x: model.x,\n          y: model.y\n        });\n      });\n      this.targets.forEach(function (target) {\n        var targetModel = target.getModel();\n        stackData_1.after.nodes.push({\n          id: targetModel.id,\n          x: targetModel.x,\n          y: targetModel.y\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    this.updatePositions(evt);\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    if (!this.targets || this.targets.length === 0) return;\n    this.updatePositions(evt);\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    this.updatePositions(evt);\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n\n    if (comboId) {\n      if (this.onlyChangeComboSize) {\n        graph.updateCombos();\n      } else {\n        var combo = graph.findById(comboId);\n\n        if (self.comboActiveState) {\n          graph.setItemState(combo, self.comboActiveState, false);\n        }\n\n        this.targets.map(function (node) {\n          var nodeModel = node.getModel();\n\n          if (comboId !== nodeModel.comboId) {\n            graph.updateComboTree(node, comboId);\n          }\n        });\n        graph.updateCombo(combo);\n      }\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    }\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n        graph = event.graph,\n        point = event.point,\n        origin = event.origin,\n        evt = event.evt,\n        updateEdge = event.updateEdge,\n        updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-pc/es/behavior/drag-node.js"],"names":["__assign","deepMix","clone","debounce","Global","getDefaultCfg","updateEdge","delegateStyle","enableDelegate","onlyChangeComboSize","comboActiveState","selectedState","enableOptimize","enableDebounce","getEvents","validationCombo","item","origin","destroyed","type","getType","onDragStart","evt","_this","shouldBegin","call","hasLocked","group","getContainer","set","target","isAnchorPoint","get","graph","targets","targetCombo","nodes","findAllByState","currentNodeId","dragNodes","filter","node","nodeId","length","push","forEach","locked","beforeDragNodes","t","getModel","hidenEdge","edges","getEdges","edge","isVisible","hide","x","y","point","originPoint","onDrag","shouldUpdate","updateDelegate","debounceUpdate","map","update","onDragEnd","shouldEnd","delegateRect","remove","updatePositions","show","refresh","stackData_1","before","combos","after","model","id","targetModel","pushStack","emit","items","targetItem","onDropCombo","setItemState","updateCombos","targetComboModel_1","nodeModel","comboId","updateComboTree","updateCombo","onDropCanvas","onDropNode","self","combo","findById","onDragEnter","onDragLeave","updateFunc","pos","updateItem","updatePosition","event","e","parent_1","attrs","_a","calculationGroupPosition","cx","cy","width","height","minX","minY","addShape","name","delegate","clientX","clientY","attr","minx","Infinity","maxx","miny","maxy","i","element","bbox","getBBox","maxX","maxY","Math","floor","ceil"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      beforeDragNodes.push(clone(t.getModel()));\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.hidenEdge = {};\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge] = true;\n          edge.hide();\n        });\n      });\n    }\n\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n\n    if (!this.origin || !this.shouldEnd.call(this, evt)) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    var item = evt.item;\n\n    if (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    }\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    this.updatePositions(evt);\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n\n    this.hidenEdge = {};\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack')) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push({\n          id: model.id,\n          x: model.x,\n          y: model.y\n        });\n      });\n      this.targets.forEach(function (target) {\n        var targetModel = target.getModel();\n        stackData_1.after.nodes.push({\n          id: targetModel.id,\n          x: targetModel.x,\n          y: targetModel.y\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    this.updatePositions(evt);\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    if (!this.targets || this.targets.length === 0) return;\n    this.updatePositions(evt);\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    this.updatePositions(evt);\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n\n    if (comboId) {\n      if (this.onlyChangeComboSize) {\n        graph.updateCombos();\n      } else {\n        var combo = graph.findById(comboId);\n\n        if (self.comboActiveState) {\n          graph.setItemState(combo, self.comboActiveState, false);\n        }\n\n        this.targets.map(function (node) {\n          var nodeModel = node.getModel();\n\n          if (comboId !== nodeModel.comboId) {\n            graph.updateComboTree(node, comboId);\n          }\n        });\n        graph.updateCombo(combo);\n      }\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    }\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n        graph = event.graph,\n        point = event.point,\n        origin = event.origin,\n        evt = event.evt,\n        updateEdge = event.updateEdge,\n        updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}