{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { AABB } from '../shape/AABB';\n/**\n * generate AABB with positions\n * @param positions [x1,y1,z1, x2,y2,z2]\n */\n\nexport function generateAABBFromVertices(positions) {\n  var aabb = new AABB();\n  var min = vec3.fromValues(positions[0], positions[1], positions[2]);\n  var max = vec3.fromValues(positions[0], positions[1], positions[2]);\n\n  for (var i = 3; i < positions.length;) {\n    var x = positions[i++];\n    var y = positions[i++];\n    var z = positions[i++];\n\n    if (x < min[0]) {\n      min[0] = x;\n    }\n\n    if (y < min[1]) {\n      min[1] = y;\n    }\n\n    if (z < min[2]) {\n      min[2] = z;\n    }\n\n    if (x > max[0]) {\n      max[0] = x;\n    }\n\n    if (y > max[1]) {\n      max[1] = y;\n    }\n\n    if (z > max[2]) {\n      max[2] = z;\n    }\n  }\n\n  aabb.setMinMax(min, max);\n  return aabb;\n}","map":{"version":3,"sources":["../../src/utils/aabb.ts"],"names":["aabb","min","vec3","positions","max","i","x","y","z"],"mappings":"AAAA,SAAA,IAAA,QAAA,WAAA;AACA,SAAA,IAAA,QAAA,eAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAAA,wBAAA,CAAA,SAAA,EAA6D;AAClE,MAAMA,IAAI,GAAG,IAAb,IAAa,EAAb;AACA,MAAMC,GAAG,GAAGC,IAAI,CAAJA,UAAAA,CAAgBC,SAAS,CAAzBD,CAAyB,CAAzBA,EAA8BC,SAAS,CAAvCD,CAAuC,CAAvCA,EAA4CC,SAAS,CAAjE,CAAiE,CAArDD,CAAZ;AACA,MAAME,GAAG,GAAGF,IAAI,CAAJA,UAAAA,CAAgBC,SAAS,CAAzBD,CAAyB,CAAzBA,EAA8BC,SAAS,CAAvCD,CAAuC,CAAvCA,EAA4CC,SAAS,CAAjE,CAAiE,CAArDD,CAAZ;;AAEA,OAAK,IAAIG,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,SAAS,CAA7B,MAAA,GAAwC;AACtC,QAAMG,CAAC,GAAGH,SAAS,CAACE,CAApB,EAAmB,CAAnB;AACA,QAAME,CAAC,GAAGJ,SAAS,CAACE,CAApB,EAAmB,CAAnB;AACA,QAAMG,CAAC,GAAGL,SAAS,CAACE,CAApB,EAAmB,CAAnB;;AACA,QAAIC,CAAC,GAAGL,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;;AACD,QAAIM,CAAC,GAAGN,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;;AACD,QAAIO,CAAC,GAAGP,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;;AACD,QAAIK,CAAC,GAAGF,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;;AACD,QAAIG,CAAC,GAAGH,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;;AACD,QAAII,CAAC,GAAGJ,GAAG,CAAX,CAAW,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAHA,CAAG,CAAHA,GAAAA,CAAAA;AACD;AACF;;AAEDJ,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,GAAAA,EAAAA,GAAAA;AACA,SAAA,IAAA;AACD","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from '../shape/AABB';\n\n/**\n * generate AABB with positions\n * @param positions [x1,y1,z1, x2,y2,z2]\n */\nexport function generateAABBFromVertices(positions: number[]): AABB {\n  const aabb = new AABB();\n  const min = vec3.fromValues(positions[0], positions[1], positions[2]);\n  const max = vec3.fromValues(positions[0], positions[1], positions[2]);\n\n  for (let i = 3; i < positions.length; ) {\n    const x = positions[i++];\n    const y = positions[i++];\n    const z = positions[i++];\n    if (x < min[0]) {\n      min[0] = x;\n    }\n    if (y < min[1]) {\n      min[1] = y;\n    }\n    if (z < min[2]) {\n      min[2] = z;\n    }\n    if (x > max[0]) {\n      max[0] = x;\n    }\n    if (y > max[1]) {\n      max[1] = y;\n    }\n    if (z > max[2]) {\n      max[2] = z;\n    }\n  }\n\n  aabb.setMinMax(min, max);\n  return aabb;\n}\n"]},"metadata":{},"sourceType":"module"}