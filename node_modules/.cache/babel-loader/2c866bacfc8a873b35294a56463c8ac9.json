{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;\n\nvar inject_1 = require(\"../annotation/inject\");\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nObject.defineProperty(exports, \"getFunctionName\", {\n  enumerable: true,\n  get: function () {\n    return serialization_1.getFunctionName;\n  }\n});\n\nvar target_1 = require(\"./target\");\n\nfunction getDependencies(metadataReader, func) {\n  var constructorName = serialization_1.getFunctionName(func);\n  var targets = getTargets(metadataReader, constructorName, func, false);\n  return targets;\n}\n\nexports.getDependencies = getDependencies;\n\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n  var metadata = metadataReader.getConstructorMetadata(func);\n  var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n\n  if (serviceIdentifiers === undefined) {\n    var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n    throw new Error(msg);\n  }\n\n  var constructorArgsMetadata = metadata.userGeneratedMetadata;\n  var keys = Object.keys(constructorArgsMetadata);\n  var hasUserDeclaredUnknownInjections = func.length === 0 && keys.length > 0;\n  var hasOptionalParameters = keys.length > func.length;\n  var iterations = hasUserDeclaredUnknownInjections || hasOptionalParameters ? keys.length : func.length;\n  var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n  var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n\n  var targets = __spreadArray(__spreadArray([], constructorTargets), propertyTargets);\n\n  return targets;\n}\n\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n  var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n  var metadata = formatTargetMetadata(targetMetadata);\n  var isManaged = metadata.unmanaged !== true;\n  var serviceIdentifier = serviceIdentifiers[index];\n  var injectIdentifier = metadata.inject || metadata.multiInject;\n  serviceIdentifier = injectIdentifier ? injectIdentifier : serviceIdentifier;\n\n  if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n    serviceIdentifier = serviceIdentifier.unwrap();\n  }\n\n  if (isManaged) {\n    var isObject = serviceIdentifier === Object;\n    var isFunction = serviceIdentifier === Function;\n    var isUndefined = serviceIdentifier === undefined;\n    var isUnknownType = isObject || isFunction || isUndefined;\n\n    if (!isBaseClass && isUnknownType) {\n      var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n      throw new Error(msg);\n    }\n\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    return target;\n  }\n\n  return null;\n}\n\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n  var targets = [];\n\n  for (var i = 0; i < iterations; i++) {\n    var index = i;\n    var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n\n    if (target !== null) {\n      targets.push(target);\n    }\n  }\n\n  return targets;\n}\n\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n  var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n  var targets = [];\n  var keys = Object.keys(classPropsMetadata);\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    var targetMetadata = classPropsMetadata[key];\n    var metadata = formatTargetMetadata(classPropsMetadata[key]);\n    var targetName = metadata.targetName || key;\n    var serviceIdentifier = metadata.inject || metadata.multiInject;\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    targets.push(target);\n  }\n\n  var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n    targets = __spreadArray(__spreadArray([], targets), baseTargets);\n  }\n\n  return targets;\n}\n\nfunction getBaseClassDependencyCount(metadataReader, func) {\n  var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n    var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n    var metadata = targets.map(function (t) {\n      return t.metadata.filter(function (m) {\n        return m.key === METADATA_KEY.UNMANAGED_TAG;\n      });\n    });\n    var unmanagedCount = [].concat.apply([], metadata).length;\n    var dependencyCount = targets.length - unmanagedCount;\n\n    if (dependencyCount > 0) {\n      return dependencyCount;\n    } else {\n      return getBaseClassDependencyCount(metadataReader, baseConstructor);\n    }\n  } else {\n    return 0;\n  }\n}\n\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\n\nfunction formatTargetMetadata(targetMetadata) {\n  var targetMetadataMap = {};\n  targetMetadata.forEach(function (m) {\n    targetMetadataMap[m.key.toString()] = m.value;\n  });\n  return {\n    inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n    multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n    targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n    unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n  };\n}","map":{"version":3,"sources":["../../src/planning/reflection_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;\nvar inject_1 = require(\"../annotation/inject\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar serialization_1 = require(\"../utils/serialization\");\nObject.defineProperty(exports, \"getFunctionName\", { enumerable: true, get: function () { return serialization_1.getFunctionName; } });\nvar target_1 = require(\"./target\");\nfunction getDependencies(metadataReader, func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(metadataReader, constructorName, func, false);\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n    var metadata = metadataReader.getConstructorMetadata(func);\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\n    var keys = Object.keys(constructorArgsMetadata);\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\n    var hasOptionalParameters = keys.length > func.length;\n    var iterations = (hasUserDeclaredUnknownInjections || hasOptionalParameters) ? keys.length : func.length;\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n    var targets = __spreadArray(__spreadArray([], constructorTargets), propertyTargets);\n    return targets;\n}\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n    var metadata = formatTargetMetadata(targetMetadata);\n    var isManaged = metadata.unmanaged !== true;\n    var serviceIdentifier = serviceIdentifiers[index];\n    var injectIdentifier = (metadata.inject || metadata.multiInject);\n    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;\n    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n        serviceIdentifier = serviceIdentifier.unwrap();\n    }\n    if (isManaged) {\n        var isObject = serviceIdentifier === Object;\n        var isFunction = serviceIdentifier === Function;\n        var isUndefined = serviceIdentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (!isBaseClass && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        return target;\n    }\n    return null;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n    var targets = [];\n    for (var i = 0; i < iterations; i++) {\n        var index = i;\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n        if (target !== null) {\n            targets.push(target);\n        }\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIdentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n        targets = __spreadArray(__spreadArray([], targets), baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDependencyCount(metadataReader, func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n//# sourceMappingURL=reflection_utils.js.map"]},"metadata":{},"sourceType":"script"}