{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n/** Used to identify `toStringTag` values of typed arrays. */\n\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\n\nfunction baseUnary(func) {\n  return function (value) {\n    return func(value);\n  };\n}\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\n\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;\n}\n\nfunction isObjectLike(value) {\n  return !!value && _typeof(value) === 'object';\n}\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\n\n\nexport var isTypedArray = baseIsTypedArray;","map":{"version":3,"sources":["../../src/utils/is-typedarray.ts"],"names":["MAX_SAFE_INTEGER","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","func","objectProto","Object","objectToString","isObjectLike","isLength","value","isTypedArray"],"mappings":"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","sourcesContent":["/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nconst argsTag = '[object Arguments]';\nconst arrayTag = '[object Array]';\nconst boolTag = '[object Boolean]';\nconst dateTag = '[object Date]';\nconst errorTag = '[object Error]';\nconst funcTag = '[object Function]';\nconst mapTag = '[object Map]';\nconst numberTag = '[object Number]';\nconst objectTag = '[object Object]';\nconst regexpTag = '[object RegExp]';\nconst setTag = '[object Set]';\nconst stringTag = '[object String]';\nconst weakMapTag = '[object WeakMap]';\n\nconst arrayBufferTag = '[object ArrayBuffer]';\nconst dataViewTag = '[object DataView]';\nconst float32Tag = '[object Float32Array]';\nconst float64Tag = '[object Float64Array]';\nconst int8Tag = '[object Int8Array]';\nconst int16Tag = '[object Int16Array]';\nconst int32Tag = '[object Int32Array]';\nconst uint8Tag = '[object Uint8Array]';\nconst uint8ClampedTag = '[object Uint8ClampedArray]';\nconst uint16Tag = '[object Uint16Array]';\nconst uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nconst typedArrayTags: Record<string, boolean> = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[\n  int8Tag\n] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[\n  uint8Tag\n] = typedArrayTags[uint8ClampedTag] = typedArrayTags[\n  uint16Tag\n] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[\n  arrayBufferTag\n] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[\n  dateTag\n] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[\n  mapTag\n] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[\n  regexpTag\n] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[\n  weakMapTag\n] = false;\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func: any) {\n  return function(value: any) {\n    return func(value);\n  };\n}\n\n/** Used for built-in method references. */\nconst objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nconst objectToString = objectProto.toString;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value: any) {\n  return (\n    isObjectLike(value) &&\n    isLength(value.length) &&\n    !!typedArrayTags[objectToString.call(value)]\n  );\n}\n\nfunction isLength(value: any) {\n  return (\n    typeof value === 'number' &&\n    value > -1 &&\n    value % 1 === 0 &&\n    value <= MAX_SAFE_INTEGER\n  );\n}\n\nfunction isObjectLike(value: any) {\n  return !!value && typeof value === 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nexport const isTypedArray = baseIsTypedArray;\n"]},"metadata":{},"sourceType":"module"}