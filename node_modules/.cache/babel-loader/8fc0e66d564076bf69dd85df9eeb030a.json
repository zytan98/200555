{"ast":null,"code":"import dijkstra from './dijkstra';\nimport { getNeighbors } from './util';\nexport var findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = dijkstra(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\nexport var findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? getNeighbors(start, edges, 'target') : getNeighbors(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? getNeighbors(child, edges, 'target') : getNeighbors(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/algorithm/es/find-path.js"],"names":["dijkstra","getNeighbors","findShortestPath","graphData","start","end","directed","weightPropertyName","_a","length","path","allPath","findAllPath","_b","edges","visited","isVisited","stack","neighbors","push","children","child","shift","filter","neighbor","node","pop","map"],"mappings":"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","sourcesContent":["import dijkstra from './dijkstra';\nimport { getNeighbors } from './util';\nexport var findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = dijkstra(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\nexport var findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? getNeighbors(start, edges, 'target') : getNeighbors(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? getNeighbors(child, edges, 'target') : getNeighbors(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};"]},"metadata":{},"sourceType":"module"}