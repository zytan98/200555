{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { mat3, vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { Mask } from '../../shape/Frustum';\nimport { getRotationScale } from '../../utils/math';\nexport var MeshSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.CullableComponentManager), _dec4 = inject(IDENTIFIER.GeometryComponentManager), _dec5 = inject(IDENTIFIER.HierarchyComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MeshSystem() {\n    _classCallCheck(this, MeshSystem);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"cullable\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"geometry\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n\n    this.planes = void 0;\n  }\n\n  _createClass(MeshSystem, [{\n    key: \"setFrustumPlanes\",\n    value: function setFrustumPlanes(planes) {\n      this.planes = planes;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        var _iterator, _step, view, scene, camera, _iterator2, _step2, entity, component, hierarchyComponent, cullableComponent, geometryComponent, meshTransform, worldTransform, _geometryComponent$aa, center, halfExtents, transformedCenter, rotationScale, transformedHalfExtents, parentCullableComponent;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(views);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    view = _step.value;\n                    scene = view.getScene();\n                    camera = view.getCamera(); // get VP matrix from camera\n\n                    _iterator2 = _createForOfIteratorHelper(scene.getEntities());\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        entity = _step2.value;\n                        component = this.mesh.getComponentByEntity(entity);\n\n                        if (component) {\n                          hierarchyComponent = this.hierarchy.getComponentByEntity(entity);\n                          cullableComponent = this.cullable.getComponentByEntity(entity);\n                          geometryComponent = component.geometry;\n                          meshTransform = this.transform.getComponentByEntity(entity); // update mesh.aabb\n\n                          if (geometryComponent && geometryComponent.aabb && meshTransform && component.aabbDirty) {\n                            worldTransform = meshTransform.worldTransform; // apply transform to geometry.aabb\n\n                            _geometryComponent$aa = geometryComponent.aabb, center = _geometryComponent$aa.center, halfExtents = _geometryComponent$aa.halfExtents;\n                            transformedCenter = vec3.transformMat4(vec3.create(), center, worldTransform);\n                            rotationScale = getRotationScale(worldTransform, mat3.create());\n                            transformedHalfExtents = vec3.transformMat3(vec3.create(), halfExtents, rotationScale);\n                            component.aabb.update(transformedCenter, transformedHalfExtents);\n                            component.aabbDirty = false;\n                          } // culling\n\n\n                          if (cullableComponent && geometryComponent) {\n                            parentCullableComponent = this.cullable.getComponentByEntity((hierarchyComponent === null || hierarchyComponent === void 0 ? void 0 : hierarchyComponent.parentID) || -1);\n                            cullableComponent.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(component.aabb, (parentCullableComponent === null || parentCullableComponent === void 0 ? void 0 : parentCullableComponent.visibilityPlaneMask) || Mask.INDETERMINATE, this.planes || camera.getFrustum().planes);\n                            cullableComponent.visible = cullableComponent.visibilityPlaneMask !== Mask.OUTSIDE;\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.cullable.clear();\n      this.mesh.clear();\n    }\n    /**\n     *\n     * @see「Optimized View Frustum Culling Algorithms for Bounding Boxes」\n     * @see https://github.com/antvis/GWebGPUEngine/issues/3\n     *\n     * * 基础相交测试 the basic intersection test\n     * * 标记 masking @see https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/\n     * * TODO: 平面一致性测试 the plane-coherency test\n     * * TODO: 支持 mesh 指定自身的剔除策略，参考 Babylon.js @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n     *\n     * @param aabb aabb\n     * @param parentPlaneMask mask of parent\n     * @param planes planes of frustum\n     */\n\n  }, {\n    key: \"computeVisibilityWithPlaneMask\",\n    value: function computeVisibilityWithPlaneMask(aabb, parentPlaneMask, planes) {\n      if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n        // 父节点完全位于视锥内或者外部，直接返回\n        return parentPlaneMask;\n      } // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n      // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n\n\n      var mask = Mask.INSIDE;\n\n      for (var k = 0, len = planes.length; k < len; ++k) {\n        // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n        var flag = k < 31 ? 1 << k : 0;\n\n        if (k < 31 && (parentPlaneMask & flag) === 0) {\n          // 父节点处于当前面内部，可以跳过\n          continue;\n        } // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n\n\n        var _planes$k = planes[k],\n            normal = _planes$k.normal,\n            distance = _planes$k.distance;\n\n        if (vec3.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance > 0) {\n          return Mask.OUTSIDE;\n        }\n\n        if (vec3.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance > 0) {\n          // 和当前面相交，对应位置为1，继续检测下一个面\n          mask |= flag;\n        }\n      }\n\n      return mask;\n    }\n  }]);\n\n  return MeshSystem;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../src/components/mesh/System.ts"],"names":["injectable","MeshSystem","inject","IDENTIFIER","view","scene","camera","entity","component","hierarchyComponent","cullableComponent","geometryComponent","meshTransform","worldTransform","center","halfExtents","transformedCenter","vec3","rotationScale","getRotationScale","mat3","transformedHalfExtents","parentCullableComponent","Mask","parentPlaneMask","mask","k","len","planes","flag","normal","distance","aabb"],"mappings":"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","sourcesContent":["import { mat3, mat4, vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { AABB } from '../../shape/AABB';\nimport { Mask } from '../../shape/Frustum';\nimport { Plane } from '../../shape/Plane';\nimport { getRotationScale } from '../../utils/math';\nimport { GeometryComponent } from '../geometry/GeometryComponent';\nimport { MaterialComponent } from '../material/MaterialComponent';\nimport { IView } from '../renderer/IRendererService';\nimport { HierarchyComponent } from '../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../scenegraph/TransformComponent';\nimport { CullableComponent } from './CullableComponent';\nimport { IMeshParams } from './interface';\nimport { MeshComponent } from './MeshComponent';\n\n@injectable()\nexport class MeshSystem implements ISystem {\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  private planes: Plane[];\n\n  public setFrustumPlanes(planes: Plane[]) {\n    this.planes = planes;\n  }\n\n  public async execute(views: IView[]) {\n    for (const view of views) {\n      const scene = view.getScene();\n      const camera = view.getCamera();\n\n      // get VP matrix from camera\n      for (const entity of scene.getEntities()) {\n        const component = this.mesh.getComponentByEntity(entity);\n\n        if (component) {\n          const hierarchyComponent = this.hierarchy.getComponentByEntity(entity);\n          const cullableComponent = this.cullable.getComponentByEntity(entity);\n          const geometryComponent = component.geometry;\n          const meshTransform = this.transform.getComponentByEntity(entity);\n\n          // update mesh.aabb\n          if (\n            geometryComponent &&\n            geometryComponent.aabb &&\n            meshTransform &&\n            component.aabbDirty\n          ) {\n            const { worldTransform } = meshTransform;\n\n            // apply transform to geometry.aabb\n            const { center, halfExtents } = geometryComponent.aabb;\n            const transformedCenter = vec3.transformMat4(\n              vec3.create(),\n              center,\n              worldTransform,\n            );\n\n            const rotationScale = getRotationScale(worldTransform, mat3.create());\n            const transformedHalfExtents = vec3.transformMat3(\n              vec3.create(),\n              halfExtents,\n              rotationScale,\n            );\n\n            component.aabb.update(transformedCenter, transformedHalfExtents);\n            component.aabbDirty = false;\n          }\n\n          // culling\n          if (cullableComponent && geometryComponent) {\n            const parentCullableComponent = this.cullable.getComponentByEntity(\n              hierarchyComponent?.parentID || -1,\n            );\n            cullableComponent.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(\n              component.aabb,\n              parentCullableComponent?.visibilityPlaneMask || Mask.INDETERMINATE,\n              this.planes || camera.getFrustum().planes,\n            );\n            cullableComponent.visible =\n              cullableComponent.visibilityPlaneMask !== Mask.OUTSIDE;\n          }\n        }\n      }\n    }\n  }\n\n  public tearDown() {\n    this.cullable.clear();\n    this.mesh.clear();\n  }\n\n  /**\n   *\n   * @see「Optimized View Frustum Culling Algorithms for Bounding Boxes」\n   * @see https://github.com/antvis/GWebGPUEngine/issues/3\n   *\n   * * 基础相交测试 the basic intersection test\n   * * 标记 masking @see https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/\n   * * TODO: 平面一致性测试 the plane-coherency test\n   * * TODO: 支持 mesh 指定自身的剔除策略，参考 Babylon.js @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n   *\n   * @param aabb aabb\n   * @param parentPlaneMask mask of parent\n   * @param planes planes of frustum\n   */\n  public computeVisibilityWithPlaneMask(\n    aabb: AABB,\n    parentPlaneMask: Mask,\n    planes: Plane[],\n  ) {\n    if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n      // 父节点完全位于视锥内或者外部，直接返回\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = Mask.INSIDE;\n\n    for (let k = 0, len = planes.length; k < len; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // 父节点处于当前面内部，可以跳过\n        continue;\n      }\n\n      // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n      const { normal, distance } = planes[k];\n      if (\n        vec3.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance >\n        0\n      ) {\n        return Mask.OUTSIDE;\n      }\n      if (\n        vec3.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance >\n        0\n      ) {\n        // 和当前面相交，对应位置为1，继续检测下一个面\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}