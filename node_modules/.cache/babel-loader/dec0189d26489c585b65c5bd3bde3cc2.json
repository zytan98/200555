{"ast":null,"code":"import WebWorker from './work';\nexport var LayoutWorker = function LayoutWorker(workerScriptURL) {\n  if (workerScriptURL === void 0) {\n    workerScriptURL = 'https://unpkg.com/@antv/layout@latest/dist/layout.min.js';\n  }\n\n  function workerCode() {\n    var LAYOUT_MESSAGE = {\n      // run layout\n      RUN: 'LAYOUT_RUN',\n      // layout ended with success\n      END: 'LAYOUT_END',\n      // layout error\n      ERROR: 'LAYOUT_ERROR',\n      // layout tick, used in force directed layout\n      TICK: 'LAYOUT_TICK',\n      GPURUN: 'GPU_LAYOUT_RUN',\n      GPUEND: 'GPU_LAYOUT_END'\n    }; // @ts-ignore\n\n    layout.registerLayout('grid', layout.GridLayout); // @ts-ignore\n\n    layout.registerLayout('random', layout.RandomLayout); // @ts-ignore\n\n    layout.registerLayout('force', layout.ForceLayout); // @ts-ignore\n\n    layout.registerLayout('circular', layout.CircularLayout); // @ts-ignore\n\n    layout.registerLayout('dagre', layout.DagreLayout); // @ts-ignore\n\n    layout.registerLayout('radial', layout.RadialLayout); // @ts-ignore\n\n    layout.registerLayout('concentric', layout.ConcentricLayout); // @ts-ignore\n\n    layout.registerLayout('mds', layout.MDSLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman', layout.FruchtermanLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman-gpu', layout.FruchtermanGPULayout); // @ts-ignore\n\n    layout.registerLayout('gForce', layout.GForceLayout); // @ts-ignore\n\n    layout.registerLayout('gForce-gpu', layout.GForceGPULayout); // @ts-ignore\n\n    layout.registerLayout('comboForce', layout.ComboForceLayout); // @ts-ignore\n\n    layout.registerLayout('forceAtlas2', layout.ForceAtlas2Layout);\n\n    function isLayoutMessage(event) {\n      var type = event.data.type;\n      return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n    }\n\n    function handleLayoutMessage(event) {\n      var _this = this;\n\n      var type = event.data.type;\n\n      switch (type) {\n        case LAYOUT_MESSAGE.RUN:\n          {\n            var _a = event.data,\n                nodes_1 = _a.nodes,\n                edges = _a.edges,\n                _b = _a.layoutCfg,\n                layoutCfg = _b === void 0 ? {} : _b;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" not found\"\n              });\n              break;\n            }\n\n            var layoutMethod_1;\n\n            layoutCfg.onLayoutEnd = function () {\n              _this.postMessage({\n                type: LAYOUT_MESSAGE.END,\n                nodes: nodes_1\n              });\n\n              layoutMethod_1 === null || layoutMethod_1 === void 0 ? void 0 : layoutMethod_1.destroy();\n            };\n\n            layoutMethod_1 = new LayoutClass(layoutCfg);\n            layoutMethod_1.init({\n              nodes: nodes_1,\n              edges: edges\n            });\n            layoutMethod_1.execute();\n            break;\n          }\n\n        case LAYOUT_MESSAGE.GPURUN:\n          {\n            var _c = event.data,\n                nodes = _c.nodes,\n                edges = _c.edges,\n                _d = _c.layoutCfg,\n                layoutCfg = _d === void 0 ? {} : _d,\n                canvas = _c.canvas;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" not found\"\n              });\n              break;\n            }\n\n            if (layoutType.split('-')[1] !== 'gpu') {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" does not support GPU\"\n              });\n              break;\n            }\n\n            var layoutMethod = new LayoutClass(layoutCfg);\n            layoutMethod.init({\n              nodes: nodes,\n              edges: edges\n            });\n            layoutMethod.executeWithWorker(canvas, this);\n            break;\n          }\n\n        default:\n          break;\n      }\n    }\n\n    onmessage = function onmessage(event) {\n      if (isLayoutMessage(event)) {\n        handleLayoutMessage(event);\n      }\n    };\n  }\n\n  var layoutWorker = new WebWorker(workerCode, workerScriptURL);\n  return layoutWorker;\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-pc/es/layout/worker/layout.worker.js"],"names":["WebWorker","LayoutWorker","workerScriptURL","workerCode","LAYOUT_MESSAGE","RUN","END","ERROR","TICK","GPURUN","GPUEND","layout","registerLayout","GridLayout","RandomLayout","ForceLayout","CircularLayout","DagreLayout","RadialLayout","ConcentricLayout","MDSLayout","FruchtermanLayout","FruchtermanGPULayout","GForceLayout","GForceGPULayout","ComboForceLayout","ForceAtlas2Layout","isLayoutMessage","event","type","data","handleLayoutMessage","_this","_a","nodes_1","nodes","edges","_b","layoutCfg","layoutType","LayoutClass","getLayoutByName","postMessage","message","layoutMethod_1","onLayoutEnd","destroy","init","execute","_c","_d","canvas","split","layoutMethod","executeWithWorker","onmessage","layoutWorker"],"mappings":"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","sourcesContent":["import WebWorker from './work';\nexport var LayoutWorker = function LayoutWorker(workerScriptURL) {\n  if (workerScriptURL === void 0) {\n    workerScriptURL = 'https://unpkg.com/@antv/layout@latest/dist/layout.min.js';\n  }\n\n  function workerCode() {\n    var LAYOUT_MESSAGE = {\n      // run layout\n      RUN: 'LAYOUT_RUN',\n      // layout ended with success\n      END: 'LAYOUT_END',\n      // layout error\n      ERROR: 'LAYOUT_ERROR',\n      // layout tick, used in force directed layout\n      TICK: 'LAYOUT_TICK',\n      GPURUN: 'GPU_LAYOUT_RUN',\n      GPUEND: 'GPU_LAYOUT_END'\n    }; // @ts-ignore\n\n    layout.registerLayout('grid', layout.GridLayout); // @ts-ignore\n\n    layout.registerLayout('random', layout.RandomLayout); // @ts-ignore\n\n    layout.registerLayout('force', layout.ForceLayout); // @ts-ignore\n\n    layout.registerLayout('circular', layout.CircularLayout); // @ts-ignore\n\n    layout.registerLayout('dagre', layout.DagreLayout); // @ts-ignore\n\n    layout.registerLayout('radial', layout.RadialLayout); // @ts-ignore\n\n    layout.registerLayout('concentric', layout.ConcentricLayout); // @ts-ignore\n\n    layout.registerLayout('mds', layout.MDSLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman', layout.FruchtermanLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman-gpu', layout.FruchtermanGPULayout); // @ts-ignore\n\n    layout.registerLayout('gForce', layout.GForceLayout); // @ts-ignore\n\n    layout.registerLayout('gForce-gpu', layout.GForceGPULayout); // @ts-ignore\n\n    layout.registerLayout('comboForce', layout.ComboForceLayout); // @ts-ignore\n\n    layout.registerLayout('forceAtlas2', layout.ForceAtlas2Layout);\n\n    function isLayoutMessage(event) {\n      var type = event.data.type;\n      return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n    }\n\n    function handleLayoutMessage(event) {\n      var _this = this;\n\n      var type = event.data.type;\n\n      switch (type) {\n        case LAYOUT_MESSAGE.RUN:\n          {\n            var _a = event.data,\n                nodes_1 = _a.nodes,\n                edges = _a.edges,\n                _b = _a.layoutCfg,\n                layoutCfg = _b === void 0 ? {} : _b;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" not found\"\n              });\n              break;\n            }\n\n            var layoutMethod_1;\n\n            layoutCfg.onLayoutEnd = function () {\n              _this.postMessage({\n                type: LAYOUT_MESSAGE.END,\n                nodes: nodes_1\n              });\n\n              layoutMethod_1 === null || layoutMethod_1 === void 0 ? void 0 : layoutMethod_1.destroy();\n            };\n\n            layoutMethod_1 = new LayoutClass(layoutCfg);\n            layoutMethod_1.init({\n              nodes: nodes_1,\n              edges: edges\n            });\n            layoutMethod_1.execute();\n            break;\n          }\n\n        case LAYOUT_MESSAGE.GPURUN:\n          {\n            var _c = event.data,\n                nodes = _c.nodes,\n                edges = _c.edges,\n                _d = _c.layoutCfg,\n                layoutCfg = _d === void 0 ? {} : _d,\n                canvas = _c.canvas;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" not found\"\n              });\n              break;\n            }\n\n            if (layoutType.split('-')[1] !== 'gpu') {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \" + layoutType + \" does not support GPU\"\n              });\n              break;\n            }\n\n            var layoutMethod = new LayoutClass(layoutCfg);\n            layoutMethod.init({\n              nodes: nodes,\n              edges: edges\n            });\n            layoutMethod.executeWithWorker(canvas, this);\n            break;\n          }\n\n        default:\n          break;\n      }\n    }\n\n    onmessage = function onmessage(event) {\n      if (isLayoutMessage(event)) {\n        handleLayoutMessage(event);\n      }\n    };\n  }\n\n  var layoutWorker = new WebWorker(workerCode, workerScriptURL);\n  return layoutWorker;\n};"]},"metadata":{},"sourceType":"module"}