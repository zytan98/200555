{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix, each, isArray, isString } from '@antv/util';\nimport { registerEdge, Util, BaseGlobal as Global } from '@antv/g6-core';\nimport { getPathWithBorderRadiusByPolyline, getPolylinePoints } from './polyline-util';\nimport { pathFinder } from './router'; // 折线\n\nregisterEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    size: Global.defaultEdge.size,\n    style: {\n      radius: 0,\n      offset: 15,\n      x: 0,\n      y: 0,\n      stroke: Global.defaultEdge.style.stroke,\n      lineAppendWidth: Global.defaultEdge.style.lineAppendWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.edgeLabel.style.fill,\n        fontSize: Global.edgeLabel.style.fontSize\n      }\n    },\n    routeCfg: {\n      obstacles: [],\n      maxAllowedDirectionChange: Math.PI,\n      maximumLoops: 500,\n      gridSize: 10 // 指定精度\n\n    },\n    stateStyles: __assign({}, Global.edgeStateStyles)\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = style.radius;\n    var defaultRouteCfg = this.options.routeCfg;\n    var routeCfg = mix({}, defaultRouteCfg, cfg.routeCfg);\n    routeCfg.offset = style.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    if (!item.isVisible()) return;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var shape = group.find(function (element) {\n      return element.get('className') === 'edge-shape';\n    }) || item.getKeyShape();\n    var size = cfg.size;\n    cfg = this.getPathPoints(cfg);\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg); // || cfg.controlPoints;\n\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var currentAttr = shape.attr();\n    var previousStyle = mix({}, strokeStyle, currentAttr, cfg.style);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = previousStyle.radius;\n    var defaultRouteCfg = this.options.routeCfg;\n    var routeCfg = mix({}, defaultRouteCfg, cfg.routeCfg);\n    routeCfg.offset = previousStyle.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (currentAttr.endArrow && previousStyle.endArrow === false) {\n      cfg.style.endArrow = {\n        path: ''\n      };\n    }\n\n    if (currentAttr.startArrow && previousStyle.startArrow === false) {\n      cfg.style.startArrow = {\n        path: ''\n      };\n    }\n\n    var style = mix(strokeStyle, shape.attr(), {\n      lineWidth: size,\n      path: path\n    }, cfg.style);\n\n    if (shape) {\n      shape.attr(style);\n    }\n  },\n  getPath: function getPath(points, source, target, radius, routeCfg) {\n    var offset = routeCfg.offset,\n        simple = routeCfg.simple; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints = simple ? getPolylinePoints(points[points.length - 1], points[0], target, source, offset) : pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n    if (!polylinePoints || !polylinePoints.length) return 'M0 0, L0 0';\n\n    if (radius) {\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    var res = Util.pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-element/es/edges/polyline.js"],"names":["__assign","mix","each","isArray","isString","registerEdge","Util","BaseGlobal","Global","getPathWithBorderRadiusByPolyline","getPolylinePoints","pathFinder","options","color","defaultEdge","size","style","radius","offset","x","y","stroke","lineAppendWidth","labelCfg","fill","edgeLabel","fontSize","routeCfg","obstacles","maxAllowedDirectionChange","Math","PI","maximumLoops","gridSize","stateStyles","edgeStateStyles","shapeType","labelPosition","drawShape","cfg","group","shapeStyle","getShapeStyle","keyShape","addShape","className","name","attrs","defaultStyle","strokeStyle","getPathPoints","startPoint","endPoint","controlPoints","getControlPoints","points","concat","push","source","sourceNode","target","targetNode","defaultRouteCfg","path","getPath","length","indexOf","isNaN","lineWidth","updateShapeStyle","item","getContainer","isVisible","shape","find","element","get","getKeyShape","currentAttr","attr","previousStyle","endArrow","startArrow","simple","pathArray_1","point","index","polylinePoints","res_1","res","pointsToPolygon"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { mix, each, isArray, isString } from '@antv/util';\nimport { registerEdge, Util, BaseGlobal as Global } from '@antv/g6-core';\nimport { getPathWithBorderRadiusByPolyline, getPolylinePoints } from './polyline-util';\nimport { pathFinder } from './router'; // 折线\n\nregisterEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    size: Global.defaultEdge.size,\n    style: {\n      radius: 0,\n      offset: 15,\n      x: 0,\n      y: 0,\n      stroke: Global.defaultEdge.style.stroke,\n      lineAppendWidth: Global.defaultEdge.style.lineAppendWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.edgeLabel.style.fill,\n        fontSize: Global.edgeLabel.style.fontSize\n      }\n    },\n    routeCfg: {\n      obstacles: [],\n      maxAllowedDirectionChange: Math.PI,\n      maximumLoops: 500,\n      gridSize: 10 // 指定精度\n\n    },\n    stateStyles: __assign({}, Global.edgeStateStyles)\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = style.radius;\n    var defaultRouteCfg = this.options.routeCfg;\n    var routeCfg = mix({}, defaultRouteCfg, cfg.routeCfg);\n    routeCfg.offset = style.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    if (!item.isVisible()) return;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var shape = group.find(function (element) {\n      return element.get('className') === 'edge-shape';\n    }) || item.getKeyShape();\n    var size = cfg.size;\n    cfg = this.getPathPoints(cfg);\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg); // || cfg.controlPoints;\n\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var currentAttr = shape.attr();\n    var previousStyle = mix({}, strokeStyle, currentAttr, cfg.style);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = previousStyle.radius;\n    var defaultRouteCfg = this.options.routeCfg;\n    var routeCfg = mix({}, defaultRouteCfg, cfg.routeCfg);\n    routeCfg.offset = previousStyle.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (currentAttr.endArrow && previousStyle.endArrow === false) {\n      cfg.style.endArrow = {\n        path: ''\n      };\n    }\n\n    if (currentAttr.startArrow && previousStyle.startArrow === false) {\n      cfg.style.startArrow = {\n        path: ''\n      };\n    }\n\n    var style = mix(strokeStyle, shape.attr(), {\n      lineWidth: size,\n      path: path\n    }, cfg.style);\n\n    if (shape) {\n      shape.attr(style);\n    }\n  },\n  getPath: function getPath(points, source, target, radius, routeCfg) {\n    var offset = routeCfg.offset,\n        simple = routeCfg.simple; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints = simple ? getPolylinePoints(points[points.length - 1], points[0], target, source, offset) : pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n    if (!polylinePoints || !polylinePoints.length) return 'M0 0, L0 0';\n\n    if (radius) {\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    var res = Util.pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');"]},"metadata":{},"sourceType":"module"}