{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { map, reduce } from '@antv/util';\nimport { isRealNumber } from '../number';\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\n\nexport function percent(data, measure, groupField, as) {\n  // 1. 先计算每一个分组的 max 值\n  var sumMap = reduce(data, function (map, datum) {\n    var groupValue = datum[groupField];\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map()); // 2. 循环数组，计算占比\n\n  return map(data, function (datum) {\n    var _a;\n\n    var v = datum[measure];\n    var groupValue = datum[groupField];\n    var percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[as] = percentage, _a));\n  });\n}\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\n\nexport function getDeepPercent(data, measure, fields, percent) {\n  var sumMap = reduce(data, function (map, datum) {\n    // 获取分组得到的枚举key值\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\" + value + datum[field];\n    }, '');\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map()); // 2. 循环数组，计算占比\n\n  return map(data, function (datum) {\n    var _a;\n\n    var v = datum[measure]; // 获取分组得到的枚举key值\n\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\" + value + datum[field];\n    }, '');\n    var percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[percent] = percentage, _a));\n  });\n}\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\n\nexport function getDataWhetherPecentage(data, yField, groupField, asField, isPercent) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}","map":{"version":3,"sources":["../../../src/utils/transform/percent.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,EAAc,MAAd,QAA4B,YAA5B;AAEA,SAAS,YAAT,QAA6B,WAA7B;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B,OAA9B,EAA+C,UAA/C,EAAmE,EAAnE,EAA6E;AACjF;AACA,MAAM,MAAM,GAAG,MAAM,CACnB,IADmB,EAEnB,UAAC,GAAD,EAAM,KAAN,EAAkB;AAChB,QAAM,UAAU,GAAG,KAAK,CAAC,UAAD,CAAxB;AACA,QAAI,GAAG,GAAG,GAAG,CAAC,GAAJ,CAAQ,UAAR,IAAsB,GAAG,CAAC,GAAJ,CAAQ,UAAR,CAAtB,GAA4C,CAAtD;AAEA,QAAM,CAAC,GAAG,KAAK,CAAC,OAAD,CAAf;AAEA,IAAA,GAAG,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,GAAG,GAAG,CAAxB,GAA4B,GAAlC;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,UAAR,EAAoB,GAApB;AAEA,WAAO,GAAP;AACD,GAZkB,EAanB,IAAI,GAAJ,EAbmB,CAArB,CAFiF,CAkBjF;;AACA,SAAO,GAAG,CAAC,IAAD,EAAO,UAAC,KAAD,EAAa;;;AAC5B,QAAM,CAAC,GAAG,KAAK,CAAC,OAAD,CAAf;AACA,QAAM,UAAU,GAAG,KAAK,CAAC,UAAD,CAAxB;AACA,QAAM,UAAU,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAC,GAAG,MAAM,CAAC,GAAP,CAAW,UAAX,CAAtB,GAA+C,CAAlE;AAEA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,GACU,EAAA,GAAA,EAAA,EAAA,EAAA,CACP,EADO,CAAA,GACF,UADE,EACQ,EAFlB,EAAA;AAID,GATS,CAAV;AAUD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAsD,OAAtD,EAAuE,MAAvE,EAAyF,OAAzF,EAAwG;AAC5G,MAAM,MAAM,GAAG,MAAM,CACnB,IADmB,EAEnB,UAAC,GAAD,EAAM,KAAN,EAAkB;AAChB;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,MAAD,EAAS,UAAC,KAAD,EAAQ,KAAR,EAAa;AAAK,aAAA,KAAG,KAAH,GAAW,KAAK,CAAhB,KAAgB,CAAhB;AAAyB,KAApD,EAAsD,EAAtD,CAAzB;AAEA,QAAI,GAAG,GAAG,GAAG,CAAC,GAAJ,CAAQ,UAAR,IAAsB,GAAG,CAAC,GAAJ,CAAQ,UAAR,CAAtB,GAA4C,CAAtD;AAEA,QAAM,CAAC,GAAG,KAAK,CAAC,OAAD,CAAf;AAEA,IAAA,GAAG,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,GAAG,GAAG,CAAxB,GAA4B,GAAlC;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,UAAR,EAAoB,GAApB;AAEA,WAAO,GAAP;AACD,GAdkB,EAenB,IAAI,GAAJ,EAfmB,CAArB,CAD4G,CAmB5G;;AACA,SAAO,GAAG,CAAC,IAAD,EAAO,UAAC,KAAD,EAAa;;;AAC5B,QAAM,CAAC,GAAG,KAAK,CAAC,OAAD,CAAf,CAD4B,CAE5B;;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,MAAD,EAAS,UAAC,KAAD,EAAQ,KAAR,EAAa;AAAK,aAAA,KAAG,KAAH,GAAW,KAAK,CAAhB,KAAgB,CAAhB;AAAyB,KAApD,EAAsD,EAAtD,CAAzB;AAEA,QAAM,UAAU,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAC,GAAG,MAAM,CAAC,GAAP,CAAW,UAAX,CAAtB,GAA+C,CAAlE;AAEA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,GACU,EAAA,GAAA,EAAA,EAAA,EAAA,CACP,OADO,CAAA,GACG,UADH,EACa,EAFvB,EAAA;AAID,GAXS,CAAV;AAYD;AAED;;;AAGG;;AACH,OAAM,SAAU,uBAAV,CACJ,IADI,EAEJ,MAFI,EAGJ,UAHI,EAIJ,OAJI,EAKJ,SALI,EAKe;AAEnB,SAAO,CAAC,SAAD,GAAa,IAAb,GAAoB,OAAO,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,OAA3B,CAAlC;AACD","sourcesContent":["import { map, reduce } from '@antv/util';\nimport { Data, Datum } from '../../types';\nimport { isRealNumber } from '../number';\n\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data: Data, measure: string, groupField: string, as: string) {\n  // 1. 先计算每一个分组的 max 值\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      const groupValue = datum[groupField];\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    const groupValue = datum[groupField];\n    const percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [as]: percentage,\n    };\n  });\n}\n\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\nexport function getDeepPercent(data: Record<string, any>[], measure: string, fields: string[], percent: string) {\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      // 获取分组得到的枚举key值\n      const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    // 获取分组得到的枚举key值\n    const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n    const percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [percent]: percentage,\n    };\n  });\n}\n\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\nexport function getDataWhetherPecentage(\n  data: Record<string, any>[],\n  yField: string,\n  groupField: string,\n  asField: string,\n  isPercent?: boolean\n) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}