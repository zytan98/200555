{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { AST_TOKEN_TYPES, createEntity, DefineValuePlaceholder, IDENTIFIER, STORAGE_CLASS, Target } from '@antv/g-webgpu-core'; // tslint:disable-next-line:no-submodule-imports\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\nexport var Kernel = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ConfigService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function Kernel() {\n    _classCallCheck(this, Kernel);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    this.entity = createEntity();\n    this.model = void 0;\n    this.dirty = true;\n    this.compiledBundle = void 0;\n    this.initPromise = void 0;\n  }\n\n  _createClass(Kernel, [{\n    key: \"init\",\n    value: function init() {\n      var _this$configService$g = this.configService.get(),\n          canvas = _this$configService$g.canvas,\n          engineOptions = _this$configService$g.engineOptions;\n\n      this.initPromise = this.engine.init(_objectSpread({\n        canvas: canvas || createCanvas(),\n        swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        antialiasing: false\n      }, engineOptions));\n    }\n  }, {\n    key: \"setBundle\",\n    value: function setBundle(bundle) {\n      // deep clone\n      this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n    }\n  }, {\n    key: \"setDispatch\",\n    value: function setDispatch(dispatch) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.dispatch = dispatch;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setMaxIteration\",\n    value: function setMaxIteration(maxIteration) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.maxIteration = maxIteration;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setBinding\",\n    value: function setBinding(name, data) {\n      var _this = this;\n\n      if (typeof name === 'string') {\n        var isNumberLikeData = isNumber(data) || isTypedArray(data) || isArray(data);\n\n        if (this.compiledBundle && this.compiledBundle.context) {\n          // set define, eg. setBinding('MAX_LENGTH', 10)\n          var existedDefine = this.compiledBundle.context.defines.find(function (b) {\n            return b.name === name;\n          });\n\n          if (existedDefine) {\n            existedDefine.value = data;\n            return this;\n          } // set uniform\n\n\n          var existedBinding = this.compiledBundle.context.uniforms.find(function (b) {\n            return b.name === name;\n          });\n\n          if (existedBinding) {\n            // update uniform or buffer\n            if (isNumberLikeData) {\n              // @ts-ignore\n              existedBinding.data = data;\n              existedBinding.isReferer = false;\n\n              if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateUniform(name, data);\n                }\n              } else {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateBuffer(name, data);\n                }\n              }\n            } else {\n              // update with another kernel\n              existedBinding.isReferer = true; // @ts-ignore\n\n              existedBinding.data = data;\n            }\n          }\n        }\n      } else {\n        Object.keys(name).forEach(function (key) {\n          _this.setBinding(key, name[key]);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var iteration,\n            i,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                iteration = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n\n                if (!this.dirty) {\n                  _context.next = 6;\n                  break;\n                }\n\n                if (this.compiledBundle.context) {\n                  if (iteration > 1) {\n                    this.compiledBundle.context.maxIteration = iteration;\n                  } else {\n                    this.compiledBundle.context.maxIteration++;\n                  }\n                }\n\n                _context.next = 5;\n                return this.compile();\n\n              case 5:\n                this.dirty = false;\n\n              case 6:\n                this.engine.beginFrame(); // 首先开启当前 frame 的 compute pass\n\n                this.engine.clear({});\n\n                if (this.compiledBundle.context) {\n                  this.compiledBundle.context.uniforms.filter(function (_ref) {\n                    var isReferer = _ref.isReferer;\n                    return isReferer;\n                  }).forEach(function (_ref2) {\n                    var data = _ref2.data,\n                        name = _ref2.name; // @ts-ignore\n\n                    _this2.model.confirmInput(data.model, name);\n                  });\n                }\n\n                for (i = 0; i < iteration; i++) {\n                  this.model.run();\n                }\n\n                this.engine.endFrame();\n                return _context.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n    /**\n     * read output from GPUBuffer\n     */\n\n  }, {\n    key: \"getOutput\",\n    value: function () {\n      var _getOutput = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.model.readData());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getOutput() {\n        return _getOutput.apply(this, arguments);\n      }\n\n      return getOutput;\n    }()\n  }, {\n    key: \"compile\",\n    value: function () {\n      var _compile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var context, target, shader;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.initPromise;\n\n              case 2:\n                context = _objectSpread({}, this.compiledBundle.context);\n                target = this.engine.supportWebGPU ? this.engine.useWGSL ? Target.WGSL : Target.GLSL450 : Target.GLSL100;\n                shader = this.compiledBundle.shaders[target]; // this.bindings?.forEach(({ name, data }) => {\n                //   if (name === name.toUpperCase()) {\n                //     const define = context.defines.find((d) => d.name === name);\n                //     if (define) {\n                //       // @ts-ignore\n                //       define.value = data;\n                //     }\n                //   }\n                // });\n                // 生成运行时 define\n\n                context.defines.filter(function (define) {\n                  return define.runtime;\n                }).forEach(function (define) {\n                  var valuePlaceHolder = \"\".concat(DefineValuePlaceholder).concat(define.name);\n                  shader = shader.replace(valuePlaceHolder, \"\".concat(define.value));\n                });\n                context.shader = shader; // 添加 uniform 绑定的数据\n\n                context.uniforms.forEach(function (uniform) {\n                  // const binding = this.bindings.find((b) => b.name === uniform.name);\n                  // if (binding) {\n                  //   // @ts-ignore\n                  //   uniform.data = binding.referer || binding.data;\n                  //   // @ts-ignore\n                  //   uniform.isReferer = !!binding.referer;\n                  // }\n                  // 未指定数据，尝试根据 uniform 类型初始化\n                  if (!uniform.data) {\n                    if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n                      var sizePerElement = 1;\n\n                      if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n                        sizePerElement = 1;\n                      } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n                        sizePerElement = 4;\n                      }\n\n                      uniform.data = new Float32Array(context.output.length * sizePerElement).fill(0);\n                    }\n                  }\n                }); // } else if (uniform.type === 'image2D') {\n                //   // @ts-ignore\n                //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n                // }\n\n                this.compiledBundle.context = context;\n                _context3.next = 11;\n                return this.engine.createComputeModel(this.compiledBundle.context);\n\n              case 11:\n                this.model = _context3.sent;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function compile() {\n        return _compile.apply(this, arguments);\n      }\n\n      return compile;\n    }()\n  }]);\n\n  return Kernel;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../src/Kernel.ts"],"names":["injectable","Kernel","inject","IDENTIFIER","createEntity","canvas","engineOptions","createCanvas","swapChainFormat","WebGPUConstants","antialiasing","JSON","isNumberLikeData","isNumber","isTypedArray","isArray","existedDefine","b","existedBinding","STORAGE_CLASS","Object","name","iteration","isReferer","data","i","context","target","Target","shader","define","valuePlaceHolder","uniform","sizePerElement","AST_TOKEN_TYPES"],"mappings":"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","sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DefineValuePlaceholder,\n  IComputeModel,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  KernelBundle,\n  STORAGE_CLASS,\n  Target,\n} from '@antv/g-webgpu-core';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\n\n@injectable()\nexport class Kernel {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private entity = createEntity();\n\n  private model: IComputeModel;\n\n  private dirty: boolean = true;\n\n  private compiledBundle: KernelBundle;\n\n  private initPromise: Promise<void>;\n\n  public init() {\n    const { canvas, engineOptions } = this.configService.get();\n\n    this.initPromise = this.engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n  }\n\n  public setBundle(bundle: KernelBundle) {\n    // deep clone\n    this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n  }\n\n  public setDispatch(dispatch: [number, number, number]) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.dispatch = dispatch;\n    }\n    return this;\n  }\n\n  public setMaxIteration(maxIteration: number) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.maxIteration = maxIteration;\n    }\n    return this;\n  }\n\n  public setBinding(\n    name:\n      | string\n      | Record<\n          string,\n          | number\n          | number[]\n          | Float32Array\n          | Uint8Array\n          | Uint16Array\n          | Uint32Array\n          | Int8Array\n          | Int16Array\n          | Int32Array\n          | Kernel\n        >,\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Kernel,\n  ) {\n    if (typeof name === 'string') {\n      const isNumberLikeData =\n        isNumber(data) || isTypedArray(data) || isArray(data);\n      if (this.compiledBundle && this.compiledBundle.context) {\n        // set define, eg. setBinding('MAX_LENGTH', 10)\n        const existedDefine = this.compiledBundle.context.defines.find(\n          (b) => b.name === name,\n        );\n        if (existedDefine) {\n          existedDefine.value = data as number;\n          return this;\n        }\n\n        // set uniform\n        const existedBinding = this.compiledBundle.context.uniforms.find(\n          (b) => b.name === name,\n        );\n        if (existedBinding) {\n          // update uniform or buffer\n          if (isNumberLikeData) {\n            // @ts-ignore\n            existedBinding.data = data;\n            existedBinding.isReferer = false;\n\n            if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateUniform(name, data);\n              }\n            } else {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateBuffer(name, data);\n              }\n            }\n          } else {\n            // update with another kernel\n            existedBinding.isReferer = true;\n            // @ts-ignore\n            existedBinding.data = data as Kernel;\n          }\n        }\n      }\n    } else {\n      Object.keys(name).forEach((key) => {\n        this.setBinding(key, name[key]);\n      });\n    }\n    return this;\n  }\n\n  public async execute(iteration: number = 1) {\n    if (this.dirty) {\n      if (this.compiledBundle.context) {\n        if (iteration > 1) {\n          this.compiledBundle.context.maxIteration = iteration;\n        } else {\n          this.compiledBundle.context.maxIteration++;\n        }\n      }\n      await this.compile();\n      this.dirty = false;\n    }\n\n    this.engine.beginFrame();\n\n    // 首先开启当前 frame 的 compute pass\n    this.engine.clear({});\n\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.uniforms\n        .filter(({ isReferer }) => isReferer)\n        .forEach(({ data, name }) => {\n          // @ts-ignore\n          this.model.confirmInput((data as Kernel).model, name);\n        });\n    }\n    for (let i = 0; i < iteration; i++) {\n      this.model.run();\n    }\n\n    this.engine.endFrame();\n    return this;\n  }\n\n  /**\n   * read output from GPUBuffer\n   */\n  public async getOutput() {\n    return this.model.readData();\n  }\n\n  private async compile() {\n    await this.initPromise;\n\n    const context = {\n      ...this.compiledBundle.context!,\n    };\n\n    const target = this.engine.supportWebGPU\n      ? this.engine.useWGSL\n        ? Target.WGSL\n        : Target.GLSL450\n      : Target.GLSL100;\n    let shader = this.compiledBundle.shaders[target];\n\n    // this.bindings?.forEach(({ name, data }) => {\n    //   if (name === name.toUpperCase()) {\n    //     const define = context.defines.find((d) => d.name === name);\n    //     if (define) {\n    //       // @ts-ignore\n    //       define.value = data;\n    //     }\n    //   }\n    // });\n\n    // 生成运行时 define\n    context.defines\n      .filter((define) => define.runtime)\n      .forEach((define) => {\n        const valuePlaceHolder = `${DefineValuePlaceholder}${define.name}`;\n        shader = shader.replace(valuePlaceHolder, `${define.value}`);\n      });\n\n    context.shader = shader;\n\n    // 添加 uniform 绑定的数据\n    context.uniforms.forEach((uniform) => {\n      // const binding = this.bindings.find((b) => b.name === uniform.name);\n      // if (binding) {\n      //   // @ts-ignore\n      //   uniform.data = binding.referer || binding.data;\n      //   // @ts-ignore\n      //   uniform.isReferer = !!binding.referer;\n      // }\n\n      // 未指定数据，尝试根据 uniform 类型初始化\n      if (!uniform.data) {\n        if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n          let sizePerElement = 1;\n          if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n            sizePerElement = 1;\n          } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n            sizePerElement = 4;\n          }\n          uniform.data = new Float32Array(\n            context.output.length! * sizePerElement,\n          ).fill(0);\n        }\n      }\n    });\n    // } else if (uniform.type === 'image2D') {\n    //   // @ts-ignore\n    //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n    // }\n\n    this.compiledBundle.context = context;\n    this.model = await this.engine.createComputeModel(\n      this.compiledBundle.context,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}