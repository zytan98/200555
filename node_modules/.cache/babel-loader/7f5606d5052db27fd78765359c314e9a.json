{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n  }\n}, 'single-node');","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-core/es/element/nodes/simple-rect.js"],"names":["__assign","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","anchorPoints","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","defaultStyle","getOptions","strokeStyle","color","getSize","width","height","styles","x","y","update","item","getContainer","get","attr","updateShape"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}