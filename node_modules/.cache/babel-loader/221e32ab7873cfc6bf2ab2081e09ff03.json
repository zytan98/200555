{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { pick, deepAssign } from '../../utils';\n/**\n *\n * @param params 分面图 参数\n * @returns facet eachView 的回调设置每个 view 的展示\n */\n\nexport function execViewAdaptor(viewOfG2, options) {\n  var data = options.data,\n      coordinate = options.coordinate,\n      interactions = options.interactions,\n      annotations = options.annotations,\n      animation = options.animation,\n      tooltip = options.tooltip,\n      axes = options.axes,\n      meta = options.meta,\n      geometries = options.geometries; // 1. data, optional\n\n  if (data) {\n    viewOfG2.data(data);\n  } // 2. meta 配置\n\n\n  var scales = {};\n\n  if (axes) {\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n\n  scales = deepAssign({}, meta, scales);\n  viewOfG2.scale(scales); // 3. coordinate 配置 (默认由顶层决定)\n\n  if (coordinate) {\n    viewOfG2.coordinate(coordinate);\n  } // 4. axis 轴配置 (默认由顶层决定，但可以通过 false 强制关闭)\n\n\n  if (axes === false) {\n    viewOfG2.axis(false);\n  } else {\n    each(axes, function (axis, field) {\n      viewOfG2.axis(field, axis);\n    });\n  }\n\n  each(geometries, function (geometry) {\n    // Geometry\n    var ext = geometryAdaptor({\n      chart: viewOfG2,\n      options: geometry\n    }).ext; // Geometry adjust\n\n    var adjust = geometry.adjust;\n\n    if (adjust) {\n      ext.geometry.adjust(adjust);\n    }\n  }); // 5. interactions\n\n  each(interactions, function (interaction) {\n    if (interaction.enable === false) {\n      viewOfG2.removeInteraction(interaction.type);\n    } else {\n      viewOfG2.interaction(interaction.type, interaction.cfg);\n    }\n  }); // 6. annotations\n\n  each(annotations, function (annotation) {\n    viewOfG2.annotation()[annotation.type](__assign({}, annotation));\n  }); // 7. animation (先做动画)\n\n  if (typeof animation === 'boolean') {\n    viewOfG2.animate(false);\n  } else {\n    viewOfG2.animate(true); // 所有的 Geometry 都使用同一动画（各个图形如有区别，todo 自行覆盖）\n\n    each(viewOfG2.geometries, function (g) {\n      g.animate(animation);\n    });\n  }\n\n  if (tooltip) {\n    // 8. tooltip\n    viewOfG2.interaction('tooltip');\n    viewOfG2.tooltip(tooltip);\n  } else if (tooltip === false) {\n    viewOfG2.removeInteraction('tooltip');\n  }\n}","map":{"version":3,"sources":["../../../src/plots/facet/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry, View } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { pick, deepAssign } from '../../utils';\nimport { Axis, Interaction } from '../../types';\nimport { IView } from './types';\n\n/**\n *\n * @param params 分面图 参数\n * @returns facet eachView 的回调设置每个 view 的展示\n */\nexport function execViewAdaptor(viewOfG2: View, options: IView): void {\n  const { data, coordinate, interactions, annotations, animation, tooltip, axes, meta, geometries } = options;\n\n  // 1. data, optional\n  if (data) {\n    viewOfG2.data(data);\n  }\n\n  // 2. meta 配置\n  let scales: Record<string, any> = {};\n  if (axes) {\n    each(axes, (axis: Axis, field: string) => {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n\n  scales = deepAssign({}, meta, scales);\n  viewOfG2.scale(scales);\n\n  // 3. coordinate 配置 (默认由顶层决定)\n  if (coordinate) {\n    viewOfG2.coordinate(coordinate);\n  }\n\n  // 4. axis 轴配置 (默认由顶层决定，但可以通过 false 强制关闭)\n  if (axes === false) {\n    viewOfG2.axis(false);\n  } else {\n    each(axes, (axis: Axis, field: string) => {\n      viewOfG2.axis(field, axis);\n    });\n  }\n\n  each(geometries, (geometry) => {\n    // Geometry\n    const { ext } = geometryAdaptor({\n      chart: viewOfG2,\n      options: geometry,\n    });\n\n    // Geometry adjust\n    const { adjust } = geometry;\n    if (adjust) {\n      ext.geometry.adjust(adjust);\n    }\n  });\n\n  // 5. interactions\n  each(interactions, (interaction: Interaction) => {\n    if (interaction.enable === false) {\n      viewOfG2.removeInteraction(interaction.type);\n    } else {\n      viewOfG2.interaction(interaction.type, interaction.cfg);\n    }\n  });\n  // 6. annotations\n  each(annotations, (annotation) => {\n    viewOfG2.annotation()[annotation.type]({\n      ...annotation,\n    });\n  });\n\n  // 7. animation (先做动画)\n  if (typeof animation === 'boolean') {\n    viewOfG2.animate(false);\n  } else {\n    viewOfG2.animate(true);\n    // 所有的 Geometry 都使用同一动画（各个图形如有区别，todo 自行覆盖）\n    each(viewOfG2.geometries, (g: Geometry) => {\n      g.animate(animation);\n    });\n  }\n\n  if (tooltip) {\n    // 8. tooltip\n    viewOfG2.interaction('tooltip');\n    viewOfG2.tooltip(tooltip);\n  } else if (tooltip === false) {\n    viewOfG2.removeInteraction('tooltip');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}