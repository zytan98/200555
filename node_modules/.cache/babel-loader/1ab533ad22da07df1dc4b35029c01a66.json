{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { flow, deepAssign, findGeometry, transformLabel } from '../../utils';\nimport { interval, point } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { processIllegalData } from '../../utils';\nimport { getScaleMax, getStackedData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var style = options.barStyle,\n      color = options.color,\n      tooltip = options.tooltip,\n      colorField = options.colorField,\n      type = options.type,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data; // 处理不合法的数据\n\n  var processData = processIllegalData(data, yField);\n  chart.data(processData);\n  var p = deepAssign({}, params, {\n    options: {\n      tooltip: tooltip,\n      seriesField: colorField,\n      interval: {\n        style: style,\n        color: color,\n        shape: type === 'line' ? 'line' : 'intervel'\n      },\n      // 柱子的一些样式设置：柱子最小宽度、柱子最大宽度、柱子背景\n      minColumnWidth: options.minBarWidth,\n      maxColumnWidth: options.maxBarWidth,\n      columnBackground: options.barBackground\n    }\n  });\n  interval(p);\n\n  if (type === 'line') {\n    point({\n      chart: chart,\n      options: {\n        xField: xField,\n        yField: yField,\n        seriesField: colorField,\n        point: {\n          shape: 'circle',\n          color: color\n        }\n      }\n    });\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var yField = options.yField,\n      xField = options.xField,\n      data = options.data,\n      isStack = options.isStack,\n      isGroup = options.isGroup,\n      colorField = options.colorField,\n      maxAngle = options.maxAngle;\n  var actualData = isStack && !isGroup && colorField ? getStackedData(data, xField, yField) : data;\n  var processData = processIllegalData(actualData, yField);\n  return flow(scale((_a = {}, _a[yField] = {\n    min: 0,\n    max: getScaleMax(maxAngle, yField, processData)\n  }, _a)))(params);\n}\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle;\n  chart.coordinate({\n    type: 'polar',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    }\n  }).transpose();\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nexport function axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      xAxis = options.xAxis;\n  chart.axis(xField, xAxis);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var intervalGeometry = findGeometry(chart, 'interval'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    intervalGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    intervalGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign(__assign({}, transformLabel(cfg)), {\n        type: 'polar'\n      })\n    });\n  }\n\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(pattern('barStyle'), geometry, meta, axis, coordinate, interaction, animation, theme, tooltip, legend, annotation(), label)(params);\n}","map":{"version":3,"sources":["../../../src/plots/radial-bar/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, findGeometry, transformLabel } from '../../utils';\nimport { interval, point } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { processIllegalData } from '../../utils';\nimport { RadialBarOptions } from './types';\nimport { getScaleMax, getStackedData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { barStyle: style, color, tooltip, colorField, type, xField, yField, data } = options;\n\n  // 处理不合法的数据\n  const processData = processIllegalData(data, yField);\n  chart.data(processData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      tooltip,\n      seriesField: colorField,\n      interval: {\n        style,\n        color,\n        shape: type === 'line' ? 'line' : 'intervel',\n      },\n      // 柱子的一些样式设置：柱子最小宽度、柱子最大宽度、柱子背景\n      minColumnWidth: options.minBarWidth,\n      maxColumnWidth: options.maxBarWidth,\n      columnBackground: options.barBackground,\n    },\n  });\n  interval(p);\n  if (type === 'line') {\n    point({\n      chart,\n      options: { xField, yField, seriesField: colorField, point: { shape: 'circle', color } },\n    });\n  }\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { options } = params;\n  const { yField, xField, data, isStack, isGroup, colorField, maxAngle } = options;\n\n  const actualData = isStack && !isGroup && colorField ? getStackedData(data, xField, yField) : data;\n  const processData = processIllegalData(actualData, yField);\n  return flow(\n    scale({\n      [yField]: {\n        min: 0,\n        max: getScaleMax(maxAngle, yField, processData),\n      },\n    })\n  )(params);\n}\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { radius, innerRadius, startAngle, endAngle } = options;\n\n  chart\n    .coordinate({\n      type: 'polar',\n      cfg: {\n        radius,\n        innerRadius,\n        startAngle,\n        endAngle,\n      },\n    })\n    .transpose();\n  return params;\n}\n\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { xField, xAxis } = options;\n  chart.axis(xField, xAxis);\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const intervalGeometry = findGeometry(chart, 'interval');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    intervalGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    intervalGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        ...transformLabel(cfg),\n        type: 'polar',\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RadialBarOptions>) {\n  return flow(\n    pattern('barStyle'),\n    geometry,\n    meta,\n    axis,\n    coordinate,\n    interaction,\n    animation,\n    theme,\n    tooltip,\n    legend,\n    annotation(),\n    label\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}