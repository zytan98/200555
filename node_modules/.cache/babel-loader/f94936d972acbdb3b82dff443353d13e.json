{"ast":null,"code":"/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\nexport default class QuadTree {\n  // each quadtree represents a quadrant and an aggregate body\n  // that represents all bodies inside the quadrant\n  constructor(param) {\n    /**\n     * (aggregated) body in this quad\n     * @type  {object}\n     */\n    this.body = null;\n    /**\n     * tree representing the northwest quadrant\n     * @type  {object}\n     */\n\n    this.quad = null;\n    this.NW = null;\n    this.NE = null;\n    this.SW = null;\n    this.SE = null;\n    /**\n     * threshold\n     * @type  {number}\n     */\n\n    this.theta = 0.5;\n    if (param != null) this.quad = param;\n  } // insert a body(node) into the tree\n\n\n  insert(bo) {\n    // if this node does not contain a body, put the new body bo here\n    if (this.body == null) {\n      this.body = bo;\n      return;\n    } // internal node\n\n\n    if (!this._isExternal()) {\n      // update mass info\n      this.body = this.body.add(bo); // insert body into quadrant\n\n      this._putBody(bo);\n    } else {\n      // external node\n      // divide this region into four children\n      if (this.quad) {\n        this.NW = new QuadTree(this.quad.NW());\n        this.NE = new QuadTree(this.quad.NE());\n        this.SW = new QuadTree(this.quad.SW());\n        this.SE = new QuadTree(this.quad.SE());\n      } // insert this body and bo\n\n\n      this._putBody(this.body);\n\n      this._putBody(bo); // update the mass info\n\n\n      this.body = this.body.add(bo);\n    }\n  } // inserts bo into a quad\n  // tslint:disable-next-line\n\n\n  _putBody(bo) {\n    if (!this.quad) return;\n    if (bo.in(this.quad.NW()) && this.NW) this.NW.insert(bo);else if (bo.in(this.quad.NE()) && this.NE) this.NE.insert(bo);else if (bo.in(this.quad.SW()) && this.SW) this.SW.insert(bo);else if (bo.in(this.quad.SE()) && this.SE) this.SE.insert(bo);\n  } // tslint:disable-next-line\n\n\n  _isExternal() {\n    // four children are null\n    return this.NW == null && this.NE == null && this.SW == null && this.SE == null;\n  } // update the forces\n\n\n  updateForce(bo) {\n    if (this.body == null || bo === this.body) {\n      return;\n    } // if the current node is external\n\n\n    if (this._isExternal()) bo.addForce(this.body); // internal nodes\n    else {\n      const s = this.quad ? this.quad.getLength() : 0;\n      const d = this.body.distanceTo(bo); // b is far enough\n\n      if (s / d < this.theta) bo.addForce(this.body);else {\n        this.NW && this.NW.updateForce(bo);\n        this.NE && this.NE.updateForce(bo);\n        this.SW && this.SW.updateForce(bo);\n        this.SE && this.SE.updateForce(bo);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/layout/forceAtlas2/quadTree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\nexport default class QuadTree {\n    // each quadtree represents a quadrant and an aggregate body\n    // that represents all bodies inside the quadrant\n    constructor(param) {\n        /**\n         * (aggregated) body in this quad\n         * @type  {object}\n         */\n        this.body = null;\n        /**\n         * tree representing the northwest quadrant\n         * @type  {object}\n         */\n        this.quad = null;\n        this.NW = null;\n        this.NE = null;\n        this.SW = null;\n        this.SE = null;\n        /**\n         * threshold\n         * @type  {number}\n         */\n        this.theta = 0.5;\n        if (param != null)\n            this.quad = param;\n    }\n    // insert a body(node) into the tree\n    insert(bo) {\n        // if this node does not contain a body, put the new body bo here\n        if (this.body == null) {\n            this.body = bo;\n            return;\n        }\n        // internal node\n        if (!this._isExternal()) {\n            // update mass info\n            this.body = this.body.add(bo);\n            // insert body into quadrant\n            this._putBody(bo);\n        }\n        else { // external node\n            // divide this region into four children\n            if (this.quad) {\n                this.NW = new QuadTree(this.quad.NW());\n                this.NE = new QuadTree(this.quad.NE());\n                this.SW = new QuadTree(this.quad.SW());\n                this.SE = new QuadTree(this.quad.SE());\n            }\n            // insert this body and bo\n            this._putBody(this.body);\n            this._putBody(bo);\n            // update the mass info\n            this.body = this.body.add(bo);\n        }\n    }\n    // inserts bo into a quad\n    // tslint:disable-next-line\n    _putBody(bo) {\n        if (!this.quad)\n            return;\n        if (bo.in(this.quad.NW()) && this.NW)\n            this.NW.insert(bo);\n        else if (bo.in(this.quad.NE()) && this.NE)\n            this.NE.insert(bo);\n        else if (bo.in(this.quad.SW()) && this.SW)\n            this.SW.insert(bo);\n        else if (bo.in(this.quad.SE()) && this.SE)\n            this.SE.insert(bo);\n    }\n    // tslint:disable-next-line\n    _isExternal() {\n        // four children are null\n        return (this.NW == null && this.NE == null && this.SW == null && this.SE == null);\n    }\n    // update the forces\n    updateForce(bo) {\n        if (this.body == null || bo === this.body) {\n            return;\n        }\n        // if the current node is external\n        if (this._isExternal())\n            bo.addForce(this.body);\n        // internal nodes\n        else {\n            const s = this.quad ? this.quad.getLength() : 0;\n            const d = this.body.distanceTo(bo);\n            // b is far enough\n            if ((s / d) < this.theta)\n                bo.addForce(this.body);\n            else {\n                this.NW && this.NW.updateForce(bo);\n                this.NE && this.NE.updateForce(bo);\n                this.SW && this.SW.updateForce(bo);\n                this.SE && this.SE.updateForce(bo);\n            }\n        }\n    }\n}\n//# sourceMappingURL=quadTree.js.map"]},"metadata":{},"sourceType":"module"}