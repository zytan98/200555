{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { isFunction, get } from '@antv/util';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { transform } from './utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\n/**\n * geometry 配置处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var colorField = options.colorField,\n      color = options.color;\n  var data = transform(params);\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && __spreadArrays(get(options, 'rawFields', []), ['datum']),\n      point: {\n        color: color,\n        shape: 'word-cloud'\n      }\n    }\n  });\n  var ext = point(p).ext;\n  ext.geometry.label(false);\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  return flow(scale({\n    x: {\n      nice: false\n    },\n    y: {\n      nice: false\n    }\n  }))(params);\n}\n/**\n * 词云图 legend 配置\n * @param params\n */\n\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n\n  return params;\n}\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}","map":{"version":3,"sources":["../../../src/plots/word-cloud/adaptor.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,GAArB,QAAgC,YAAhC;AAEA,SAAS,OAAT,EAAkB,WAAlB,EAA+B,SAA/B,EAA0C,KAA1C,EAAiD,KAAjD,EAAwD,KAAxD,QAAqE,sBAArE;AACA,SAAS,IAAT,EAAe,UAAf,QAAiC,aAAjC;AACA,SAAS,KAAT,QAAsB,0BAAtB;AAEA,SAAS,SAAT,QAA0B,SAA1B;AACA,SAAS,sBAAT,QAAuC,YAAvC;AAEA;;;AAGG;;AACH,SAAS,QAAT,CAAkB,MAAlB,EAAkD;AACxC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,UAAU,GAAY,OAAO,CAAnB,UAAV;AAAA,MAAY,KAAK,GAAK,OAAO,CAAZ,KAAjB;AACR,MAAM,IAAI,GAAG,SAAS,CAAC,MAAD,CAAtB;AAEA,EAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AAEA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,GADD;AAEP,MAAA,MAAM,EAAE,GAFD;AAGP,MAAA,WAAW,EAAE,UAAU,IAAI,sBAHpB;AAIP,MAAA,SAAS,EAAE,UAAU,CAAC,KAAD,CAAV,IAAiB,cAAA,CAAQ,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,EAAvB,CAAX,EAAqC,CAAE,OAAF,CAArC,CAJrB;AAKP,MAAA,KAAK,EAAE;AACL,QAAA,KAAK,EAAA,KADA;AAEL,QAAA,KAAK,EAAE;AAFF;AALA;AADsB,GAAb,CAApB;AAaQ,MAAA,GAAG,GAAK,KAAK,CAAC,CAAD,CAAL,CAAL,GAAH;AACR,EAAA,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAmB,KAAnB;AAEA,EAAA,KAAK,CAAC,UAAN,GAAmB,OAAnB,CAA2B,GAA3B;AACA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AAEA,SAAO,MAAP;AACD;AAED;;;AAGG;;;AACH,SAAS,IAAT,CAAc,MAAd,EAA8C;AAC5C,SAAO,IAAI,CACT,KAAK,CAAC;AACJ,IAAA,CAAC,EAAE;AAAE,MAAA,IAAI,EAAE;AAAR,KADC;AAEJ,IAAA,CAAC,EAAE;AAAE,MAAA,IAAI,EAAE;AAAR;AAFC,GAAD,CADI,CAAJ,CAKL,MALK,CAAP;AAMD;AAED;;;AAGG;;;AACH,OAAM,SAAU,MAAV,CAAiB,MAAjB,EAAiD;AAC7C,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,MAAM,GAAiB,OAAO,CAAxB,MAAN;AAAA,MAAQ,UAAU,GAAK,OAAO,CAAZ,UAAlB;;AAER,MAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,IAAA,KAAK,CAAC,MAAN,CAAa,KAAb;AACD,GAFD,MAEO,IAAI,UAAJ,EAAgB;AACrB,IAAA,KAAK,CAAC,MAAN,CAAa,sBAAb,EAAqC,MAArC;AACD;;AAED,SAAO,MAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAkD;AACtD;AACA,EAAA,IAAI,CAAC,QAAD,EAAW,IAAX,EAAiB,OAAjB,EAA0B,MAA1B,EAAkC,WAAlC,EAA+C,SAA/C,EAA0D,KAA1D,EAAiE,KAAjE,CAAJ,CAA4E,MAA5E;AACD","sourcesContent":["import { isFunction, get } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { WordCloudOptions } from './types';\nimport { transform } from './utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\n\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { colorField, color } = options;\n  const data = transform(params);\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && [...get(options, 'rawFields', []), 'datum'],\n      point: {\n        color,\n        shape: 'word-cloud',\n      },\n    },\n  });\n\n  const { ext } = point(p);\n  ext.geometry.label(false);\n\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  return flow(\n    scale({\n      x: { nice: false },\n      y: { nice: false },\n    })\n  )(params);\n}\n\n/**\n * 词云图 legend 配置\n * @param params\n */\nexport function legend(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { legend, colorField } = options;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n\n  return params;\n}\n\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<WordCloudOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}