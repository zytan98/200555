{"ast":null,"code":"import { registerShape, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\n\nregisterShape('interval', 'meter-gauge', {\n  draw: function (cfg, container) {\n    // 使用 customInfo 传递参数\n    var _a = cfg.customInfo.meter,\n        meter = _a === void 0 ? {} : _a;\n    var _b = meter.steps,\n        STEP = _b === void 0 ? 50 : _b,\n        _c = meter.stepRatio,\n        STEP_RATIO = _c === void 0 ? 0.5 : _c;\n    STEP = STEP < 1 ? 1 : STEP; // stepRatio 取值范围: (0, 1]\n\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n    var _d = this.coordinate,\n        COORD_START_ANGLE = _d.startAngle,\n        COORD_END_ANGLE = _d.endAngle;\n    var GAP = 0;\n\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      var TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n\n    var INTERVAL = GAP / (1 - STEP_RATIO) * STEP_RATIO;\n    var group = container.addGroup(); // 绘制图形的时候，留下 gap\n\n    var center = this.coordinate.getCenter();\n    var radius = this.coordinate.getRadius();\n\n    var _e = Util.getAngle(cfg, this.coordinate),\n        START_ANGLE = _e.startAngle,\n        END_ANGLE = _e.endAngle;\n\n    for (var startAngle = START_ANGLE; startAngle < END_ANGLE;) {\n      var endAngle = void 0;\n      var r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n\n      var path = Util.getSectorPath(center.x, center.y, radius, startAngle, Math.min(endAngle, END_ANGLE), radius * this.coordinate.innerRadius);\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path: path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5\n        }\n      });\n      startAngle = endAngle + GAP;\n    }\n\n    return group;\n  }\n});","map":{"version":3,"sources":["../../../../src/plots/gauge/shapes/meter-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerShape, Types, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\nimport { GaugeCustomInfo } from '../types';\n\ntype ShapeCfg = Omit<Types.ShapeInfo, 'customInfo'> & {\n  customInfo: GaugeCustomInfo;\n};\n\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\nregisterShape('interval', 'meter-gauge', {\n  draw(cfg: ShapeCfg, container) {\n    // 使用 customInfo 传递参数\n    const { meter = {} } = cfg.customInfo;\n    let { steps: STEP = 50, stepRatio: STEP_RATIO = 0.5 } = meter;\n    STEP = STEP < 1 ? 1 : STEP;\n    // stepRatio 取值范围: (0, 1]\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n\n    const { startAngle: COORD_START_ANGLE, endAngle: COORD_END_ANGLE } = this.coordinate;\n    let GAP = 0;\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      const TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n    const INTERVAL = (GAP / (1 - STEP_RATIO)) * STEP_RATIO;\n\n    const group = container.addGroup();\n    // 绘制图形的时候，留下 gap\n    const center = this.coordinate.getCenter();\n    const radius = this.coordinate.getRadius();\n    const { startAngle: START_ANGLE, endAngle: END_ANGLE } = Util.getAngle(cfg, this.coordinate);\n\n    for (let startAngle = START_ANGLE; startAngle < END_ANGLE; ) {\n      let endAngle;\n      const r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n      const path = Util.getSectorPath(\n        center.x,\n        center.y,\n        radius,\n        startAngle,\n        Math.min(endAngle, END_ANGLE),\n        radius * this.coordinate.innerRadius\n      );\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5,\n        },\n      });\n      startAngle = endAngle + GAP;\n    }\n\n    return group;\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}