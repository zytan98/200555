{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { createEntity } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nexport var MaterialSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MaterialComponentManager), _dec3 = inject(IDENTIFIER.RenderEngine), _dec4 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MaterialSystem() {\n    _classCallCheck(this, MaterialSystem);\n\n    _initializerDefineProperty(this, \"material\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"shaderModule\", _descriptor3, this);\n  }\n\n  _createClass(MaterialSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.material.clear();\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n     */\n\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var entity = createEntity();\n      var vertexShaderGLSL = params.vertexShader;\n      var fragmentShaderGLSL = params.fragmentShader;\n      var uniforms = [];\n\n      if (!this.engine.supportWebGPU) {\n        var moduleName = \"material-\".concat(entity);\n        this.shaderModule.registerModule(moduleName, {\n          vs: params.vertexShader,\n          fs: params.fragmentShader\n        });\n        var materialModule = this.shaderModule.getModule(moduleName);\n        vertexShaderGLSL = materialModule.vs;\n        fragmentShaderGLSL = materialModule.fs;\n\n        if (materialModule.uniforms) {\n          // @ts-ignore\n          uniforms = Object.keys(materialModule.uniforms).map(function (uniformName) {\n            return {\n              dirty: true,\n              name: uniformName,\n              // @ts-ignore\n              data: materialModule.uniforms[uniformName]\n            };\n          });\n        }\n      }\n\n      return this.material.create(entity, _objectSpread(_objectSpread({\n        vertexShaderGLSL: vertexShaderGLSL,\n        fragmentShaderGLSL: fragmentShaderGLSL\n      }, params), {}, {\n        uniforms: uniforms\n      }));\n    }\n  }]);\n\n  return MaterialSystem;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModule\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../src/components/material/System.ts"],"names":["injectable","MaterialSystem","inject","IDENTIFIER","entity","createEntity","vertexShaderGLSL","params","fragmentShaderGLSL","uniforms","moduleName","vs","fs","fragmentShader","materialModule","dirty","name","data"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, Entity, ISystem, IUniformBinding } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { IShaderModuleService } from '../../services';\nimport { getLengthFromFormat } from '../../utils/shader';\nimport { IModelInitializationOptions } from '../renderer/IModel';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { MaterialComponent } from './MaterialComponent';\n\n@injectable()\nexport class MaterialSystem implements ISystem {\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModule: IShaderModuleService;\n\n  public async execute() {\n    // await Promise.all(\n    //   this.material.map(async (entity, component) => {\n    //     // if (component.dirty) {\n    //     // TODO: 使用 cache 避免同类材质的重复编译\n    //     // component.stageDescriptor = await this.engine.compilePipelineStageDescriptor(\n    //     //   component.vertexShaderGLSL,\n    //     //   component.fragmentShaderGLSL,\n    //     //   null,\n    //     // );\n    //     // this.generateUniforms(component);\n    //     //   component.dirty = false;\n    //     // }\n    //   }),\n    // );\n  }\n\n  public tearDown() {\n    this.material.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n   */\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n    cull?: IModelInitializationOptions['cull'];\n    depth?: IModelInitializationOptions['depth'];\n    blend?: IModelInitializationOptions['blend'];\n  }) {\n    const entity = createEntity();\n\n    let vertexShaderGLSL = params.vertexShader;\n    let fragmentShaderGLSL = params.fragmentShader;\n    let uniforms: IUniformBinding[] = [];\n\n    if (!this.engine.supportWebGPU) {\n      const moduleName = `material-${entity}`;\n      this.shaderModule.registerModule(moduleName, {\n        vs: params.vertexShader,\n        fs: params.fragmentShader,\n      });\n\n      const materialModule = this.shaderModule.getModule(moduleName);\n      vertexShaderGLSL = materialModule.vs!;\n      fragmentShaderGLSL = materialModule.fs!;\n      if (materialModule.uniforms) {\n        // @ts-ignore\n        uniforms = Object.keys(materialModule.uniforms).map((uniformName) => ({\n          dirty: true,\n          name: uniformName,\n          // @ts-ignore\n          data: materialModule.uniforms[uniformName],\n        }));\n      }\n    }\n\n    return this.material.create(entity, {\n      vertexShaderGLSL,\n      fragmentShaderGLSL,\n      ...params,\n      uniforms,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}