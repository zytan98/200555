{"ast":null,"code":"import { nelderMead, bisect, conjugateGradient, zeros, zerosM, norm2, scale } from 'fmin';\nimport { intersectionArea, circleOverlap, circleCircleIntersection, distance } from './circleintersection';\n/** given a list of set objects, and their corresponding overlaps.\nupdates the (x, y, radius) attribute on each set such that their positions\nroughly correspond to the desired overlaps */\n\nexport function venn(areas, parameters) {\n  parameters = parameters || {};\n  parameters.maxIterations = parameters.maxIterations || 500;\n  var initialLayout = parameters.initialLayout || bestInitialLayout;\n  var loss = parameters.lossFunction || lossFunction; // add in missing pairwise areas as having 0 size\n\n  areas = addMissingAreas(areas); // initial layout is done greedily\n\n  var circles = initialLayout(areas, parameters); // transform x/y coordinates to a vector to optimize\n\n  var initial = [],\n      setids = [];\n  var setid;\n\n  for (setid in circles) {\n    // eslint-disable-next-line\n    if (circles.hasOwnProperty(setid)) {\n      initial.push(circles[setid].x);\n      initial.push(circles[setid].y);\n      setids.push(setid);\n    }\n  } // optimize initial layout from our loss function\n\n\n  var solution = nelderMead(function (values) {\n    var current = {};\n\n    for (var i = 0; i < setids.length; ++i) {\n      var setid_1 = setids[i];\n      current[setid_1] = {\n        x: values[2 * i],\n        y: values[2 * i + 1],\n        radius: circles[setid_1].radius\n      };\n    }\n\n    return loss(current, areas);\n  }, initial, parameters); // transform solution vector back to x/y points\n\n  var positions = solution.x;\n\n  for (var i = 0; i < setids.length; ++i) {\n    setid = setids[i];\n    circles[setid].x = positions[2 * i];\n    circles[setid].y = positions[2 * i + 1];\n  }\n\n  return circles;\n}\nvar SMALL = 1e-10;\n/** Returns the distance necessary for two circles of radius r1 + r2 to\nhave the overlap area 'overlap' */\n\nexport function distanceFromIntersectArea(r1, r2, overlap) {\n  // handle complete overlapped circles\n  if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL) {\n    return Math.abs(r1 - r2);\n  }\n\n  return bisect(function (distance) {\n    return circleOverlap(r1, r2, distance) - overlap;\n  }, 0, r1 + r2);\n}\n/** Missing pair-wise intersection area data can cause problems:\n treating as an unknown means that sets will be laid out overlapping,\n which isn't what people expect. To reflect that we want disjoint sets\n here, set the overlap to 0 for all missing pairwise set intersections */\n\nfunction addMissingAreas(areas) {\n  areas = areas.slice(); // two circle intersections that aren't defined\n\n  var ids = [],\n      pairs = {};\n  var i, j, a, b;\n\n  for (i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n\n    if (area.sets.length == 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length == 2) {\n      a = area.sets[0];\n      b = area.sets[1]; // @ts-ignore\n\n      pairs[[a, b]] = true; // @ts-ignore\n\n      pairs[[b, a]] = true;\n    }\n  }\n\n  ids.sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n\n  for (i = 0; i < ids.length; ++i) {\n    a = ids[i];\n\n    for (j = i + 1; j < ids.length; ++j) {\n      b = ids[j]; // @ts-ignore\n\n      if (!([a, b] in pairs)) {\n        areas.push({\n          sets: [a, b],\n          size: 0\n        });\n      }\n    }\n  }\n\n  return areas;\n} /// Returns two matrices, one of the euclidean distances between the sets\n/// and the other indicating if there are subset or disjoint set relationships\n\n\nexport function getDistanceMatrices(areas, sets, setids) {\n  // initialize an empty distance matrix between all the points\n  var distances = zerosM(sets.length, sets.length),\n      constraints = zerosM(sets.length, sets.length); // compute required distances between all the sets such that\n  // the areas match\n\n  areas.filter(function (x) {\n    return x.sets.length == 2;\n  }).map(function (current) {\n    var left = setids[current.sets[0]],\n        right = setids[current.sets[1]],\n        r1 = Math.sqrt(sets[left].size / Math.PI),\n        r2 = Math.sqrt(sets[right].size / Math.PI),\n        distance = distanceFromIntersectArea(r1, r2, current.size);\n    distances[left][right] = distances[right][left] = distance; // also update constraints to indicate if its a subset or disjoint\n    // relationship\n\n    var c = 0;\n\n    if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {\n      c = 1;\n    } else if (current.size <= 1e-10) {\n      c = -1;\n    }\n\n    constraints[left][right] = constraints[right][left] = c;\n  });\n  return {\n    distances: distances,\n    constraints: constraints\n  };\n} /// computes the gradient and loss simulatenously for our constrained MDS optimizer\n\nfunction constrainedMDSGradient(x, fxprime, distances, constraints) {\n  var loss = 0,\n      i;\n\n  for (i = 0; i < fxprime.length; ++i) {\n    fxprime[i] = 0;\n  }\n\n  for (i = 0; i < distances.length; ++i) {\n    var xi = x[2 * i],\n        yi = x[2 * i + 1];\n\n    for (var j = i + 1; j < distances.length; ++j) {\n      var xj = x[2 * j],\n          yj = x[2 * j + 1],\n          dij = distances[i][j],\n          constraint = constraints[i][j];\n      var squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),\n          distance_1 = Math.sqrt(squaredDistance),\n          delta = squaredDistance - dij * dij;\n\n      if (constraint > 0 && distance_1 <= dij || constraint < 0 && distance_1 >= dij) {\n        continue;\n      }\n\n      loss += 2 * delta * delta;\n      fxprime[2 * i] += 4 * delta * (xi - xj);\n      fxprime[2 * i + 1] += 4 * delta * (yi - yj);\n      fxprime[2 * j] += 4 * delta * (xj - xi);\n      fxprime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n\n  return loss;\n} /// takes the best working variant of either constrained MDS or greedy\n\n\nexport function bestInitialLayout(areas, params) {\n  var initial = greedyLayout(areas, params);\n  var loss = params.lossFunction || lossFunction; // greedylayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n\n  if (areas.length >= 8) {\n    var constrained = constrainedMDSLayout(areas, params),\n        constrainedLoss = loss(constrained, areas),\n        greedyLoss = loss(initial, areas);\n\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n\n  return initial;\n} /// use the constrained MDS variant to generate an initial layout\n\nexport function constrainedMDSLayout(areas, params) {\n  params = params || {};\n  var restarts = params.restarts || 10; // bidirectionally map sets to a rowid  (so we can create a matrix)\n\n  var sets = [],\n      setids = {};\n  var i;\n\n  for (i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n\n    if (area.sets.length == 1) {\n      setids[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n\n  var matrices = getDistanceMatrices(areas, sets, setids);\n  var distances = matrices.distances;\n  var constraints = matrices.constraints; // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n\n  var norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map(function (row) {\n    return row.map(function (value) {\n      return value / norm;\n    });\n  });\n\n  var obj = function (x, fxprime) {\n    return constrainedMDSGradient(x, fxprime, distances, constraints);\n  };\n\n  var best, current;\n\n  for (i = 0; i < restarts; ++i) {\n    var initial = zeros(distances.length * 2).map(Math.random);\n    current = conjugateGradient(obj, initial, params);\n\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n\n  var positions = best.x; // translate rows back to (x,y,radius) coordinates\n\n  var circles = {};\n\n  for (i = 0; i < sets.length; ++i) {\n    var set = sets[i];\n    circles[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI)\n    };\n  }\n\n  if (params.history) {\n    for (i = 0; i < params.history.length; ++i) {\n      scale(params.history[i].x, norm);\n    }\n  }\n\n  return circles;\n}\n/** Lays out a Venn diagram greedily, going from most overlapped sets to\nleast overlapped, attempting to position each new set such that the\noverlapping areas to already positioned sets are basically right */\n\nexport function greedyLayout(areas, params) {\n  var loss = params && params.lossFunction ? params.lossFunction : lossFunction; // define a circle for each set\n\n  var circles = {},\n      setOverlaps = {};\n  var set;\n\n  for (var i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n\n    if (area.sets.length == 1) {\n      set = area.sets[0];\n      circles[set] = {\n        x: 1e10,\n        y: 1e10,\n        // rowid: circles.length, // fix to ->\n        rowid: Object.keys(circles).length,\n        size: area.size,\n        radius: Math.sqrt(area.size / Math.PI)\n      };\n      setOverlaps[set] = [];\n    }\n  }\n\n  areas = areas.filter(function (a) {\n    return a.sets.length == 2;\n  }); // map each set to a list of all the other sets that overlap it\n\n  for (var i = 0; i < areas.length; ++i) {\n    var current = areas[i]; // eslint-disable-next-line\n\n    var weight = current.hasOwnProperty('weight') ? current.weight : 1.0;\n    var left = current.sets[0],\n        right = current.sets[1]; // completely overlapped circles shouldn't be positioned early here\n\n    if (current.size + SMALL >= Math.min(circles[left].size, circles[right].size)) {\n      weight = 0;\n    }\n\n    setOverlaps[left].push({\n      set: right,\n      size: current.size,\n      weight: weight\n    });\n    setOverlaps[right].push({\n      set: left,\n      size: current.size,\n      weight: weight\n    });\n  } // get list of most overlapped sets\n\n\n  var mostOverlapped = [];\n\n  for (set in setOverlaps) {\n    // eslint-disable-next-line\n    if (setOverlaps.hasOwnProperty(set)) {\n      var size = 0;\n\n      for (var i = 0; i < setOverlaps[set].length; ++i) {\n        size += setOverlaps[set][i].size * setOverlaps[set][i].weight;\n      }\n\n      mostOverlapped.push({\n        set: set,\n        size: size\n      });\n    }\n  } // sort by size desc\n\n\n  function sortOrder(a, b) {\n    return b.size - a.size;\n  }\n\n  mostOverlapped.sort(sortOrder); // keep track of what sets have been laid out\n\n  var positioned = {};\n\n  function isPositioned(element) {\n    return element.set in positioned;\n  } // adds a point to the output\n\n\n  function positionSet(point, index) {\n    circles[index].x = point.x;\n    circles[index].y = point.y;\n    positioned[index] = true;\n  } // add most overlapped set at (0,0)\n\n\n  positionSet({\n    x: 0,\n    y: 0\n  }, mostOverlapped[0].set); // get distances between all points. TODO, necessary?\n  // answer: probably not\n  // var distances = venn.getDistanceMatrices(circles, areas).distances;\n\n  for (var i = 1; i < mostOverlapped.length; ++i) {\n    var setIndex = mostOverlapped[i].set,\n        overlap = setOverlaps[setIndex].filter(isPositioned);\n    set = circles[setIndex];\n    overlap.sort(sortOrder);\n\n    if (overlap.length === 0) {\n      // this shouldn't happen anymore with addMissingAreas\n      throw 'ERROR: missing pairwise overlap information';\n    }\n\n    var points = [];\n\n    for (var j = 0; j < overlap.length; ++j) {\n      // get appropriate distance from most overlapped already added set\n      var p1 = circles[overlap[j].set],\n          d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size); // sample positions at 90 degrees for maximum aesthetics\n\n      points.push({\n        x: p1.x + d1,\n        y: p1.y\n      });\n      points.push({\n        x: p1.x - d1,\n        y: p1.y\n      });\n      points.push({\n        y: p1.y + d1,\n        x: p1.x\n      });\n      points.push({\n        y: p1.y - d1,\n        x: p1.x\n      }); // if we have at least 2 overlaps, then figure out where the\n      // set should be positioned analytically and try those too\n\n      for (var k = j + 1; k < overlap.length; ++k) {\n        var p2 = circles[overlap[k].set],\n            d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);\n        var extraPoints = circleCircleIntersection({\n          x: p1.x,\n          y: p1.y,\n          radius: d1\n        }, {\n          x: p2.x,\n          y: p2.y,\n          radius: d2\n        });\n\n        for (var l = 0; l < extraPoints.length; ++l) {\n          points.push(extraPoints[l]);\n        }\n      }\n    } // we have some candidate positions for the set, examine loss\n    // at each position to figure out where to put it at\n\n\n    var bestLoss = 1e50,\n        bestPoint = points[0];\n\n    for (var j = 0; j < points.length; ++j) {\n      circles[setIndex].x = points[j].x;\n      circles[setIndex].y = points[j].y;\n      var localLoss = loss(circles, areas);\n\n      if (localLoss < bestLoss) {\n        bestLoss = localLoss;\n        bestPoint = points[j];\n      }\n    }\n\n    positionSet(bestPoint, setIndex);\n  }\n\n  return circles;\n}\n/** Given a bunch of sets, and the desired overlaps between these sets - computes\nthe distance from the actual overlaps to the desired overlaps. Note that\nthis method ignores overlaps of more than 2 circles */\n\nexport function lossFunction(sets, overlaps) {\n  var output = 0;\n\n  function getCircles(indices) {\n    return indices.map(function (i) {\n      return sets[i];\n    });\n  }\n\n  for (var i = 0; i < overlaps.length; ++i) {\n    var area = overlaps[i];\n    var overlap = void 0;\n\n    if (area.sets.length == 1) {\n      continue;\n    } else if (area.sets.length == 2) {\n      var left = sets[area.sets[0]],\n          right = sets[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(getCircles(area.sets));\n    } // eslint-disable-next-line\n\n\n    var weight = area.hasOwnProperty('weight') ? area.weight : 1.0;\n    output += weight * (overlap - area.size) * (overlap - area.size);\n  }\n\n  return output;\n} // orientates a bunch of circles to point in orientation\n\nfunction orientateCircles(circles, orientation, orientationOrder) {\n  if (orientationOrder === null) {\n    circles.sort(function (a, b) {\n      return b.radius - a.radius;\n    });\n  } else {\n    circles.sort(orientationOrder);\n  }\n\n  var i; // shift circles so largest circle is at (0, 0)\n\n  if (circles.length > 0) {\n    var largestX = circles[0].x,\n        largestY = circles[0].y;\n\n    for (i = 0; i < circles.length; ++i) {\n      circles[i].x -= largestX;\n      circles[i].y -= largestY;\n    }\n  }\n\n  if (circles.length == 2) {\n    // if the second circle is a subset of the first, arrange so that\n    // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120\n    var dist = distance(circles[0], circles[1]);\n\n    if (dist < Math.abs(circles[1].radius - circles[0].radius)) {\n      circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;\n      circles[1].y = circles[0].y;\n    }\n  } // rotate circles so that second largest is at an angle of 'orientation'\n  // from largest\n\n\n  if (circles.length > 1) {\n    var rotation = Math.atan2(circles[1].x, circles[1].y) - orientation;\n    var x = void 0,\n        y = void 0;\n    var c = Math.cos(rotation),\n        s = Math.sin(rotation);\n\n    for (i = 0; i < circles.length; ++i) {\n      x = circles[i].x;\n      y = circles[i].y;\n      circles[i].x = c * x - s * y;\n      circles[i].y = s * x + c * y;\n    }\n  } // mirror solution if third solution is above plane specified by\n  // first two circles\n\n\n  if (circles.length > 2) {\n    var angle = Math.atan2(circles[2].x, circles[2].y) - orientation;\n\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n\n    if (angle > Math.PI) {\n      var slope = circles[1].y / (1e-10 + circles[1].x);\n\n      for (i = 0; i < circles.length; ++i) {\n        var d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);\n        circles[i].x = 2 * d - circles[i].x;\n        circles[i].y = 2 * d * slope - circles[i].y;\n      }\n    }\n  }\n}\n\nexport function disjointCluster(circles) {\n  // union-find clustering to get disjoint sets\n  circles.map(function (circle) {\n    circle.parent = circle;\n  }); // path compression step in union find\n\n  function find(circle) {\n    if (circle.parent !== circle) {\n      circle.parent = find(circle.parent);\n    }\n\n    return circle.parent;\n  }\n\n  function union(x, y) {\n    var xRoot = find(x),\n        yRoot = find(y);\n    xRoot.parent = yRoot;\n  } // get the union of all overlapping sets\n\n\n  for (var i = 0; i < circles.length; ++i) {\n    for (var j = i + 1; j < circles.length; ++j) {\n      var maxDistance = circles[i].radius + circles[j].radius;\n\n      if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {\n        union(circles[j], circles[i]);\n      }\n    }\n  } // find all the disjoint clusters and group them together\n\n\n  var disjointClusters = {};\n  var setid;\n\n  for (var i = 0; i < circles.length; ++i) {\n    setid = find(circles[i]).parent.setid;\n\n    if (!(setid in disjointClusters)) {\n      disjointClusters[setid] = [];\n    }\n\n    disjointClusters[setid].push(circles[i]);\n  } // cleanup bookkeeping\n\n\n  circles.map(function (circle) {\n    delete circle.parent;\n  }); // return in more usable form\n\n  var ret = [];\n\n  for (setid in disjointClusters) {\n    // eslint-disable-next-line\n    if (disjointClusters.hasOwnProperty(setid)) {\n      ret.push(disjointClusters[setid]);\n    }\n  }\n\n  return ret;\n}\n\nfunction getBoundingBox(circles) {\n  var minMax = function (d) {\n    var hi = Math.max.apply(null, circles.map(function (c) {\n      return c[d] + c.radius;\n    })),\n        lo = Math.min.apply(null, circles.map(function (c) {\n      return c[d] - c.radius;\n    }));\n    return {\n      max: hi,\n      min: lo\n    };\n  };\n\n  return {\n    xRange: minMax('x'),\n    yRange: minMax('y')\n  };\n}\n\nexport function normalizeSolution(solution, orientation, orientationOrder) {\n  if (orientation === null) {\n    orientation = Math.PI / 2;\n  } // work with a list instead of a dictionary, and take a copy so we\n  // don't mutate input\n\n\n  var circles = [],\n      i,\n      setid;\n\n  for (setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      var previous = solution[setid];\n      circles.push({\n        x: previous.x,\n        y: previous.y,\n        radius: previous.radius,\n        setid: setid\n      });\n    }\n  } // get all the disjoint clusters\n\n\n  var clusters = disjointCluster(circles); // orientate all disjoint sets, get sizes\n\n  for (i = 0; i < clusters.length; ++i) {\n    orientateCircles(clusters[i], orientation, orientationOrder);\n    var bounds = getBoundingBox(clusters[i]);\n    clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);\n    clusters[i].bounds = bounds;\n  }\n\n  clusters.sort(function (a, b) {\n    return b.size - a.size;\n  }); // orientate the largest at 0,0, and get the bounds\n\n  circles = clusters[0]; // @ts-ignore fixme 从逻辑上看似乎是不对的，后续看看\n\n  var returnBounds = circles.bounds;\n  var spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;\n\n  function addCluster(cluster, right, bottom) {\n    if (!cluster) return;\n    var bounds = cluster.bounds;\n    var xOffset, yOffset, centreing;\n\n    if (right) {\n      xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;\n    } else {\n      xOffset = returnBounds.xRange.max - bounds.xRange.max;\n      centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;\n      if (centreing < 0) xOffset += centreing;\n    }\n\n    if (bottom) {\n      yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;\n    } else {\n      yOffset = returnBounds.yRange.max - bounds.yRange.max;\n      centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;\n      if (centreing < 0) yOffset += centreing;\n    }\n\n    for (var j = 0; j < cluster.length; ++j) {\n      cluster[j].x += xOffset;\n      cluster[j].y += yOffset;\n      circles.push(cluster[j]);\n    }\n  }\n\n  var index = 1;\n\n  while (index < clusters.length) {\n    addCluster(clusters[index], true, false);\n    addCluster(clusters[index + 1], false, true);\n    addCluster(clusters[index + 2], true, true);\n    index += 3; // have one cluster (in top left). lay out next three relative\n    // to it in a grid\n\n    returnBounds = getBoundingBox(circles);\n  } // convert back to solution form\n\n\n  var ret = {};\n\n  for (i = 0; i < circles.length; ++i) {\n    ret[circles[i].setid] = circles[i];\n  }\n\n  return ret;\n}\n/** Scales a solution from venn.venn or venn.greedyLayout such that it fits in\na rectangle of width/height - with padding around the borders. also\ncenters the diagram in the available space at the same time */\n\nexport function scaleSolution(solution, width, height, padding) {\n  var circles = [],\n      setids = [];\n\n  for (var setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      setids.push(setid);\n      circles.push(solution[setid]);\n    }\n  }\n\n  width -= 2 * padding;\n  height -= 2 * padding;\n  var bounds = getBoundingBox(circles),\n      xRange = bounds.xRange,\n      yRange = bounds.yRange;\n\n  if (xRange.max == xRange.min || yRange.max == yRange.min) {\n    console.log('not scaling solution: zero size detected');\n    return solution;\n  }\n\n  var xScaling = width / (xRange.max - xRange.min),\n      yScaling = height / (yRange.max - yRange.min),\n      scaling = Math.min(yScaling, xScaling),\n      // while we're at it, center the diagram too\n  xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,\n      yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;\n  var scaled = {};\n\n  for (var i = 0; i < circles.length; ++i) {\n    var circle = circles[i];\n    scaled[setids[i]] = {\n      radius: scaling * circle.radius,\n      x: padding + xOffset + (circle.x - xRange.min) * scaling,\n      y: padding + yOffset + (circle.y - yRange.min) * scaling\n    };\n  }\n\n  return scaled;\n}","map":{"version":3,"sources":["../../../../src/plots/venn/layout/layout.ts"],"names":[],"mappings":"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","sourcesContent":["import { nelderMead, bisect, conjugateGradient, zeros, zerosM, norm2, scale } from 'fmin';\nimport { intersectionArea, circleOverlap, circleCircleIntersection, distance } from './circleintersection';\n\n/** given a list of set objects, and their corresponding overlaps.\nupdates the (x, y, radius) attribute on each set such that their positions\nroughly correspond to the desired overlaps */\nexport function venn(areas, parameters?: any) {\n  parameters = parameters || {};\n  parameters.maxIterations = parameters.maxIterations || 500;\n  const initialLayout = parameters.initialLayout || bestInitialLayout;\n  const loss = parameters.lossFunction || lossFunction;\n\n  // add in missing pairwise areas as having 0 size\n  areas = addMissingAreas(areas);\n\n  // initial layout is done greedily\n  const circles = initialLayout(areas, parameters);\n\n  // transform x/y coordinates to a vector to optimize\n  const initial = [],\n    setids = [];\n  let setid;\n  for (setid in circles) {\n    // eslint-disable-next-line\n    if (circles.hasOwnProperty(setid)) {\n      initial.push(circles[setid].x);\n      initial.push(circles[setid].y);\n      setids.push(setid);\n    }\n  }\n\n  // optimize initial layout from our loss function\n  const solution = nelderMead(\n    function (values) {\n      const current = {};\n      for (let i = 0; i < setids.length; ++i) {\n        const setid = setids[i];\n        current[setid] = {\n          x: values[2 * i],\n          y: values[2 * i + 1],\n          radius: circles[setid].radius,\n          // size : circles[setid].size\n        };\n      }\n      return loss(current, areas);\n    },\n    initial,\n    parameters\n  );\n\n  // transform solution vector back to x/y points\n  const positions = solution.x;\n  for (let i = 0; i < setids.length; ++i) {\n    setid = setids[i];\n    circles[setid].x = positions[2 * i];\n    circles[setid].y = positions[2 * i + 1];\n  }\n\n  return circles;\n}\n\nconst SMALL = 1e-10;\n\n/** Returns the distance necessary for two circles of radius r1 + r2 to\nhave the overlap area 'overlap' */\nexport function distanceFromIntersectArea(r1, r2, overlap) {\n  // handle complete overlapped circles\n  if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL) {\n    return Math.abs(r1 - r2);\n  }\n\n  return bisect(\n    function (distance) {\n      return circleOverlap(r1, r2, distance) - overlap;\n    },\n    0,\n    r1 + r2\n  );\n}\n\n/** Missing pair-wise intersection area data can cause problems:\n treating as an unknown means that sets will be laid out overlapping,\n which isn't what people expect. To reflect that we want disjoint sets\n here, set the overlap to 0 for all missing pairwise set intersections */\nfunction addMissingAreas(areas) {\n  areas = areas.slice();\n\n  // two circle intersections that aren't defined\n  const ids: number[] = [],\n    pairs: any = {};\n  let i, j, a, b;\n  for (i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length == 2) {\n      a = area.sets[0];\n      b = area.sets[1];\n      // @ts-ignore\n      pairs[[a, b]] = true;\n      // @ts-ignore\n      pairs[[b, a]] = true;\n    }\n  }\n  ids.sort((a, b) => {\n    return a > b ? 1 : -1;\n  });\n\n  for (i = 0; i < ids.length; ++i) {\n    a = ids[i];\n    for (j = i + 1; j < ids.length; ++j) {\n      b = ids[j];\n      // @ts-ignore\n      if (!([a, b] in pairs)) {\n        areas.push({ sets: [a, b], size: 0 });\n      }\n    }\n  }\n  return areas;\n}\n\n/// Returns two matrices, one of the euclidean distances between the sets\n/// and the other indicating if there are subset or disjoint set relationships\nexport function getDistanceMatrices(areas, sets, setids) {\n  // initialize an empty distance matrix between all the points\n  const distances = zerosM(sets.length, sets.length),\n    constraints = zerosM(sets.length, sets.length);\n\n  // compute required distances between all the sets such that\n  // the areas match\n  areas\n    .filter(function (x) {\n      return x.sets.length == 2;\n    })\n    .map(function (current) {\n      const left = setids[current.sets[0]],\n        right = setids[current.sets[1]],\n        r1 = Math.sqrt(sets[left].size / Math.PI),\n        r2 = Math.sqrt(sets[right].size / Math.PI),\n        distance = distanceFromIntersectArea(r1, r2, current.size);\n\n      distances[left][right] = distances[right][left] = distance;\n\n      // also update constraints to indicate if its a subset or disjoint\n      // relationship\n      let c = 0;\n      if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {\n        c = 1;\n      } else if (current.size <= 1e-10) {\n        c = -1;\n      }\n      constraints[left][right] = constraints[right][left] = c;\n    });\n\n  return { distances: distances, constraints: constraints };\n}\n\n/// computes the gradient and loss simulatenously for our constrained MDS optimizer\nfunction constrainedMDSGradient(x, fxprime, distances, constraints) {\n  let loss = 0,\n    i;\n  for (i = 0; i < fxprime.length; ++i) {\n    fxprime[i] = 0;\n  }\n\n  for (i = 0; i < distances.length; ++i) {\n    const xi = x[2 * i],\n      yi = x[2 * i + 1];\n    for (let j = i + 1; j < distances.length; ++j) {\n      const xj = x[2 * j],\n        yj = x[2 * j + 1],\n        dij = distances[i][j],\n        constraint = constraints[i][j];\n\n      const squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),\n        distance = Math.sqrt(squaredDistance),\n        delta = squaredDistance - dij * dij;\n\n      if ((constraint > 0 && distance <= dij) || (constraint < 0 && distance >= dij)) {\n        continue;\n      }\n\n      loss += 2 * delta * delta;\n\n      fxprime[2 * i] += 4 * delta * (xi - xj);\n      fxprime[2 * i + 1] += 4 * delta * (yi - yj);\n\n      fxprime[2 * j] += 4 * delta * (xj - xi);\n      fxprime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n  return loss;\n}\n\n/// takes the best working variant of either constrained MDS or greedy\nexport function bestInitialLayout(areas, params) {\n  let initial = greedyLayout(areas, params);\n  const loss = params.lossFunction || lossFunction;\n\n  // greedylayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n  if (areas.length >= 8) {\n    const constrained = constrainedMDSLayout(areas, params),\n      constrainedLoss = loss(constrained, areas),\n      greedyLoss = loss(initial, areas);\n\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n  return initial;\n}\n\n/// use the constrained MDS variant to generate an initial layout\nexport function constrainedMDSLayout(areas, params) {\n  params = params || {};\n  const restarts = params.restarts || 10;\n\n  // bidirectionally map sets to a rowid  (so we can create a matrix)\n  const sets = [],\n    setids = {};\n  let i;\n  for (i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      setids[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n\n  const matrices = getDistanceMatrices(areas, sets, setids);\n  let distances = matrices.distances;\n  const constraints = matrices.constraints;\n\n  // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n  const norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map(function (row) {\n    return row.map(function (value) {\n      return value / norm;\n    });\n  });\n\n  const obj = function (x, fxprime) {\n    return constrainedMDSGradient(x, fxprime, distances, constraints);\n  };\n\n  let best, current;\n  for (i = 0; i < restarts; ++i) {\n    const initial = zeros(distances.length * 2).map(Math.random);\n\n    current = conjugateGradient(obj, initial, params);\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n  const positions = best.x;\n\n  // translate rows back to (x,y,radius) coordinates\n  const circles = {};\n  for (i = 0; i < sets.length; ++i) {\n    const set = sets[i];\n    circles[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI),\n    };\n  }\n\n  if (params.history) {\n    for (i = 0; i < params.history.length; ++i) {\n      scale(params.history[i].x, norm);\n    }\n  }\n  return circles;\n}\n\n/** Lays out a Venn diagram greedily, going from most overlapped sets to\nleast overlapped, attempting to position each new set such that the\noverlapping areas to already positioned sets are basically right */\nexport function greedyLayout(areas, params) {\n  const loss = params && params.lossFunction ? params.lossFunction : lossFunction;\n  // define a circle for each set\n  const circles = {},\n    setOverlaps = {};\n  let set;\n  for (let i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      set = area.sets[0];\n      circles[set] = {\n        x: 1e10,\n        y: 1e10,\n        // rowid: circles.length, // fix to ->\n        rowid: Object.keys(circles).length,\n        size: area.size,\n        radius: Math.sqrt(area.size / Math.PI),\n      };\n      setOverlaps[set] = [];\n    }\n  }\n  areas = areas.filter(function (a) {\n    return a.sets.length == 2;\n  });\n\n  // map each set to a list of all the other sets that overlap it\n  for (let i = 0; i < areas.length; ++i) {\n    const current = areas[i];\n    // eslint-disable-next-line\n    let weight = current.hasOwnProperty('weight') ? current.weight : 1.0;\n    const left = current.sets[0],\n      right = current.sets[1];\n\n    // completely overlapped circles shouldn't be positioned early here\n    if (current.size + SMALL >= Math.min(circles[left].size, circles[right].size)) {\n      weight = 0;\n    }\n\n    setOverlaps[left].push({ set: right, size: current.size, weight: weight });\n    setOverlaps[right].push({ set: left, size: current.size, weight: weight });\n  }\n\n  // get list of most overlapped sets\n  const mostOverlapped = [];\n  for (set in setOverlaps) {\n    // eslint-disable-next-line\n    if (setOverlaps.hasOwnProperty(set)) {\n      let size = 0;\n      for (let i = 0; i < setOverlaps[set].length; ++i) {\n        size += setOverlaps[set][i].size * setOverlaps[set][i].weight;\n      }\n\n      mostOverlapped.push({ set: set, size: size });\n    }\n  }\n\n  // sort by size desc\n  function sortOrder(a, b) {\n    return b.size - a.size;\n  }\n  mostOverlapped.sort(sortOrder);\n\n  // keep track of what sets have been laid out\n  const positioned = {};\n  function isPositioned(element) {\n    return element.set in positioned;\n  }\n\n  // adds a point to the output\n  function positionSet(point, index) {\n    circles[index].x = point.x;\n    circles[index].y = point.y;\n    positioned[index] = true;\n  }\n\n  // add most overlapped set at (0,0)\n  positionSet({ x: 0, y: 0 }, mostOverlapped[0].set);\n\n  // get distances between all points. TODO, necessary?\n  // answer: probably not\n  // var distances = venn.getDistanceMatrices(circles, areas).distances;\n  for (let i = 1; i < mostOverlapped.length; ++i) {\n    const setIndex = mostOverlapped[i].set,\n      overlap = setOverlaps[setIndex].filter(isPositioned);\n    set = circles[setIndex];\n    overlap.sort(sortOrder);\n\n    if (overlap.length === 0) {\n      // this shouldn't happen anymore with addMissingAreas\n      throw 'ERROR: missing pairwise overlap information';\n    }\n\n    const points = [];\n    for (let j = 0; j < overlap.length; ++j) {\n      // get appropriate distance from most overlapped already added set\n      const p1 = circles[overlap[j].set],\n        d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);\n\n      // sample positions at 90 degrees for maximum aesthetics\n      points.push({ x: p1.x + d1, y: p1.y });\n      points.push({ x: p1.x - d1, y: p1.y });\n      points.push({ y: p1.y + d1, x: p1.x });\n      points.push({ y: p1.y - d1, x: p1.x });\n\n      // if we have at least 2 overlaps, then figure out where the\n      // set should be positioned analytically and try those too\n      for (let k = j + 1; k < overlap.length; ++k) {\n        const p2 = circles[overlap[k].set],\n          d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);\n\n        const extraPoints = circleCircleIntersection(\n          { x: p1.x, y: p1.y, radius: d1 },\n          { x: p2.x, y: p2.y, radius: d2 }\n        );\n\n        for (let l = 0; l < extraPoints.length; ++l) {\n          points.push(extraPoints[l]);\n        }\n      }\n    }\n\n    // we have some candidate positions for the set, examine loss\n    // at each position to figure out where to put it at\n    let bestLoss = 1e50,\n      bestPoint = points[0];\n    for (let j = 0; j < points.length; ++j) {\n      circles[setIndex].x = points[j].x;\n      circles[setIndex].y = points[j].y;\n      const localLoss = loss(circles, areas);\n      if (localLoss < bestLoss) {\n        bestLoss = localLoss;\n        bestPoint = points[j];\n      }\n    }\n\n    positionSet(bestPoint, setIndex);\n  }\n\n  return circles;\n}\n\n/** Given a bunch of sets, and the desired overlaps between these sets - computes\nthe distance from the actual overlaps to the desired overlaps. Note that\nthis method ignores overlaps of more than 2 circles */\nexport function lossFunction(sets, overlaps) {\n  let output = 0;\n\n  function getCircles(indices) {\n    return indices.map(function (i) {\n      return sets[i];\n    });\n  }\n\n  for (let i = 0; i < overlaps.length; ++i) {\n    const area = overlaps[i];\n    let overlap;\n    if (area.sets.length == 1) {\n      continue;\n    } else if (area.sets.length == 2) {\n      const left = sets[area.sets[0]],\n        right = sets[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(getCircles(area.sets));\n    }\n\n    // eslint-disable-next-line\n    const weight = area.hasOwnProperty('weight') ? area.weight : 1.0;\n    output += weight * (overlap - area.size) * (overlap - area.size);\n  }\n\n  return output;\n}\n\n// orientates a bunch of circles to point in orientation\nfunction orientateCircles(circles, orientation, orientationOrder) {\n  if (orientationOrder === null) {\n    circles.sort(function (a, b) {\n      return b.radius - a.radius;\n    });\n  } else {\n    circles.sort(orientationOrder);\n  }\n\n  let i;\n  // shift circles so largest circle is at (0, 0)\n  if (circles.length > 0) {\n    const largestX = circles[0].x,\n      largestY = circles[0].y;\n\n    for (i = 0; i < circles.length; ++i) {\n      circles[i].x -= largestX;\n      circles[i].y -= largestY;\n    }\n  }\n\n  if (circles.length == 2) {\n    // if the second circle is a subset of the first, arrange so that\n    // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120\n    const dist = distance(circles[0], circles[1]);\n    if (dist < Math.abs(circles[1].radius - circles[0].radius)) {\n      circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;\n      circles[1].y = circles[0].y;\n    }\n  }\n\n  // rotate circles so that second largest is at an angle of 'orientation'\n  // from largest\n  if (circles.length > 1) {\n    const rotation = Math.atan2(circles[1].x, circles[1].y) - orientation;\n    let x, y;\n    const c = Math.cos(rotation),\n      s = Math.sin(rotation);\n    for (i = 0; i < circles.length; ++i) {\n      x = circles[i].x;\n      y = circles[i].y;\n      circles[i].x = c * x - s * y;\n      circles[i].y = s * x + c * y;\n    }\n  }\n\n  // mirror solution if third solution is above plane specified by\n  // first two circles\n  if (circles.length > 2) {\n    let angle = Math.atan2(circles[2].x, circles[2].y) - orientation;\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    if (angle > Math.PI) {\n      const slope = circles[1].y / (1e-10 + circles[1].x);\n      for (i = 0; i < circles.length; ++i) {\n        const d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);\n        circles[i].x = 2 * d - circles[i].x;\n        circles[i].y = 2 * d * slope - circles[i].y;\n      }\n    }\n  }\n}\n\nexport function disjointCluster(circles) {\n  // union-find clustering to get disjoint sets\n  circles.map(function (circle) {\n    circle.parent = circle;\n  });\n\n  // path compression step in union find\n  function find(circle) {\n    if (circle.parent !== circle) {\n      circle.parent = find(circle.parent);\n    }\n    return circle.parent;\n  }\n\n  function union(x, y) {\n    const xRoot = find(x),\n      yRoot = find(y);\n    xRoot.parent = yRoot;\n  }\n\n  // get the union of all overlapping sets\n  for (let i = 0; i < circles.length; ++i) {\n    for (let j = i + 1; j < circles.length; ++j) {\n      const maxDistance = circles[i].radius + circles[j].radius;\n      if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {\n        union(circles[j], circles[i]);\n      }\n    }\n  }\n\n  // find all the disjoint clusters and group them together\n  const disjointClusters = {};\n  let setid;\n  for (let i = 0; i < circles.length; ++i) {\n    setid = find(circles[i]).parent.setid;\n    if (!(setid in disjointClusters)) {\n      disjointClusters[setid] = [];\n    }\n    disjointClusters[setid].push(circles[i]);\n  }\n\n  // cleanup bookkeeping\n  circles.map(function (circle) {\n    delete circle.parent;\n  });\n\n  // return in more usable form\n  const ret = [];\n  for (setid in disjointClusters) {\n    // eslint-disable-next-line\n    if (disjointClusters.hasOwnProperty(setid)) {\n      ret.push(disjointClusters[setid]);\n    }\n  }\n  return ret;\n}\n\nfunction getBoundingBox(circles) {\n  const minMax = function (d) {\n    const hi = Math.max.apply(\n        null,\n        circles.map(function (c) {\n          return c[d] + c.radius;\n        })\n      ),\n      lo = Math.min.apply(\n        null,\n        circles.map(function (c) {\n          return c[d] - c.radius;\n        })\n      );\n    return { max: hi, min: lo };\n  };\n\n  return { xRange: minMax('x'), yRange: minMax('y') };\n}\n\nexport function normalizeSolution(solution, orientation, orientationOrder) {\n  if (orientation === null) {\n    orientation = Math.PI / 2;\n  }\n\n  // work with a list instead of a dictionary, and take a copy so we\n  // don't mutate input\n  let circles = [],\n    i,\n    setid;\n  for (setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      const previous = solution[setid];\n      circles.push({ x: previous.x, y: previous.y, radius: previous.radius, setid: setid });\n    }\n  }\n\n  // get all the disjoint clusters\n  const clusters = disjointCluster(circles);\n\n  // orientate all disjoint sets, get sizes\n  for (i = 0; i < clusters.length; ++i) {\n    orientateCircles(clusters[i], orientation, orientationOrder);\n    const bounds = getBoundingBox(clusters[i]);\n    clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);\n    clusters[i].bounds = bounds;\n  }\n  clusters.sort(function (a, b) {\n    return b.size - a.size;\n  });\n\n  // orientate the largest at 0,0, and get the bounds\n  circles = clusters[0];\n  // @ts-ignore fixme 从逻辑上看似乎是不对的，后续看看\n  let returnBounds = circles.bounds;\n\n  const spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;\n\n  function addCluster(cluster, right, bottom) {\n    if (!cluster) return;\n\n    const bounds = cluster.bounds;\n    let xOffset, yOffset, centreing;\n\n    if (right) {\n      xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;\n    } else {\n      xOffset = returnBounds.xRange.max - bounds.xRange.max;\n      centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;\n      if (centreing < 0) xOffset += centreing;\n    }\n\n    if (bottom) {\n      yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;\n    } else {\n      yOffset = returnBounds.yRange.max - bounds.yRange.max;\n      centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;\n      if (centreing < 0) yOffset += centreing;\n    }\n\n    for (let j = 0; j < cluster.length; ++j) {\n      cluster[j].x += xOffset;\n      cluster[j].y += yOffset;\n      circles.push(cluster[j]);\n    }\n  }\n\n  let index = 1;\n  while (index < clusters.length) {\n    addCluster(clusters[index], true, false);\n    addCluster(clusters[index + 1], false, true);\n    addCluster(clusters[index + 2], true, true);\n    index += 3;\n\n    // have one cluster (in top left). lay out next three relative\n    // to it in a grid\n    returnBounds = getBoundingBox(circles);\n  }\n\n  // convert back to solution form\n  const ret = {};\n  for (i = 0; i < circles.length; ++i) {\n    ret[circles[i].setid] = circles[i];\n  }\n  return ret;\n}\n\n/** Scales a solution from venn.venn or venn.greedyLayout such that it fits in\na rectangle of width/height - with padding around the borders. also\ncenters the diagram in the available space at the same time */\nexport function scaleSolution(solution, width, height, padding) {\n  const circles = [],\n    setids = [];\n  for (const setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      setids.push(setid);\n      circles.push(solution[setid]);\n    }\n  }\n\n  width -= 2 * padding;\n  height -= 2 * padding;\n\n  const bounds = getBoundingBox(circles),\n    xRange = bounds.xRange,\n    yRange = bounds.yRange;\n\n  if (xRange.max == xRange.min || yRange.max == yRange.min) {\n    console.log('not scaling solution: zero size detected');\n    return solution;\n  }\n\n  const xScaling = width / (xRange.max - xRange.min),\n    yScaling = height / (yRange.max - yRange.min),\n    scaling = Math.min(yScaling, xScaling),\n    // while we're at it, center the diagram too\n    xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,\n    yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;\n\n  const scaled = {};\n  for (let i = 0; i < circles.length; ++i) {\n    const circle = circles[i];\n    scaled[setids[i]] = {\n      radius: scaling * circle.radius,\n      x: padding + xOffset + (circle.x - xRange.min) * scaling,\n      y: padding + yOffset + (circle.y - yRange.min) * scaling,\n    };\n  }\n\n  return scaled;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}