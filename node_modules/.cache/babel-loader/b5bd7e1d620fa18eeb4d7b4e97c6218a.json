{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isFunction, map, isNumber, maxBy, get } from '@antv/util';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE } from '../constant';\n/**\n * 漏斗图 transform\n * @param geometry\n */\n\nexport function transformData(data, originData, options) {\n  var formatData = [];\n  var yField = options.yField,\n      maxSize = options.maxSize,\n      minSize = options.minSize;\n  var maxYFieldValue = get(maxBy(originData, yField), [yField]);\n  var max = isNumber(maxSize) ? maxSize : 1;\n  var min = isNumber(minSize) ? minSize : 0; // format 数据\n\n  formatData = map(data, function (row, index) {\n    var percent = (row[yField] || 0) / maxYFieldValue;\n    row[FUNNEL_PERCENT] = percent;\n    row[FUNNEL_MAPPING_VALUE] = (max - min) * percent + min; // 转化率数据存储前后数据\n\n    row[FUNNEL_CONVERSATION] = [get(data, [index - 1, yField]), row[yField]];\n    return row;\n  });\n  return formatData;\n}\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\n\nexport function conversionTagComponent(getLineCoordinate) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var conversionTag = options.conversionTag;\n    var data = chart.getOptions().data;\n\n    if (conversionTag) {\n      var formatter_1 = conversionTag.formatter;\n      data.forEach(function (obj, index) {\n        if (index <= 0 || Number.isNaN(obj[FUNNEL_MAPPING_VALUE])) return;\n        var lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter_1) ? formatter_1(obj, data) : formatter_1,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: __assign({\n              textAlign: 'start',\n              textBaseline: 'middle'\n            }, conversionTag.style)\n          }\n        });\n        chart.annotation().line(lineOption);\n      });\n    }\n\n    return params;\n  };\n}","map":{"version":3,"sources":["../../../../src/plots/funnel/geometries/common.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,EAAqB,GAArB,EAA0B,QAA1B,EAAoC,KAApC,EAA2C,GAA3C,QAAsD,YAAtD;AAEA,SAAS,cAAT,EAAyB,mBAAzB,EAA8C,oBAA9C,QAA0E,aAA1E;AAIA;;;AAGG;;AACH,OAAM,SAAU,aAAV,CACJ,IADI,EAEJ,UAFI,EAGJ,OAHI,EAG0D;AAE9D,MAAI,UAAU,GAAG,EAAjB;AACQ,MAAA,MAAM,GAAuB,OAAO,CAA9B,MAAN;AAAA,MAAQ,OAAO,GAAc,OAAO,CAArB,OAAf;AAAA,MAAiB,OAAO,GAAK,OAAO,CAAZ,OAAxB;AACR,MAAM,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,UAAD,EAAa,MAAb,CAAN,EAA4B,CAAC,MAAD,CAA5B,CAA1B;AACA,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB,GAA8B,CAA1C;AACA,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB,GAA8B,CAA1C,CAN8D,CAQ9D;;AACA,EAAA,UAAU,GAAG,GAAG,CAAC,IAAD,EAAO,UAAC,GAAD,EAAM,KAAN,EAAW;AAChC,QAAM,OAAO,GAAG,CAAC,GAAG,CAAC,MAAD,CAAH,IAAe,CAAhB,IAAqB,cAArC;AACA,IAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,OAAtB;AACA,IAAA,GAAG,CAAC,oBAAD,CAAH,GAA4B,CAAC,GAAG,GAAG,GAAP,IAAc,OAAd,GAAwB,GAApD,CAHgC,CAIhC;;AACA,IAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,CAAC,GAAG,CAAC,IAAD,EAAO,CAAC,KAAK,GAAG,CAAT,EAAY,MAAZ,CAAP,CAAJ,EAAiC,GAAG,CAAC,MAAD,CAApC,CAA3B;AACA,WAAO,GAAP;AACD,GAPe,CAAhB;AASA,SAAO,UAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,sBAAV,CACJ,iBADI,EAMiB;AAErB,SAAO,UAAU,MAAV,EAAuC;AACpC,QAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,QAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,QAAA,aAAa,GAAK,OAAO,CAAZ,aAAb;AAEA,QAAA,IAAI,GAAK,KAAK,CAAC,UAAN,GAAL,IAAJ;;AAER,QAAI,aAAJ,EAAmB;AACT,UAAA,WAAS,GAAK,aAAa,CAAlB,SAAT;AACR,MAAA,IAAI,CAAC,OAAL,CAAa,UAAC,GAAD,EAAM,KAAN,EAAW;AACtB,YAAI,KAAK,IAAI,CAAT,IAAc,MAAM,CAAC,KAAP,CAAa,GAAG,CAAC,oBAAD,CAAhB,CAAlB,EAA2D;AAC3D,YAAM,UAAU,GAAG,iBAAiB,CAAC,GAAD,EAAM,KAAN,EAAa,IAAb,EAAmB;AACrD,UAAA,GAAG,EAAE,IADgD;AAErD,UAAA,IAAI,EAAE;AACJ,YAAA,OAAO,EAAE,UAAU,CAAC,WAAD,CAAV,GAAwB,WAAS,CAAC,GAAD,EAAM,IAAN,CAAjC,GAA+C,WADpD;AAEJ,YAAA,OAAO,EAAE,aAAa,CAAC,OAFnB;AAGJ,YAAA,OAAO,EAAE,aAAa,CAAC,OAHnB;AAIJ,YAAA,QAAQ,EAAE,KAJN;AAKJ,YAAA,UAAU,EAAE,KALR;AAMJ,YAAA,KAAK,EAAA,QAAA,CAAA;AACH,cAAA,SAAS,EAAE,OADR;AAEH,cAAA,YAAY,EAAE;AAFX,aAAA,EAGA,aAAa,CAAC,KAHd;AAND;AAF+C,SAAnB,CAApC;AAgBA,QAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB,CAAwB,UAAxB;AACD,OAnBD;AAoBD;;AACD,WAAO,MAAP;AACD,GA9BD;AA+BD","sourcesContent":["import { Types } from '@antv/g2';\nimport { isFunction, map, isNumber, maxBy, get } from '@antv/util';\nimport { Datum, Data } from '../../../types/common';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { Params } from '../../../core/adaptor';\nimport { FunnelOptions } from '../types';\n\n/**\n * 漏斗图 transform\n * @param geometry\n */\nexport function transformData(\n  data: FunnelOptions['data'],\n  originData: FunnelOptions['data'],\n  options: Pick<FunnelOptions, 'yField' | 'maxSize' | 'minSize'>\n): FunnelOptions['data'] {\n  let formatData = [];\n  const { yField, maxSize, minSize } = options;\n  const maxYFieldValue = get(maxBy(originData, yField), [yField]);\n  const max = isNumber(maxSize) ? maxSize : 1;\n  const min = isNumber(minSize) ? minSize : 0;\n\n  // format 数据\n  formatData = map(data, (row, index) => {\n    const percent = (row[yField] || 0) / maxYFieldValue;\n    row[FUNNEL_PERCENT] = percent;\n    row[FUNNEL_MAPPING_VALUE] = (max - min) * percent + min;\n    // 转化率数据存储前后数据\n    row[FUNNEL_CONVERSATION] = [get(data, [index - 1, yField]), row[yField]];\n    return row;\n  });\n\n  return formatData;\n}\n\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\nexport function conversionTagComponent(\n  getLineCoordinate: (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ) => Types.LineOption\n) {\n  return function (params: Params<FunnelOptions>): Params<FunnelOptions> {\n    const { chart, options } = params;\n    const { conversionTag } = options;\n\n    const { data } = chart.getOptions();\n\n    if (conversionTag) {\n      const { formatter } = conversionTag;\n      data.forEach((obj, index) => {\n        if (index <= 0 || Number.isNaN(obj[FUNNEL_MAPPING_VALUE])) return;\n        const lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter) ? formatter(obj, data) : formatter,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: {\n              textAlign: 'start',\n              textBaseline: 'middle',\n              ...conversionTag.style,\n            },\n          },\n        });\n\n        chart.annotation().line(lineOption);\n      });\n    }\n    return params;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}