{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { pattern } from '../../adaptor/pattern';\nimport { findGeometry, deepAssign } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      binField = options.binField,\n      binNumber = options.binNumber,\n      binWidth = options.binWidth,\n      color = options.color,\n      stackField = options.stackField,\n      legend = options.legend,\n      columnStyle = options.columnStyle; // 处理数据\n\n  var plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n  chart.data(plotData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color: color,\n        style: columnStyle\n      }\n    }\n  });\n  interval(p); // 图例\n\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis;\n  return flow(scale((_a = {}, _a[HISTOGRAM_X_FIELD] = xAxis, _a[HISTOGRAM_Y_FIELD] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label;\n  var geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('columnStyle'), geometry, meta, axis, state, label, tooltip, interaction, animation)(params);\n}","map":{"version":3,"sources":["../../../src/plots/histogram/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Params } from '../../core/adaptor';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { pattern } from '../../adaptor/pattern';\nimport { findGeometry, deepAssign } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HistogramOptions } from './types';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { data, binField, binNumber, binWidth, color, stackField, legend, columnStyle } = options;\n\n  // 处理数据\n  const plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n\n  chart.data(plotData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color,\n        style: columnStyle,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 图例\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { options } = params;\n  const { xAxis, yAxis } = options;\n\n  return flow(\n    scale({\n      [HISTOGRAM_X_FIELD]: xAxis,\n      [HISTOGRAM_Y_FIELD]: yAxis,\n    })\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * label 配置\n * @param params\n */\nfunction label(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { label } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<HistogramOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    pattern('columnStyle'),\n    geometry,\n    meta,\n    axis,\n    state,\n    label,\n    tooltip,\n    interaction,\n    animation\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}