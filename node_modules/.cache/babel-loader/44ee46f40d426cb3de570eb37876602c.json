{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveInstance = void 0;\n\nvar error_msgs_1 = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n  var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n    return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty;\n  });\n  var propertyInjections = propertyInjectionsRequests.map(resolveRequest);\n  propertyInjectionsRequests.forEach(function (r, index) {\n    var propertyName = \"\";\n    propertyName = r.target.name.value();\n    var injection = propertyInjections[index];\n    instance[propertyName] = injection;\n  });\n  return instance;\n}\n\nfunction _createInstance(Func, injections) {\n  return new (Func.bind.apply(Func, __spreadArray([void 0], injections)))();\n}\n\nfunction _postConstruct(constr, result) {\n  if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n    var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n\n    try {\n      result[data.value]();\n    } catch (e) {\n      throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));\n    }\n  }\n}\n\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n  var result = null;\n\n  if (childRequests.length > 0) {\n    var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n      return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument;\n    });\n    var constructorInjections = constructorInjectionsRequests.map(resolveRequest);\n    result = _createInstance(constr, constructorInjections);\n    result = _injectProperties(result, childRequests, resolveRequest);\n  } else {\n    result = new constr();\n  }\n\n  _postConstruct(constr, result);\n\n  return result;\n}\n\nexports.resolveInstance = resolveInstance;","map":{"version":3,"sources":["../../src/resolution/instantiation.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAIA,SAAS,iBAAT,CACI,QADJ,EAEI,aAFJ,EAGI,cAHJ,EAGoD;AAGhD,MAAM,0BAA0B,GAAG,aAAa,CAAC,MAAd,CAAqB,UAAC,YAAD,EAAiC;AACrF,WACI,YAAY,CAAC,MAAb,KAAwB,IAAxB,IACA,YAAY,CAAC,MAAb,CAAoB,IAApB,KAA6B,eAAA,CAAA,cAAA,CAAe,aAFhD;AAGC,GAJ8B,CAAnC;AAMA,MAAM,kBAAkB,GAAG,0BAA0B,CAAC,GAA3B,CAA+B,cAA/B,CAA3B;AAEA,EAAA,0BAA0B,CAAC,OAA3B,CAAmC,UAAC,CAAD,EAAwB,KAAxB,EAAqC;AACpE,QAAI,YAAY,GAAG,EAAnB;AACA,IAAA,YAAY,GAAG,CAAC,CAAC,MAAF,CAAS,IAAT,CAAc,KAAd,EAAf;AACA,QAAM,SAAS,GAAG,kBAAkB,CAAC,KAAD,CAApC;AACA,IAAA,QAAQ,CAAC,YAAD,CAAR,GAAyB,SAAzB;AACH,GALD;AAOA,SAAO,QAAP;AAEH;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAwD,UAAxD,EAA4E;AACxE,SAAA,KAAW,IAAI,CAAA,IAAJ,CAAI,KAAJ,CAAA,IAAA,EAAI,aAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAI,UAAJ,CAAJ,CAAX,GAAA;AACH;;AAED,SAAS,cAAT,CAAwB,MAAxB,EAAyD,MAAzD,EAAoE;AAChE,MAAI,OAAO,CAAC,WAAR,CAAoB,YAAY,CAAC,cAAjC,EAAiD,MAAjD,CAAJ,EAA8D;AAC1D,QAAM,IAAI,GAAa,OAAO,CAAC,WAAR,CAAoB,YAAY,CAAC,cAAjC,EAAiD,MAAjD,CAAvB;;AACA,QAAI;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,KAAN,CAAN;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,YAAM,IAAI,KAAJ,CAAU,YAAA,CAAA,oBAAA,CAAqB,MAAM,CAAC,IAA5B,EAAkC,CAAC,CAAC,OAApC,CAAV,CAAN;AACH;AACJ;AACJ;;AAED,SAAS,eAAT,CACI,MADJ,EAEI,aAFJ,EAGI,cAHJ,EAGoD;AAGhD,MAAI,MAAM,GAAQ,IAAlB;;AAEA,MAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAE1B,QAAM,6BAA6B,GAAG,aAAa,CAAC,MAAd,CAAqB,UAAC,YAAD,EAAiC;AACxF,aAAC,YAAY,CAAC,MAAb,KAAwB,IAAxB,IAAgC,YAAY,CAAC,MAAb,CAAoB,IAApB,KAA6B,eAAA,CAAA,cAAA,CAAe,mBAA7E;AAAiG,KAD/D,CAAtC;AAGA,QAAM,qBAAqB,GAAG,6BAA6B,CAAC,GAA9B,CAAkC,cAAlC,CAA9B;AAEA,IAAA,MAAM,GAAG,eAAe,CAAC,MAAD,EAAS,qBAAT,CAAxB;AACA,IAAA,MAAM,GAAG,iBAAiB,CAAC,MAAD,EAAS,aAAT,EAAwB,cAAxB,CAA1B;AAEH,GAVD,MAUO;AACH,IAAA,MAAM,GAAG,IAAI,MAAJ,EAAT;AACH;;AACD,EAAA,cAAc,CAAC,MAAD,EAAS,MAAT,CAAd;;AAEA,SAAO,MAAP;AACH;;AAEQ,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveInstance = void 0;\nvar error_msgs_1 = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n        return (childRequest.target !== null &&\n            childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty);\n    });\n    var propertyInjections = propertyInjectionsRequests.map(resolveRequest);\n    propertyInjectionsRequests.forEach(function (r, index) {\n        var propertyName = \"\";\n        propertyName = r.target.name.value();\n        var injection = propertyInjections[index];\n        instance[propertyName] = injection;\n    });\n    return instance;\n}\nfunction _createInstance(Func, injections) {\n    return new (Func.bind.apply(Func, __spreadArray([void 0], injections)))();\n}\nfunction _postConstruct(constr, result) {\n    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n        try {\n            result[data.value]();\n        }\n        catch (e) {\n            throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));\n        }\n    }\n}\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n    var result = null;\n    if (childRequests.length > 0) {\n        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n            return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument);\n        });\n        var constructorInjections = constructorInjectionsRequests.map(resolveRequest);\n        result = _createInstance(constr, constructorInjections);\n        result = _injectProperties(result, childRequests, resolveRequest);\n    }\n    else {\n        result = new constr();\n    }\n    _postConstruct(constr, result);\n    return result;\n}\nexports.resolveInstance = resolveInstance;\n//# sourceMappingURL=instantiation.js.map"]},"metadata":{},"sourceType":"script"}