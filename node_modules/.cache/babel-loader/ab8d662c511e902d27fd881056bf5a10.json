{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n        connectNulls = _a === void 0 ? false : _a,\n        _b = cfg.showSinglePoint,\n        showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    } // Path 的每个 element 对应一组数据\n\n\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    var _a = diff(this.lastElementsMap, keys),\n        added = _a.added,\n        updated = _a.updated,\n        removed = _a.removed;\n\n    for (var _i = 0, added_1 = added; _i < added_1.length; _i++) {\n      var key = added_1[_i];\n      var mappingData = keyData.get(key);\n      var shapeFactory = this.getShapeFactory();\n      var shapeCfg = this.getShapeInfo(mappingData);\n      var i = keyIndex.get(key);\n      var element = new Element({\n        shapeFactory: shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (var _b = 0, updated_1 = updated; _b < updated_1.length; _b++) {\n      var key = updated_1[_b];\n      var mappingData = keyData.get(key);\n      var element = this.lastElementsMap[key];\n      var i = keyIndex.get(key);\n      var shapeCfg = this.getShapeInfo(mappingData);\n      var preShapeCfg = element.getModel();\n\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n        element.update(shapeCfg); // 更新对应的 element\n      }\n\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (var _c = 0, removed_1 = removed; _c < removed_1.length; _c++) {\n      var key = removed_1[_c];\n      var element = this.lastElementsMap[key]; // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n\n\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points: points,\n      data: data\n    };\n  };\n\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    var _a = this.getPointsAndData(mappingData),\n        points = _a.points,\n        data = _a.data;\n\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n\n  return Path;\n}(Geometry);\n\nexport default Path;","map":{"version":3,"sources":["../../src/geometry/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { FIELD_ORIGIN } from '../constant';\nimport { MappingDatum, ShapeInfo } from '../interface';\nimport Geometry, { GeometryCfg } from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n\n/** Path 构造函数参数类型 */\nexport interface PathCfg extends GeometryCfg {\n  /** 是否连接空值 */\n  connectNulls?: boolean;\n  /** 单个孤立数据点是否展示 */\n  showSinglePoint?: boolean;\n}\n\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nexport default class Path extends Geometry {\n  public readonly type: string = 'path';\n  public readonly shapeType: string = 'line';\n  /** 是否连接空值 */\n  public connectNulls: boolean;\n  /** 单个孤立数据点是否展示 */\n  public showSinglePoint: boolean;\n\n  constructor(cfg: PathCfg) {\n    super(cfg);\n\n    const { connectNulls = false, showSinglePoint = true } = cfg;\n    this.connectNulls = connectNulls;\n    this.showSinglePoint = showSinglePoint;\n  }\n\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    // Path 的每个 element 对应一组数据\n    const keyData = new Map<string, MappingDatum[]>();\n    const keyIndex = new Map<string, number>();\n    const keys: string[] = [];\n\n    let index = 0;\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    for (const key of added) {\n      const mappingData = keyData.get(key);\n      const shapeFactory = this.getShapeFactory();\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const i = keyIndex.get(key);\n      const element = new Element({\n        shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i,\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of updated) {\n      const mappingData = keyData.get(key);\n      const element = this.lastElementsMap[key];\n      const i = keyIndex.get(key);\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const preShapeCfg = element.getModel();\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(shapeCfg); // 更新对应的 element\n      }\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  protected getPointsAndData(mappingData: MappingDatum[]) {\n    const points = [];\n    const data = [];\n\n    for (let i = 0, len = mappingData.length; i < len; i++) {\n      const obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y,\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points,\n      data,\n    };\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n    const { points, data } = this.getPointsAndData(mappingData);\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n\n    return shapeCfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}