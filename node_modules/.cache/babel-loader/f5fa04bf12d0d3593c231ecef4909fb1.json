{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\n\nvar BidirectionalBar =\n/** @class */\nfunction (_super) {\n  __extends(BidirectionalBar, _super);\n\n  function BidirectionalBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'bidirectional-bar';\n    return _this;\n  }\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n\n\n  BidirectionalBar.getDefaultOptions = function () {\n    return deepAssign({}, _super.getDefaultOptions.call(this), {\n      syncViewPadding: syncViewPadding\n    });\n  };\n  /**\n   * @override\n   */\n\n\n  BidirectionalBar.prototype.changeData = function (data) {\n    if (data === void 0) {\n      data = [];\n    }\n\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)); // 更新options\n\n    this.updateOption({\n      data: data\n    });\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField,\n        layout = _a.layout; // 处理数据\n\n    var groupData = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    var firstViewData = groupData[0],\n        secondViewData = groupData[1];\n    var firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    var secondView = findViewById(this.chart, SECOND_AXES_VIEW); // 更新对应view的data\n\n    firstView.data(firstViewData);\n    secondView.data(secondViewData); // 重新渲染\n\n    this.chart.render(true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n\n  BidirectionalBar.prototype.getDefaultOptions = function () {\n    return BidirectionalBar.getDefaultOptions();\n  };\n  /**\n   * 获取对称条形图的适配器\n   */\n\n\n  BidirectionalBar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /** 对称条形图分类字段 */\n\n\n  BidirectionalBar.SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n  return BidirectionalBar;\n}(Plot);\n\nexport { BidirectionalBar };","map":{"version":3,"sources":["../../../src/plots/bidirectional-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { deepAssign, findViewById } from '../../utils';\nimport { BidirectionalBarOptions } from './types';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\n\nexport type { BidirectionalBarOptions };\n\nexport class BidirectionalBar extends Plot<BidirectionalBarOptions> {\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<BidirectionalBarOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      syncViewPadding,\n    });\n  }\n\n  /** 对称条形图分类字段 */\n  static SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n\n  /** 图表类型 */\n  public type: string = 'bidirectional-bar';\n\n  /**\n   * @override\n   */\n  public changeData(data = []) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    // 更新options\n    this.updateOption({ data });\n    const { xField, yField, layout } = this.options;\n    // 处理数据\n    const groupData: any[] = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    const [firstViewData, secondViewData] = groupData;\n    const firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    const secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  protected getDefaultOptions() {\n    return BidirectionalBar.getDefaultOptions();\n  }\n\n  /**\n   * 获取对称条形图的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<BidirectionalBarOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}