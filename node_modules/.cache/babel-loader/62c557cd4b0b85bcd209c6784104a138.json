{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray, get } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { treemap } from '../../utils/hierarchy/treemap';\nexport function findInteraction(interactions, interactionType) {\n  if (!isArray(interactions)) return undefined;\n  return interactions.find(function (i) {\n    return i.type === interactionType;\n  });\n}\nexport function enableInteraction(interactions, interactionType) {\n  var interaction = findInteraction(interactions, interactionType);\n  return interaction && interaction.enable !== false;\n}\n/**\n * 是否允许下钻交互\n * @param interactions\n * @param interactionType\n * @returns\n */\n\nexport function enableDrillInteraction(options) {\n  var interactions = options.interactions,\n      drilldown = options.drilldown; // 兼容旧版本, treemap-drill-down\n\n  return get(drilldown, 'enabled') || enableInteraction(interactions, 'treemap-drill-down');\n}\nexport function resetDrillDown(chart) {\n  var drillDownInteraction = chart.interactions['drill-down'];\n  if (!drillDownInteraction) return; // @ts-ignore\n\n  var drillDownAction = drillDownInteraction.context.actions.find(function (i) {\n    return i.name === 'drill-down-action';\n  });\n  drillDownAction.reset();\n}\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      enableDrillDown = options.enableDrillDown,\n      hierarchyConfig = options.hierarchyConfig;\n  var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    if (node.depth === 0) {\n      return null;\n    } // 开启下钻，仅加载 depth === 1 的数据\n\n\n    if (enableDrillDown && node.depth !== 1) {\n      return null;\n    } // 不开启下钻，加载所有叶子节点\n\n\n    if (!enableDrillDown && node.children) {\n      return null;\n    } // path 信息仅挑选必要祖先元素属性，因为在有些属性是不必要(x, y), 或是不准确的(下钻时的 depth)，不对外透出\n\n\n    var curPath = node.ancestors().map(function (n) {\n      return {\n        data: n.data,\n        height: n.height,\n        value: n.value\n      };\n    }); // 在下钻树图中，每次绘制的是当前层级信息，将父元素的层级信息（data.path) 做一层拼接。\n\n    var path = enableDrillDown && isArray(data.path) ? curPath.concat(data.path.slice(1)) : curPath;\n    var nodeInfo = Object.assign({}, node.data, __assign({\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n      path: path\n    }, node));\n\n    if (!node.data[colorField] && node.parent) {\n      var ancestorNode = node.ancestors().find(function (n) {\n        return n.data[colorField];\n      });\n      nodeInfo[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];\n    } else {\n      nodeInfo[colorField] = node.data[colorField];\n    }\n\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      enableDrillDown: enableDrillDown\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/plots/treemap/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray, get } from '@antv/util';\nimport { View } from '@antv/g2';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { Interaction } from '../../types/interaction';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { TreemapOptions } from './types';\n\nexport function findInteraction(\n  interactions: TreemapOptions['interactions'],\n  interactionType: string\n): undefined | Interaction {\n  if (!isArray(interactions)) return undefined;\n  return interactions.find((i) => i.type === interactionType);\n}\n\nexport function enableInteraction(interactions: TreemapOptions['interactions'], interactionType: string): boolean {\n  const interaction = findInteraction(interactions, interactionType);\n  return interaction && interaction.enable !== false;\n}\n\n/**\n * 是否允许下钻交互\n * @param interactions\n * @param interactionType\n * @returns\n */\nexport function enableDrillInteraction(options: TreemapOptions): boolean {\n  const { interactions, drilldown } = options;\n  // 兼容旧版本, treemap-drill-down\n  return get(drilldown, 'enabled') || enableInteraction(interactions, 'treemap-drill-down');\n}\n\nexport function resetDrillDown(chart: View) {\n  const drillDownInteraction = chart.interactions['drill-down'];\n\n  if (!drillDownInteraction) return;\n\n  // @ts-ignore\n  const drillDownAction = drillDownInteraction.context.actions.find((i) => i.name === 'drill-down-action');\n\n  drillDownAction.reset();\n}\n\ninterface TransformDataOptions {\n  data: TreemapOptions['data'];\n  colorField: TreemapOptions['colorField'];\n  enableDrillDown: boolean;\n  hierarchyConfig: TreemapOptions['hierarchyConfig'];\n}\n\nexport function transformData(options: TransformDataOptions) {\n  const { data, colorField, enableDrillDown, hierarchyConfig } = options;\n\n  const nodes = treemap(data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n\n    // 开启下钻，仅加载 depth === 1 的数据\n    if (enableDrillDown && node.depth !== 1) {\n      return null;\n    }\n\n    // 不开启下钻，加载所有叶子节点\n    if (!enableDrillDown && node.children) {\n      return null;\n    }\n\n    // path 信息仅挑选必要祖先元素属性，因为在有些属性是不必要(x, y), 或是不准确的(下钻时的 depth)，不对外透出\n    const curPath = node.ancestors().map((n) => ({\n      data: n.data,\n      height: n.height,\n      value: n.value,\n    }));\n    // 在下钻树图中，每次绘制的是当前层级信息，将父元素的层级信息（data.path) 做一层拼接。\n    const path = enableDrillDown && isArray(data.path) ? curPath.concat(data.path.slice(1)) : curPath;\n\n    const nodeInfo = Object.assign({}, node.data, {\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n      path,\n      ...node,\n    });\n    if (!node.data[colorField] && node.parent) {\n      const ancestorNode = node.ancestors().find((n) => n.data[colorField]);\n      nodeInfo[colorField] = ancestorNode?.data[colorField];\n    } else {\n      nodeInfo[colorField] = node.data[colorField];\n    }\n\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, colorField, enableDrillDown };\n    result.push(nodeInfo);\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}