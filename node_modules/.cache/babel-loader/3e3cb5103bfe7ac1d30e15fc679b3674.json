{"ast":null,"code":"import { isArray, isString, filter } from '@antv/util';\n/** export 一些字段常量 */\n\n/** 在同层级，同一父节点下的节点索引顺序 */\n\nexport var NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\n\nexport var CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\n\nexport var NODE_ANCESTORS_FIELD = 'nodeAncestor';\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nexport function getField(options, defaultField) {\n  var field = options.field,\n      fields = options.fields;\n\n  if (isString(field)) {\n    return field;\n  }\n\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n\n  console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n\n  if (isString(fields)) {\n    return fields;\n  }\n\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n\n  if (defaultField) {\n    return defaultField;\n  }\n\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\nexport function getAllNodes(root) {\n  var nodes = [];\n\n  if (root && root.each) {\n    var parent_1;\n    var index_1; // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n\n    root.each(function (node) {\n      var _a, _b;\n\n      if (node.parent !== parent_1) {\n        parent_1 = node.parent;\n        index_1 = 0;\n      } else {\n        index_1 += 1;\n      }\n\n      var ancestors = filter((((_a = node.ancestors) === null || _a === void 0 ? void 0 : _a.call(node)) || []).map(function (d) {\n        return nodes.find(function (n) {\n          return n.name === d.name;\n        }) || d;\n      }), function (_a) {\n        var depth = _a.depth;\n        return depth > 0 && depth < node.depth;\n      });\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = ((_b = node.children) === null || _b === void 0 ? void 0 : _b.length) || 0;\n      node[NODE_INDEX_FIELD] = index_1;\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode(function (node) {\n      nodes.push(node);\n    });\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["../../../src/utils/hierarchy/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray, isString, filter } from '@antv/util';\n\n/** export 一些字段常量 */\n/** 在同层级，同一父节点下的节点索引顺序 */\nexport const NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\nexport const CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\nexport const NODE_ANCESTORS_FIELD = 'nodeAncestor';\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\n\ninterface Options {\n  field?: string | string[];\n  fields?: string | string[];\n}\n\nexport function getField(options: Options, defaultField?: string): string {\n  const { field, fields } = options;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\n\nexport function getAllNodes(root: any) {\n  const nodes: any[] = [];\n  if (root && root.each) {\n    let parent;\n    let index;\n    // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n    root.each((node: any) => {\n      if (node.parent !== parent) {\n        parent = node.parent;\n        index = 0;\n      } else {\n        index += 1;\n      }\n      const ancestors = filter(\n        (node.ancestors?.() || []).map((d: any) => nodes.find((n) => n.name === d.name) || d),\n        ({ depth }) => depth > 0 && depth < node.depth\n      );\n\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = node.children?.length || 0;\n      node[NODE_INDEX_FIELD] = index;\n\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode((node: any) => {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}