{"ast":null,"code":"export default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      trigger: 'mouseenter',\n      activeState: 'active',\n      inactiveState: 'inactive',\n      resetSelected: false,\n      shouldUpdate: function shouldUpdate() {\n        return true;\n      }\n    };\n  },\n  getEvents: function getEvents() {\n    if (this.get('trigger') === 'mouseenter') {\n      return {\n        'node:mouseenter': 'setAllItemStates',\n        'combo:mouseenter': 'setAllItemStates',\n        'node:mouseleave': 'clearActiveState',\n        'combo:mouseleave': 'clearActiveState'\n      };\n    }\n\n    return {\n      'node:click': 'setAllItemStates',\n      'combo:click': 'setAllItemStates',\n      'canvas:click': 'clearAllItemStates'\n    };\n  },\n  setAllItemStates: function setAllItemStates(e) {\n    var item = e.item;\n    var graph = this.graph;\n    this.item = item;\n\n    if (!this.shouldUpdate(e.item, {\n      event: e,\n      action: 'activate'\n    })) {\n      return;\n    }\n\n    var self = this;\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var combos = graph.getCombos();\n    var edges = graph.getEdges();\n    var vEdges = graph.get('vedges');\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      var hasSelected = node.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(node, 'selected', false);\n        }\n      }\n\n      graph.setItemState(node, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(node, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      var hasSelected = combo.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(combo, 'selected', false);\n        }\n      }\n\n      graph.setItemState(combo, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(combo, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.setItemState(edge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(edge, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.setItemState(vEdge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(vEdge, inactiveState, true);\n      }\n    }\n\n    if (inactiveState) {\n      graph.setItemState(item, inactiveState, false);\n    }\n\n    graph.setItemState(item, activeState, true);\n    var rEdges = item.getEdges();\n    var rEdgeLegnth = rEdges.length;\n\n    for (var i = 0; i < rEdgeLegnth; i++) {\n      var edge = rEdges[i];\n      var otherEnd = void 0;\n\n      if (edge.getSource() === item) {\n        otherEnd = edge.getTarget();\n      } else {\n        otherEnd = edge.getSource();\n      }\n\n      if (inactiveState) {\n        graph.setItemState(otherEnd, inactiveState, false);\n      }\n\n      graph.setItemState(otherEnd, activeState, true);\n      graph.setItemState(edge, inactiveState, false);\n      graph.setItemState(edge, activeState, true);\n      edge.toFront();\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item,\n      action: 'activate'\n    });\n  },\n  clearActiveState: function clearActiveState(e) {\n    var self = this;\n    var graph = self.get('graph');\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var nodes = graph.getNodes();\n    var combos = graph.getCombos();\n    var edges = graph.getEdges();\n    var vEdges = graph.get('vedges');\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      graph.clearItemStates(combo, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.clearItemStates(vEdge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  },\n  clearAllItemStates: function clearAllItemStates(e) {\n    var self = this;\n    var graph = self.graph;\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-pc/es/behavior/activate-relations.js"],"names":["getDefaultCfg","trigger","activeState","inactiveState","resetSelected","shouldUpdate","getEvents","get","setAllItemStates","e","item","graph","event","action","self","nodes","getNodes","combos","getCombos","edges","getEdges","vEdges","nodeLength","length","comboLength","edgeLength","vEdgeLength","i","node","hasSelected","hasState","setItemState","combo","edge","vEdge","rEdges","rEdgeLegnth","otherEnd","getSource","getTarget","toFront","emit","clearActiveState","autoPaint","setAutoPaint","clearItemStates","paint","clearAllItemStates"],"mappings":"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","sourcesContent":["export default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      trigger: 'mouseenter',\n      activeState: 'active',\n      inactiveState: 'inactive',\n      resetSelected: false,\n      shouldUpdate: function shouldUpdate() {\n        return true;\n      }\n    };\n  },\n  getEvents: function getEvents() {\n    if (this.get('trigger') === 'mouseenter') {\n      return {\n        'node:mouseenter': 'setAllItemStates',\n        'combo:mouseenter': 'setAllItemStates',\n        'node:mouseleave': 'clearActiveState',\n        'combo:mouseleave': 'clearActiveState'\n      };\n    }\n\n    return {\n      'node:click': 'setAllItemStates',\n      'combo:click': 'setAllItemStates',\n      'canvas:click': 'clearAllItemStates'\n    };\n  },\n  setAllItemStates: function setAllItemStates(e) {\n    var item = e.item;\n    var graph = this.graph;\n    this.item = item;\n\n    if (!this.shouldUpdate(e.item, {\n      event: e,\n      action: 'activate'\n    })) {\n      return;\n    }\n\n    var self = this;\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var combos = graph.getCombos();\n    var edges = graph.getEdges();\n    var vEdges = graph.get('vedges');\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      var hasSelected = node.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(node, 'selected', false);\n        }\n      }\n\n      graph.setItemState(node, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(node, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      var hasSelected = combo.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(combo, 'selected', false);\n        }\n      }\n\n      graph.setItemState(combo, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(combo, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.setItemState(edge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(edge, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.setItemState(vEdge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(vEdge, inactiveState, true);\n      }\n    }\n\n    if (inactiveState) {\n      graph.setItemState(item, inactiveState, false);\n    }\n\n    graph.setItemState(item, activeState, true);\n    var rEdges = item.getEdges();\n    var rEdgeLegnth = rEdges.length;\n\n    for (var i = 0; i < rEdgeLegnth; i++) {\n      var edge = rEdges[i];\n      var otherEnd = void 0;\n\n      if (edge.getSource() === item) {\n        otherEnd = edge.getTarget();\n      } else {\n        otherEnd = edge.getSource();\n      }\n\n      if (inactiveState) {\n        graph.setItemState(otherEnd, inactiveState, false);\n      }\n\n      graph.setItemState(otherEnd, activeState, true);\n      graph.setItemState(edge, inactiveState, false);\n      graph.setItemState(edge, activeState, true);\n      edge.toFront();\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item,\n      action: 'activate'\n    });\n  },\n  clearActiveState: function clearActiveState(e) {\n    var self = this;\n    var graph = self.get('graph');\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var nodes = graph.getNodes();\n    var combos = graph.getCombos();\n    var edges = graph.getEdges();\n    var vEdges = graph.get('vedges');\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      graph.clearItemStates(combo, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.clearItemStates(vEdge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  },\n  clearAllItemStates: function clearAllItemStates(e) {\n    var self = this;\n    var graph = self.graph;\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}