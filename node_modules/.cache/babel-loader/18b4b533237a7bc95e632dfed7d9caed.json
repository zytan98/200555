{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { getProgressData } from '../progress/utils';\nimport { adaptor, statistic } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constants';\n\nvar RingProgress =\n/** @class */\nfunction (_super) {\n  __extends(RingProgress, _super);\n\n  function RingProgress() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'ring-process';\n    return _this;\n  }\n  /**\n   * 获取默认配置项\n   * 供外部使用\n   */\n\n\n  RingProgress.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  RingProgress.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    this.chart.data(getProgressData(percent)); // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n\n  RingProgress.prototype.getDefaultOptions = function () {\n    return RingProgress.getDefaultOptions();\n  };\n  /**\n   * 获取 环形进度图 的适配器\n   */\n\n\n  RingProgress.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return RingProgress;\n}(Plot);\n\nexport { RingProgress };","map":{"version":3,"sources":["../../../src/plots/ring-progress/index.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,EAA2B,KAA3B,QAAwC,UAAxC;AACA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,OAAT,EAAkB,SAAlB,QAAmC,WAAnC;AACA,SAAS,eAAT,QAAgC,aAAhC;;AAIA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AASE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,cAAf;;AAiCR;AA1CC;;;AAGG;;;AACI,EAAA,YAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAOP;;;AAGG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAiC;AAC/B,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,kBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,kBAA5C,EAAgE,IAAhE,CAFF;AAIA,SAAK,YAAL,CAAkB;AAAE,MAAA,OAAO,EAAA;AAAT,KAAlB;AAEA,SAAK,KAAL,CAAW,IAAX,CAAgB,eAAe,CAAC,OAAD,CAA/B,EAP+B,CAQ/B;;AACA,IAAA,SAAS,CAAC;AAAE,MAAA,KAAK,EAAE,KAAK,KAAd;AAAqB,MAAA,OAAO,EAAE,KAAK;AAAnC,KAAD,EAA+C,IAA/C,CAAT;AAEA,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,iBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,iBAA5C,EAA+D,IAA/D,CAFF;AAID,GAfM;;AAiBG,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,YAAY,CAAC,iBAAb,EAAP;AACD,GAFS;AAIV;;AAEG;;;AACO,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,YAAA;AAAC,CA3CD,CAAkC,IAAlC,CAAA","sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { getProgressData } from '../progress/utils';\nimport { RingProgressOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constants';\n\nexport type { RingProgressOptions };\n\nexport class RingProgress extends Plot<RingProgressOptions> {\n  /**\n   * 获取默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<RingProgressOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'ring-process';\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n    this.updateOption({ percent });\n\n    this.chart.data(getProgressData(percent));\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({ chart: this.chart, options: this.options }, true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  protected getDefaultOptions() {\n    return RingProgress.getDefaultOptions();\n  }\n\n  /**\n   * 获取 环形进度图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<RingProgressOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}