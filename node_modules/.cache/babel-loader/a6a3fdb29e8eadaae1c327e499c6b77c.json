{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { getCanvasPattern } from '../utils/pattern';\nimport { deepAssign } from '../utils';\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\n\nexport function pattern(key) {\n  var _this = this;\n\n  return function (params) {\n    var _a;\n\n    var options = params.options,\n        chart = params.chart;\n    var patternOption = options.pattern; // 没有 pattern 配置，则直接返回\n\n    if (!patternOption) {\n      return params;\n    }\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n\n\n    var style = function (datum) {\n      var _a, _b, _c;\n\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      var defaultColor = chart.getTheme().defaultColor;\n      var color = defaultColor;\n      var colorAttribute = (_b = (_a = chart.geometries) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute('color');\n\n      if (colorAttribute) {\n        var colorField = colorAttribute.getFields()[0];\n        var seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, ((_c = colorAttribute.values) === null || _c === void 0 ? void 0 : _c[0]) || defaultColor);\n      }\n\n      var pattern = patternOption; // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(_this, datum, color);\n      } // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n\n\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, {\n          cfg: {\n            backgroundColor: color\n          }\n        }, pattern));\n      }\n\n      var styleOption = options[key];\n      return __assign(__assign({}, typeof styleOption === 'function' ? styleOption.call.apply(styleOption, __spreadArrays([_this, datum], args)) : styleOption || {}), {\n        fill: pattern || color\n      });\n    };\n\n    return deepAssign({}, params, {\n      options: (_a = {}, _a[key] = style, _a)\n    });\n  };\n}","map":{"version":3,"sources":["../../src/adaptor/pattern.ts"],"names":[],"mappings":"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","sourcesContent":["import { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { getCanvasPattern } from '../utils/pattern';\nimport { Params } from '../core/adaptor';\nimport { Datum, Options, StyleAttr } from '../types';\nimport { deepAssign } from '../utils';\n\n/**\n * 使用 Pattern 通道的 options，要求有 colorField/seriesField/stackField 作为分类字段（进行颜色映射）\n */\ntype OptionsRequiredInPattern = Omit<Options, 'data'>;\n\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\nexport function pattern(key: string) {\n  return <O extends OptionsRequiredInPattern = OptionsRequiredInPattern>(params: Params<O>): Params<O> => {\n    const { options, chart } = params;\n    const { pattern: patternOption } = options;\n\n    // 没有 pattern 配置，则直接返回\n    if (!patternOption) {\n      return params;\n    }\n\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n\n    const style: StyleAttr = (datum?: Datum, ...args: any[]) => {\n      const { defaultColor } = chart.getTheme();\n      let color = defaultColor;\n\n      const colorAttribute = chart.geometries?.[0]?.getAttribute('color');\n      if (colorAttribute) {\n        const colorField = colorAttribute.getFields()[0];\n        const seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, colorAttribute.values?.[0] || defaultColor);\n      }\n\n      let pattern: CanvasPattern = patternOption as CanvasPattern;\n\n      // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(this, datum, color);\n      }\n\n      // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, { cfg: { backgroundColor: color } }, pattern));\n      }\n\n      const styleOption = options[key] as StyleAttr;\n\n      return {\n        ...(typeof styleOption === 'function' ? styleOption.call(this, datum, ...args) : styleOption || {}),\n        fill: pattern || color,\n      };\n    };\n\n    return deepAssign({}, params, { options: { [key]: style } });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}