{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { gl } from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { filterMap, formatMap, wrapModeMap } from './constants';\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\n\nvar WebGPUTexture2D = /*#__PURE__*/function () {\n  function WebGPUTexture2D(engine, options) {\n    _classCallCheck(this, WebGPUTexture2D);\n\n    this.engine = engine;\n    this.options = options;\n    this.texture = void 0;\n    this.sampler = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.createTexture();\n  }\n\n  _createClass(WebGPUTexture2D, [{\n    key: \"get\",\n    value: function get() {\n      return {\n        texture: this.texture,\n        sampler: this.sampler\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update() {// TODO\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height; // TODO: it seems that Texture doesn't support `resize`\n\n      if (width !== this.width || height !== this.height) {\n        this.destroy();\n        this.createTexture();\n      }\n\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.texture) {\n        this.texture.destroy();\n      }\n    }\n  }, {\n    key: \"createTexture\",\n    value: function createTexture() {\n      var _this$options = this.options,\n          data = _this$options.data,\n          _this$options$type = _this$options.type,\n          type = _this$options$type === void 0 ? gl.UNSIGNED_BYTE : _this$options$type,\n          width = _this$options.width,\n          height = _this$options.height,\n          _this$options$flipY = _this$options.flipY,\n          flipY = _this$options$flipY === void 0 ? false : _this$options$flipY,\n          _this$options$format = _this$options.format,\n          format = _this$options$format === void 0 ? gl.RGBA : _this$options$format,\n          _this$options$mipmap = _this$options.mipmap,\n          mipmap = _this$options$mipmap === void 0 ? false : _this$options$mipmap,\n          _this$options$wrapS = _this$options.wrapS,\n          wrapS = _this$options$wrapS === void 0 ? gl.CLAMP_TO_EDGE : _this$options$wrapS,\n          _this$options$wrapT = _this$options.wrapT,\n          wrapT = _this$options$wrapT === void 0 ? gl.CLAMP_TO_EDGE : _this$options$wrapT,\n          _this$options$aniso = _this$options.aniso,\n          aniso = _this$options$aniso === void 0 ? 0 : _this$options$aniso,\n          _this$options$alignme = _this$options.alignment,\n          alignment = _this$options$alignme === void 0 ? 1 : _this$options$alignme,\n          _this$options$premult = _this$options.premultiplyAlpha,\n          premultiplyAlpha = _this$options$premult === void 0 ? false : _this$options$premult,\n          _this$options$mag = _this$options.mag,\n          mag = _this$options$mag === void 0 ? gl.NEAREST : _this$options$mag,\n          _this$options$min = _this$options.min,\n          min = _this$options$min === void 0 ? gl.NEAREST : _this$options$min,\n          _this$options$colorSp = _this$options.colorSpace,\n          colorSpace = _this$options$colorSp === void 0 ? gl.BROWSER_DEFAULT_WEBGL : _this$options$colorSp,\n          usage = _this$options.usage;\n      this.width = width;\n      this.height = height;\n      this.texture = this.engine.device.createTexture({\n        size: [width, height, 1],\n        // TODO: arrayLayerCount is deprecated: use size.depth\n        // arrayLayerCount: 1,\n        mipLevelCount: 1,\n        // TODO: https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\n        sampleCount: 1,\n        dimension: WebGPUConstants.TextureDimension.E2d,\n        format: formatMap[format],\n        // could throw texture binding usage mismatch\n        usage: usage || WebGPUConstants.TextureUsage.Sampled | WebGPUConstants.TextureUsage.CopyDst\n      });\n\n      if (!usage || usage & WebGPUConstants.TextureUsage.Sampled) {\n        this.sampler = this.engine.device.createSampler({\n          addressModeU: wrapModeMap[wrapS],\n          addressModeV: wrapModeMap[wrapT],\n          addressModeW: wrapModeMap[wrapS],\n          // TODO: same as addressModeU\n          magFilter: filterMap[mag],\n          minFilter: filterMap[min],\n          maxAnisotropy: aniso // @see https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\n\n        });\n      }\n    }\n  }]);\n\n  return WebGPUTexture2D;\n}();\n\nexport { WebGPUTexture2D as default };","map":{"version":3,"sources":["../../src/webgpu/WebGPUTexture2D.ts"],"names":["WebGPUTexture2D","texture","sampler","width","height","engine","options","data","type","gl","flipY","format","mipmap","wrapS","wrapT","aniso","alignment","premultiplyAlpha","mag","min","colorSpace","usage","size","mipLevelCount","sampleCount","dimension","WebGPUConstants","formatMap","CopyDst","addressModeU","wrapModeMap","addressModeV","addressModeW","magFilter","filterMap","minFilter","maxAnisotropy"],"mappings":"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","sourcesContent":["import {\n  gl,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n} from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { WebGPUEngine } from '.';\nimport { filterMap, formatMap, wrapModeMap } from './constants';\n\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\nexport default class WebGPUTexture2D implements ITexture2D {\n  private texture: GPUTexture;\n  private sampler: GPUSampler;\n  private width: number;\n  private height: number;\n\n  constructor(\n    private engine: WebGPUEngine,\n    private options: ITexture2DInitializationOptions,\n  ) {\n    this.createTexture();\n  }\n\n  public get() {\n    return {\n      texture: this.texture,\n      sampler: this.sampler,\n    };\n  }\n  public update() {\n    // TODO\n  }\n\n  public resize({ width, height }: { width: number; height: number }): void {\n    // TODO: it seems that Texture doesn't support `resize`\n    if (width !== this.width || height !== this.height) {\n      this.destroy();\n      this.createTexture();\n    }\n    this.width = width;\n    this.height = height;\n  }\n\n  public destroy() {\n    if (this.texture) {\n      this.texture.destroy();\n    }\n  }\n\n  private createTexture() {\n    const {\n      data,\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      mipmap = false,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso = 0,\n      alignment = 1,\n      premultiplyAlpha = false,\n      mag = gl.NEAREST,\n      min = gl.NEAREST,\n      colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n      usage,\n    } = this.options;\n    this.width = width;\n    this.height = height;\n\n    this.texture = this.engine.device.createTexture({\n      size: [width, height, 1],\n      // TODO: arrayLayerCount is deprecated: use size.depth\n      // arrayLayerCount: 1,\n      mipLevelCount: 1, // TODO: https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\n      sampleCount: 1,\n      dimension: WebGPUConstants.TextureDimension.E2d,\n      format: formatMap[format],\n      // could throw texture binding usage mismatch\n      usage:\n        usage ||\n        WebGPUConstants.TextureUsage.Sampled |\n          WebGPUConstants.TextureUsage.CopyDst,\n    });\n\n    if (!usage || usage & WebGPUConstants.TextureUsage.Sampled) {\n      this.sampler = this.engine.device.createSampler({\n        addressModeU: wrapModeMap[wrapS],\n        addressModeV: wrapModeMap[wrapT],\n        addressModeW: wrapModeMap[wrapS], // TODO: same as addressModeU\n        magFilter: filterMap[mag],\n        minFilter: filterMap[min],\n        maxAnisotropy: aniso, // @see https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}