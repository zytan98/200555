{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isString } from '@antv/util';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR, INDICATEOR_VIEW_ID, RANGE_VIEW_ID } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      range = options.range,\n      radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle,\n      axis = options.axis,\n      indicator = options.indicator,\n      gaugeStyle = options.gaugeStyle,\n      type = options.type,\n      meter = options.meter;\n  var color = range.color,\n      rangeWidth = range.width; // 指标 & 指针\n  // 如果开启在应用\n\n  if (indicator) {\n    var indicatorData = getIndicatorData(percent);\n    var v1 = chart.createView({\n      id: INDICATEOR_VIEW_ID\n    });\n    v1.data(indicatorData);\n    v1.point().position(PERCENT + \"*1\").shape(indicator.shape || 'gauge-indicator') // 传入指针的样式到自定义 shape 中\n    .customInfo({\n      defaultColor: chart.getTheme().defaultColor,\n      indicator: indicator\n    });\n    v1.coordinate('polar', {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radius: innerRadius * radius\n    });\n    v1.axis(PERCENT, axis); // 一部分应用到 scale 中\n\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  } // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n\n\n  var rangeData = getRangeData(percent, options.range);\n  var v2 = chart.createView({\n    id: RANGE_VIEW_ID\n  });\n  v2.data(rangeData);\n  var rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n  var ext = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null\n      },\n      args: {\n        zIndexReversed: true\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth\n    }\n  }).ext;\n  var geometry = ext.geometry; // 传入到自定义 shape 中\n\n  geometry.customInfo({\n    meter: meter\n  });\n  v2.coordinate('polar', {\n    innerRadius: innerRadius,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  }).transpose();\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  return flow(scale((_a = {\n    range: {\n      min: 0,\n      max: 1,\n      maxLimit: 1,\n      minLimit: 0\n    }\n  }, _a[PERCENT] = {}, _a)))(params);\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nfunction statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n\n  if (statistic) {\n    var contentOption = statistic.content;\n    var transformContent = void 0; // 当设置 content 的时候，设置默认样式\n\n    if (contentOption) {\n      transformContent = deepAssign({}, {\n        content: (percent * 100).toFixed(2) + \"%\",\n        style: {\n          opacity: 0.75,\n          fontSize: '30px',\n          lineHeight: 1,\n          textAlign: 'center',\n          color: 'rgba(44,53,66,0.85)'\n        }\n      }, contentOption);\n    }\n\n    renderGaugeStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      })\n    }, {\n      percent: percent\n    });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\n\n\nfunction other(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 对外暴露的 adaptor\n */\n\n\nexport { statistic };\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, // animation 配置必须在 createView 之前，不然无法让子 View 生效\n  animation, geometry, meta, statistic, interaction, annotation(), other // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"sources":["../../../src/plots/gauge/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { isString } from '@antv/util';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR, INDICATEOR_VIEW_ID, RANGE_VIEW_ID } from './constants';\nimport { GaugeOptions } from './types';\nimport { getIndicatorData, getRangeData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { percent, range, radius, innerRadius, startAngle, endAngle, axis, indicator, gaugeStyle, type, meter } =\n    options;\n  const { color, width: rangeWidth } = range;\n\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    const indicatorData = getIndicatorData(percent);\n\n    const v1 = chart.createView({ id: INDICATEOR_VIEW_ID });\n    v1.data(indicatorData);\n\n    v1.point()\n      .position(`${PERCENT}*1`)\n      .shape(indicator.shape || 'gauge-indicator')\n      // 传入指针的样式到自定义 shape 中\n      .customInfo({\n        defaultColor: chart.getTheme().defaultColor,\n        indicator,\n      });\n\n    v1.coordinate('polar', {\n      startAngle,\n      endAngle,\n      radius: innerRadius * radius, // 外部的 innerRadius * radius = 这里的 radius\n    });\n\n    v1.axis(PERCENT, axis);\n    // 一部分应用到 scale 中\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  }\n\n  // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n  const rangeData = getRangeData(percent, options.range);\n  const v2 = chart.createView({ id: RANGE_VIEW_ID });\n  v2.data(rangeData);\n\n  const rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n\n  const { ext } = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null,\n      },\n      args: {\n        zIndexReversed: true,\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth,\n    },\n  });\n\n  const geometry = ext.geometry as Geometry;\n  // 传入到自定义 shape 中\n  geometry.customInfo({ meter });\n\n  v2.coordinate('polar', {\n    innerRadius,\n    radius,\n    startAngle,\n    endAngle,\n  }).transpose();\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  return flow(\n    scale({\n      range: {\n        min: 0,\n        max: 1,\n        maxLimit: 1,\n        minLimit: 0,\n      },\n      [PERCENT]: {},\n    })\n  )(params);\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params: Params<GaugeOptions>, updated?: boolean): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { statistic, percent } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic) {\n    const { content: contentOption } = statistic;\n    let transformContent;\n    // 当设置 content 的时候，设置默认样式\n    if (contentOption) {\n      transformContent = deepAssign(\n        {},\n        {\n          content: `${(percent * 100).toFixed(2)}%`,\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: 1,\n            textAlign: 'center',\n            color: 'rgba(44,53,66,0.85)',\n          },\n        },\n        contentOption\n      );\n    }\n    renderGaugeStatistic(chart, { statistic: { ...statistic, content: transformContent } }, { percent });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction other(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart } = params;\n\n  chart.legend(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 对外暴露的 adaptor\n */\nexport { statistic };\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<GaugeOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    // animation 配置必须在 createView 之前，不然无法让子 View 生效\n    animation,\n    geometry,\n    meta,\n    statistic,\n    interaction,\n    annotation(),\n    other\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}