{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { gl } from '../gl';\nexport var RenderPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.GeometryComponentManager), _dec4 = inject(IDENTIFIER.MaterialComponentManager), _dec5 = inject(IDENTIFIER.CullableComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec7 = inject(IDENTIFIER.HierarchyComponentManager), _dec8 = inject(IDENTIFIER.Systems), _dec9 = named(IDENTIFIER.FrameGraphSystem), _dec10 = inject(IDENTIFIER.RenderEngine), _dec11 = inject(IDENTIFIER.ResourcePool), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function RenderPass() {\n    var _this = this;\n\n    _classCallCheck(this, RenderPass);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"geometry\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"material\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"cullable\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"frameGraphSystem\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor9, this);\n\n    this.modelCache = {};\n\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'color buffer', {\n        width: 1,\n        height: 1,\n        usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      };\n    };\n\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var resourceNode, framebuffer, _iterator, _step, view, canvas;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resourceNode = fg.getResourceNode(pass.data.output);\n                framebuffer = _this.resourcePool.getOrCreateResource(resourceNode.resource); // initialize model of each mesh\n\n                _iterator = _createForOfIteratorHelper(views);\n                _context.prev = 3;\n\n                _iterator.s();\n\n              case 5:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 11;\n                  break;\n                }\n\n                view = _step.value;\n                _context.next = 9;\n                return _this.initView(view);\n\n              case 9:\n                _context.next = 5;\n                break;\n\n              case 11:\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](3);\n\n                _iterator.e(_context.t0);\n\n              case 16:\n                _context.prev = 16;\n\n                _iterator.f();\n\n                return _context.finish(16);\n\n              case 19:\n                canvas = _this.engine.getCanvas();\n                framebuffer.resize({\n                  width: canvas.width,\n                  height: canvas.height\n                });\n\n                _this.engine.setScissor({\n                  enable: false\n                });\n\n                _this.engine.clear({\n                  framebuffer: framebuffer,\n                  color: views[0].getClearColor(),\n                  // TODO: use clearColor defined in view\n                  depth: 1\n                });\n\n                _this.engine.useFramebuffer(framebuffer, function () {\n                  var _iterator2 = _createForOfIteratorHelper(views),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var view = _step2.value; // must do rendering in a sync way\n\n                      _this.renderView(view);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                });\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 13, 16, 19]]);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(RenderPass, [{\n    key: \"renderView\",\n    value: function renderView(view) {\n      var scene = view.getScene();\n      var camera = view.getCamera(); // get VP matrix from camera\n\n      var viewMatrix = camera.getViewTransform();\n      var viewProjectionMatrix = mat4.multiply(mat4.create(), camera.getPerspective(), viewMatrix); // TODO: use cached planes if camera was not changed\n\n      camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n      var _view$getViewport = view.getViewport(),\n          x = _view$getViewport.x,\n          y = _view$getViewport.y,\n          width = _view$getViewport.width,\n          height = _view$getViewport.height;\n\n      this.engine.viewport({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }); // this.engine.setScissor({\n      //   enable: true,\n      //   box: { x, y, width, height },\n      // });\n      // this.engine.clear({\n      //   // framebuffer,\n      //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n      //   depth: 1,\n      // });\n\n      var _iterator3 = _createForOfIteratorHelper(scene.getEntities()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var meshEntity = _step3.value;\n          this.renderMesh(meshEntity, {\n            camera: camera,\n            view: view,\n            viewMatrix: viewMatrix\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"renderMesh\",\n    value: function renderMesh(meshEntity, _ref2) {\n      var camera = _ref2.camera,\n          view = _ref2.view,\n          viewMatrix = _ref2.viewMatrix;\n      var mesh = this.mesh.getComponentByEntity(meshEntity);\n\n      if (!mesh || !mesh.visible) {\n        return;\n      } // filter meshes with frustum culling\n      // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n      //   return;\n      // }\n\n\n      var material = mesh.material;\n      var geometry = mesh.geometry; // geometry 在自己的 System 中完成脏检查后的更新\n\n      if (!geometry || geometry.dirty || !material) {\n        return;\n      } // get model matrix from mesh\n\n\n      var transform = this.transform.getComponentByEntity(meshEntity);\n      var modelViewMatrix = mat4.multiply(mat4.create(), viewMatrix, transform.worldTransform);\n\n      var _view$getViewport2 = view.getViewport(),\n          width = _view$getViewport2.width,\n          height = _view$getViewport2.height; // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n\n\n      material.setUniform({\n        projectionMatrix: camera.getPerspective(),\n        modelViewMatrix: modelViewMatrix,\n        modelMatrix: transform.worldTransform,\n        viewMatrix: viewMatrix,\n        cameraPosition: camera.getPosition(),\n        u_viewport: [width, height]\n      });\n\n      if (mesh.model) {\n        mesh.model.draw({\n          uniforms: material.uniforms.reduce(function (cur, prev) {\n            cur[prev.name] = prev.data;\n            return cur;\n          }, {})\n        });\n        material.uniforms.forEach(function (u) {\n          u.dirty = false;\n        });\n        material.dirty = false;\n      }\n    }\n  }, {\n    key: \"initMesh\",\n    value: function () {\n      var _initMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(meshEntity, view) {\n        var mesh, material, geometry, modelCacheKey, _this$engine, createModel, createAttribute, modelInitializationOptions;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                mesh = this.mesh.getComponentByEntity(meshEntity);\n\n                if (mesh) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                material = mesh.material;\n                geometry = mesh.geometry;\n\n                if (!(!geometry || geometry.dirty || !material)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                if (mesh.model) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                modelCacheKey = \"m-\".concat(material.entity, \"-g-\").concat(geometry.entity);\n\n                if (!this.modelCache[modelCacheKey]) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                mesh.model = this.modelCache[modelCacheKey];\n                return _context2.abrupt(\"return\");\n\n              case 12:\n                material.setUniform({\n                  projectionMatrix: 1,\n                  modelViewMatrix: 1,\n                  modelMatrix: 1,\n                  viewMatrix: 1,\n                  cameraPosition: 1,\n                  u_viewport: 1\n                });\n                _this$engine = this.engine, createModel = _this$engine.createModel, createAttribute = _this$engine.createAttribute;\n                modelInitializationOptions = {\n                  vs: material.vertexShaderGLSL,\n                  fs: material.fragmentShaderGLSL,\n                  defines: material.defines,\n                  attributes: geometry.attributes.reduce(function (cur, prev) {\n                    if (prev.data && prev.buffer) {\n                      cur[prev.name] = createAttribute({\n                        buffer: prev.buffer,\n                        attributes: prev.attributes,\n                        arrayStride: prev.arrayStride,\n                        stepMode: prev.stepMode,\n                        divisor: prev.stepMode === 'vertex' ? 0 : 1\n                      });\n                    }\n\n                    return cur;\n                  }, {}),\n                  uniforms: material.uniforms.reduce(function (cur, prev) {\n                    cur[prev.name] = prev.data;\n                    return cur;\n                  }, {}),\n                  scissor: {\n                    enable: true,\n                    // @ts-ignore\n                    box: function box() {\n                      return view.getViewport();\n                    }\n                  }\n                };\n\n                if (material.cull) {\n                  modelInitializationOptions.cull = material.cull;\n                }\n\n                if (material.depth) {\n                  modelInitializationOptions.depth = material.depth;\n                }\n\n                if (material.blend) {\n                  modelInitializationOptions.blend = material.blend;\n                }\n\n                if (geometry.indicesBuffer) {\n                  modelInitializationOptions.elements = geometry.indicesBuffer;\n                }\n\n                if (geometry.maxInstancedCount) {\n                  modelInitializationOptions.instances = geometry.maxInstancedCount;\n                  modelInitializationOptions.count = geometry.vertexCount || 3;\n                }\n\n                _context2.next = 22;\n                return createModel(modelInitializationOptions);\n\n              case 22:\n                mesh.model = _context2.sent;\n                this.modelCache[modelCacheKey] = mesh.model;\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initMesh(_x4, _x5) {\n        return _initMesh.apply(this, arguments);\n      }\n\n      return initMesh;\n    }()\n  }, {\n    key: \"initView\",\n    value: function () {\n      var _initView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(view) {\n        var scene, _iterator4, _step4, meshEntity;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                scene = view.getScene();\n                _iterator4 = _createForOfIteratorHelper(scene.getEntities());\n                _context3.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                meshEntity = _step4.value;\n                _context3.next = 8;\n                return this.initMesh(meshEntity, view);\n\n              case 8:\n                _context3.next = 4;\n                break;\n\n              case 10:\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _iterator4.e(_context3.t0);\n\n              case 15:\n                _context3.prev = 15;\n\n                _iterator4.f();\n\n                return _context3.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 12, 15, 18]]);\n      }));\n\n      function initView(_x6) {\n        return _initView.apply(this, arguments);\n      }\n\n      return initView;\n    }()\n  }]);\n\n  return RenderPass;\n}(), _class3.IDENTIFIER = 'Render Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"frameGraphSystem\", [_dec8, _dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec10], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../../src/components/renderer/passes/RenderPass.ts"],"names":["injectable","RenderPass","inject","IDENTIFIER","named","output","width","height","usage","gl","COPY_SRC","pass","passNode","resourceNode","fg","framebuffer","view","canvas","enable","color","views","depth","scene","camera","viewMatrix","viewProjectionMatrix","mat4","x","y","meshEntity","mesh","material","geometry","transform","modelViewMatrix","projectionMatrix","modelMatrix","cameraPosition","u_viewport","uniforms","cur","prev","u","modelCacheKey","createModel","createAttribute","modelInitializationOptions","vs","fs","defines","attributes","buffer","arrayStride","stepMode","divisor","scissor","box"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { Entity } from '../../..';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { GeometryComponent } from '../../geometry/GeometryComponent';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { CullableComponent } from '../../mesh/CullableComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { HierarchyComponent } from '../../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../../scenegraph/TransformComponent';\nimport { gl } from '../gl';\nimport { IAttribute } from '../IAttribute';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { ICamera, IRendererService, IView } from '../IRendererService';\nimport { IUniform } from '../IUniform';\nimport { IRenderPass } from './IRenderPass';\n\nexport interface RenderPassData {\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class RenderPass implements IRenderPass<RenderPassData> {\n  public static IDENTIFIER = 'Render Pass';\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private modelCache: Record<string, IModel> = {};\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<RenderPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'color buffer', {\n      width: 1,\n      height: 1,\n      usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<RenderPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    const resourceNode = fg.getResourceNode(pass.data.output);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    // initialize model of each mesh\n    for (const view of views) {\n      await this.initView(view);\n    }\n\n    const canvas = this.engine.getCanvas();\n    framebuffer.resize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    this.engine.setScissor({\n      enable: false,\n    });\n    this.engine.clear({\n      framebuffer,\n      color: views[0].getClearColor(), // TODO: use clearColor defined in view\n      depth: 1,\n    });\n\n    this.engine.useFramebuffer(framebuffer, () => {\n      for (const view of views) {\n        // must do rendering in a sync way\n        this.renderView(view);\n      }\n    });\n  };\n\n  public renderView(view: IView) {\n    const scene = view.getScene();\n    const camera = view.getCamera();\n\n    // get VP matrix from camera\n    const viewMatrix = camera.getViewTransform()!;\n    const viewProjectionMatrix = mat4.multiply(\n      mat4.create(),\n      camera.getPerspective(),\n      viewMatrix,\n    );\n    // TODO: use cached planes if camera was not changed\n    camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n    const { x, y, width, height } = view.getViewport();\n    this.engine.viewport({\n      x,\n      y,\n      width,\n      height,\n    });\n    // this.engine.setScissor({\n    //   enable: true,\n    //   box: { x, y, width, height },\n    // });\n    // this.engine.clear({\n    //   // framebuffer,\n    //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n    //   depth: 1,\n    // });\n\n    for (const meshEntity of scene.getEntities()) {\n      this.renderMesh(meshEntity, {\n        camera,\n        view,\n        viewMatrix,\n      });\n    }\n  }\n\n  private renderMesh(\n    meshEntity: Entity,\n    {\n      camera,\n      view,\n      viewMatrix,\n    }: {\n      camera: ICamera;\n      view: IView;\n      viewMatrix: mat4;\n    },\n  ) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh || !mesh.visible) {\n      return;\n    }\n\n    // filter meshes with frustum culling\n    // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n    //   return;\n    // }\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // geometry 在自己的 System 中完成脏检查后的更新\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    // get model matrix from mesh\n    const transform = this.transform.getComponentByEntity(meshEntity)!;\n\n    const modelViewMatrix = mat4.multiply(\n      mat4.create(),\n      viewMatrix,\n      transform.worldTransform,\n    );\n    const { width, height } = view.getViewport();\n\n    // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n    material.setUniform({\n      projectionMatrix: camera.getPerspective(),\n      modelViewMatrix,\n      modelMatrix: transform.worldTransform,\n      viewMatrix,\n      cameraPosition: camera.getPosition(),\n      u_viewport: [width, height],\n    });\n\n    if (mesh.model) {\n      mesh.model.draw({\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n      });\n\n      material.uniforms.forEach((u) => {\n        u.dirty = false;\n      });\n      material.dirty = false;\n    }\n  }\n\n  private async initMesh(meshEntity: Entity, view: IView) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh) {\n      return;\n    }\n\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    if (!mesh.model) {\n      const modelCacheKey = `m-${material.entity}-g-${geometry.entity}`;\n      if (this.modelCache[modelCacheKey]) {\n        mesh.model = this.modelCache[modelCacheKey];\n        return;\n      }\n\n      material.setUniform({\n        projectionMatrix: 1,\n        modelViewMatrix: 1,\n        modelMatrix: 1,\n        viewMatrix: 1,\n        cameraPosition: 1,\n        u_viewport: 1,\n      });\n\n      const { createModel, createAttribute } = this.engine;\n      const modelInitializationOptions: IModelInitializationOptions = {\n        vs: material.vertexShaderGLSL,\n        fs: material.fragmentShaderGLSL,\n        defines: material.defines,\n        attributes: geometry.attributes.reduce(\n          (cur: { [key: string]: IAttribute }, prev) => {\n            if (prev.data && prev.buffer) {\n              cur[prev.name] = createAttribute({\n                buffer: prev.buffer,\n                attributes: prev.attributes,\n                arrayStride: prev.arrayStride,\n                stepMode: prev.stepMode,\n                divisor: prev.stepMode === 'vertex' ? 0 : 1,\n              });\n            }\n            return cur;\n          },\n          {},\n        ),\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n        scissor: {\n          enable: true,\n          // @ts-ignore\n          box: () => view.getViewport(),\n        },\n      };\n\n      if (material.cull) {\n        modelInitializationOptions.cull = material.cull;\n      }\n      if (material.depth) {\n        modelInitializationOptions.depth = material.depth;\n      }\n      if (material.blend) {\n        modelInitializationOptions.blend = material.blend;\n      }\n\n      if (geometry.indicesBuffer) {\n        modelInitializationOptions.elements = geometry.indicesBuffer;\n      }\n\n      if (geometry.maxInstancedCount) {\n        modelInitializationOptions.instances = geometry.maxInstancedCount;\n        modelInitializationOptions.count = geometry.vertexCount || 3;\n      }\n\n      mesh.model = await createModel(modelInitializationOptions);\n      this.modelCache[modelCacheKey] = mesh.model;\n    }\n  }\n\n  private async initView(view: IView) {\n    const scene = view.getScene();\n    for (const meshEntity of scene.getEntities()) {\n      await this.initMesh(meshEntity, view);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}