{"ast":null,"code":"import { isNumber } from './';\nimport { getEdgeTerminal } from './math';\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\n\nexport const proccessToFunc = (value, defaultV) => {\n  let func;\n\n  if (!value) {\n    func = () => {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = () => {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n\n  return func;\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\n\nexport const buildTextureData = (nodes, edges) => {\n  const dataArray = [];\n  const nodeDict = [];\n  const mapIdPos = {};\n  let i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n  }\n\n  let maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    const offset = dataArray.length;\n    const dests = nodeDict[i];\n    const len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = dests.length;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n\nexport const buildTextureDataWithTwoEdgeAttr = (nodes, edges, attrs1, attrs2) => {\n  const dataArray = [];\n  const nodeDict = [];\n  const mapIdPos = {};\n  let i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[source]].push(attrs1(e));\n    nodeDict[mapIdPos[source]].push(attrs2(e));\n    nodeDict[mapIdPos[source]].push(0);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    nodeDict[mapIdPos[target]].push(attrs1(e));\n    nodeDict[mapIdPos[target]].push(attrs2(e));\n    nodeDict[mapIdPos[target]].push(0);\n  }\n\n  let maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    const offset = dataArray.length;\n    const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n\n    const len = dests.length; // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      dataArray.push(+dest);\n    }\n  } // 不是 4 的倍数，填充 0\n\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\n\nexport const attributesToTextureData = (attributeNames, items) => {\n  const dataArray = [];\n  const attributeNum = attributeNames.length;\n  const attributteStringMap = {};\n  items.forEach(item => {\n    attributeNames.forEach((name, i) => {\n      if (attributteStringMap[item[name]] === undefined) {\n        attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n      }\n\n      dataArray.push(attributteStringMap[item[name]]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  });\n  return {\n    array: new Float32Array(dataArray),\n    count: Object.keys(attributteStringMap).length\n  };\n};\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\n\nexport const arrayToTextureData = valueArrays => {\n  const dataArray = [];\n  const attributeNum = valueArrays.length;\n  const itemNum = valueArrays[0].length;\n\n  for (let j = 0; j < itemNum; j++) {\n    valueArrays.forEach((valueArray, i) => {\n      dataArray.push(valueArray[j]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  }\n\n  return new Float32Array(dataArray);\n};","map":{"version":3,"sources":["../../src/util/gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isNumber } from './';\nimport { getEdgeTerminal } from './math';\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\nexport const proccessToFunc = (value, defaultV) => {\n    let func;\n    if (!value) {\n        func = () => {\n            return defaultV || 1;\n        };\n    }\n    else if (isNumber(value)) {\n        func = () => {\n            return value;\n        };\n    }\n    else {\n        func = value;\n    }\n    return func;\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\nexport const buildTextureData = (nodes, edges) => {\n    const dataArray = [];\n    const nodeDict = [];\n    const mapIdPos = {};\n    let i = 0;\n    for (i = 0; i < nodes.length; i++) {\n        const n = nodes[i];\n        mapIdPos[n.id] = i;\n        dataArray.push(n.x);\n        dataArray.push(n.y);\n        dataArray.push(0);\n        dataArray.push(0);\n        nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n        const e = edges[i];\n        const source = getEdgeTerminal(e, 'source');\n        const target = getEdgeTerminal(e, 'target');\n        nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n        nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    }\n    let maxEdgePerVetex = 0;\n    for (i = 0; i < nodes.length; i++) {\n        const offset = dataArray.length;\n        const dests = nodeDict[i];\n        const len = dests.length;\n        dataArray[i * 4 + 2] = offset;\n        dataArray[i * 4 + 3] = dests.length;\n        maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n        for (let j = 0; j < len; ++j) {\n            const dest = dests[j];\n            dataArray.push(+dest);\n        }\n    }\n    while (dataArray.length % 4 !== 0) {\n        dataArray.push(0);\n    }\n    return {\n        maxEdgePerVetex,\n        array: new Float32Array(dataArray),\n    };\n};\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\nexport const buildTextureDataWithTwoEdgeAttr = (nodes, edges, attrs1, attrs2) => {\n    const dataArray = [];\n    const nodeDict = [];\n    const mapIdPos = {};\n    let i = 0;\n    for (i = 0; i < nodes.length; i++) {\n        const n = nodes[i];\n        mapIdPos[n.id] = i;\n        dataArray.push(n.x);\n        dataArray.push(n.y);\n        dataArray.push(0);\n        dataArray.push(0);\n        nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n        const e = edges[i];\n        const source = getEdgeTerminal(e, 'source');\n        const target = getEdgeTerminal(e, 'target');\n        nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n        nodeDict[mapIdPos[source]].push(attrs1(e));\n        nodeDict[mapIdPos[source]].push(attrs2(e));\n        nodeDict[mapIdPos[source]].push(0);\n        nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n        nodeDict[mapIdPos[target]].push(attrs1(e));\n        nodeDict[mapIdPos[target]].push(attrs2(e));\n        nodeDict[mapIdPos[target]].push(0);\n    }\n    let maxEdgePerVetex = 0;\n    for (i = 0; i < nodes.length; i++) {\n        const offset = dataArray.length;\n        const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n        const len = dests.length;\n        // dataArray[i * 4 + 2] = offset;\n        // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n        // pack offset & length into float32: offset 20bit, length 12bit\n        dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n        dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n        maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n        for (let j = 0; j < len; ++j) {\n            const dest = dests[j];\n            dataArray.push(+dest);\n        }\n    }\n    // 不是 4 的倍数，填充 0\n    while (dataArray.length % 4 !== 0) {\n        dataArray.push(0);\n    }\n    return {\n        maxEdgePerVetex,\n        array: new Float32Array(dataArray),\n    };\n};\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const attributesToTextureData = (attributeNames, items) => {\n    const dataArray = [];\n    const attributeNum = attributeNames.length;\n    const attributteStringMap = {};\n    items.forEach((item) => {\n        attributeNames.forEach((name, i) => {\n            if (attributteStringMap[item[name]] === undefined) {\n                attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n            }\n            dataArray.push(attributteStringMap[item[name]]);\n            // insure each node's attributes take inter number of grids\n            if (i === attributeNum - 1) {\n                while (dataArray.length % 4 !== 0) {\n                    dataArray.push(0);\n                }\n            }\n        });\n    });\n    return {\n        array: new Float32Array(dataArray),\n        count: Object.keys(attributteStringMap).length\n    };\n};\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const arrayToTextureData = (valueArrays) => {\n    const dataArray = [];\n    const attributeNum = valueArrays.length;\n    const itemNum = valueArrays[0].length;\n    for (let j = 0; j < itemNum; j++) {\n        valueArrays.forEach((valueArray, i) => {\n            dataArray.push(valueArray[j]);\n            // insure each node's attributes take inter number of grids\n            if (i === attributeNum - 1) {\n                while (dataArray.length % 4 !== 0) {\n                    dataArray.push(0);\n                }\n            }\n        });\n    }\n    return new Float32Array(dataArray);\n};\n//# sourceMappingURL=gpu.js.map"]},"metadata":{},"sourceType":"module"}