{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { isNumber } from '@antv/util';\nimport { flow, deepAssign, pick } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { findGeometry, transformLabel } from '../../utils';\nimport { getQuadrantDefaultConfig, getPath, getMeta } from './util';\n/**\n * 散点图默认美观\n * ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param params\n * @returns params\n */\n\nexport function transformOptions(options) {\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      xField = options.xField,\n      yField = options.yField;\n\n  if (data.length) {\n    // x y 字段知否只有一个值，如果只有一个值，则进行优化\n    var isOneX = true;\n    var isOneY = true;\n    var prev = data[0];\n    var curr = void 0;\n\n    for (var i = 1; i < data.length; i++) {\n      curr = data[i];\n\n      if (prev[xField] !== curr[xField]) {\n        isOneX = false;\n      }\n\n      if (prev[yField] !== curr[yField]) {\n        isOneY = false;\n      } // 如果都不是 oneValue，那么可提前跳出循环\n\n\n      if (!isOneX && !isOneY) {\n        break;\n      }\n\n      prev = curr;\n    }\n\n    var keys = [];\n    isOneX && keys.push(xField);\n    isOneY && keys.push(yField);\n    var meta_1 = pick(getMeta(options), keys);\n    return deepAssign({}, options, {\n      meta: meta_1\n    });\n  }\n\n  return options;\n}\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      type = options.type,\n      color = options.color,\n      shape = options.shape,\n      pointStyle = options.pointStyle,\n      shapeField = options.shapeField,\n      colorField = options.colorField,\n      xField = options.xField,\n      yField = options.yField,\n      sizeField = options.sizeField;\n  var size = options.size;\n  var tooltip = options.tooltip;\n\n  if (sizeField) {\n    if (!size) {\n      size = [2, 8];\n    }\n\n    if (isNumber(size)) {\n      size = [size, size];\n    }\n  }\n\n  if (tooltip && !tooltip.fields) {\n    tooltip = __assign(__assign({}, tooltip), {\n      fields: [xField, yField, colorField, sizeField, shapeField]\n    });\n  } // 数据\n\n\n  chart.data(data); // geometry\n\n  point(deepAssign({}, params, {\n    options: {\n      seriesField: colorField,\n      point: {\n        color: color,\n        shape: shape,\n        size: size,\n        style: pointStyle\n      },\n      tooltip: tooltip\n    }\n  }));\n  var geometry = findGeometry(chart, 'point'); // 数据调整\n\n  if (type) {\n    geometry.adjust(type);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  var newOptions = transformOptions(options);\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(deepAssign({}, params, {\n    options: newOptions\n  }));\n}\n/**\n * axis 配置\n * @param params\n */\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nfunction legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      shapeField = options.shapeField,\n      sizeField = options.sizeField,\n      shapeLegend = options.shapeLegend,\n      sizeLegend = options.sizeLegend;\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n\n  var showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  } // 优先取 shapeLegend, 否则取 legend\n\n\n  if (shapeField) {\n    if (shapeLegend) {\n      chart.legend(shapeField, shapeLegend);\n    } else {\n      chart.legend(shapeField, shapeLegend === false ? false : legend);\n    }\n  }\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend ? sizeLegend : false);\n  }\n  /** 默认不展示 shape 图例，当 shapeLegend 为 undefined 也不展示图例 */\n\n  /** 默认没有 sizeField，则隐藏连续图例 */\n\n\n  if (!showLegend && !shapeLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var scatterGeometry = findGeometry(chart, 'point'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    scatterGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    scatterGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * annotation 配置\n * - 特殊 annotation: quadrant(四象限)\n * @param params\n */\n\n\nfunction scatterAnnotation(params) {\n  var options = params.options;\n  var quadrant = options.quadrant;\n  var annotationOptions = [];\n\n  if (quadrant) {\n    var _a = quadrant.xBaseline,\n        xBaseline = _a === void 0 ? 0 : _a,\n        _b = quadrant.yBaseline,\n        yBaseline = _b === void 0 ? 0 : _b,\n        labels_1 = quadrant.labels,\n        regionStyle_1 = quadrant.regionStyle,\n        lineStyle = quadrant.lineStyle;\n    var defaultConfig_1 = getQuadrantDefaultConfig(xBaseline, yBaseline); // 仅支持四象限\n\n    var quadrants = new Array(4).join(',').split(',');\n    quadrants.forEach(function (_, index) {\n      annotationOptions.push(__assign(__assign({\n        type: 'region',\n        top: false\n      }, defaultConfig_1.regionStyle[index].position), {\n        style: deepAssign({}, defaultConfig_1.regionStyle[index].style, regionStyle_1 === null || regionStyle_1 === void 0 ? void 0 : regionStyle_1[index])\n      }), __assign({\n        type: 'text',\n        top: true\n      }, deepAssign({}, defaultConfig_1.labelStyle[index], labels_1 === null || labels_1 === void 0 ? void 0 : labels_1[index])));\n    }); // 生成坐标轴\n\n    annotationOptions.push({\n      type: 'line',\n      top: false,\n      start: ['min', yBaseline],\n      end: ['max', yBaseline],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    }, {\n      type: 'line',\n      top: false,\n      start: [xBaseline, 'min'],\n      end: [xBaseline, 'max'],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    });\n  }\n\n  return flow(annotation(annotationOptions))(params);\n} // 趋势线\n\n\nfunction regressionLine(params) {\n  var options = params.options,\n      chart = params.chart;\n  var regressionLine = options.regressionLine;\n\n  if (regressionLine) {\n    var style_1 = regressionLine.style,\n        _a = regressionLine.top,\n        top_1 = _a === void 0 ? false : _a;\n    var defaultStyle_1 = {\n      stroke: '#9ba29a',\n      lineWidth: 2,\n      opacity: 0.5\n    };\n    chart.annotation().shape({\n      top: top_1,\n      render: function (container, view) {\n        var group = container.addGroup({\n          id: chart.id + \"-regression-line\",\n          name: 'regression-line-group'\n        });\n        var path = getPath({\n          view: view,\n          options: options\n        });\n        group.addShape('path', {\n          name: 'regression-line',\n          attrs: __assign(__assign({\n            path: path\n          }, defaultStyle_1), style_1)\n        });\n      }\n    });\n  }\n\n  return params;\n}\n/**\n * tooltip 配置\n * @param params\n */\n\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip) {\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n/**\n * 散点图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, axis, legend, tooltip, label, // 需要在 interaction 前面\n  brushInteraction, interaction, scatterAnnotation, animation, theme, regressionLine)(params);\n}","map":{"version":3,"sources":["../../../src/plots/scatter/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNumber } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, pick } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { findGeometry, transformLabel } from '../../utils';\nimport { getQuadrantDefaultConfig, getPath, getMeta } from './util';\nimport { ScatterOptions } from './types';\n\n/**\n * 散点图默认美观\n * ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param params\n * @returns params\n */\nexport function transformOptions(options: ScatterOptions): ScatterOptions {\n  const { data = [], xField, yField } = options;\n\n  if (data.length) {\n    // x y 字段知否只有一个值，如果只有一个值，则进行优化\n    let isOneX = true;\n    let isOneY = true;\n\n    let prev = data[0];\n    let curr;\n\n    for (let i = 1; i < data.length; i++) {\n      curr = data[i];\n\n      if (prev[xField] !== curr[xField]) {\n        isOneX = false;\n      }\n\n      if (prev[yField] !== curr[yField]) {\n        isOneY = false;\n      }\n\n      // 如果都不是 oneValue，那么可提前跳出循环\n      if (!isOneX && !isOneY) {\n        break;\n      }\n\n      prev = curr;\n    }\n\n    const keys = [];\n    isOneX && keys.push(xField);\n    isOneY && keys.push(yField);\n\n    const meta = pick(getMeta(options), keys);\n\n    return deepAssign({}, options, { meta });\n  }\n\n  return options;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { data, type, color, shape, pointStyle, shapeField, colorField, xField, yField, sizeField } = options;\n  let { size } = options;\n\n  let { tooltip } = options;\n\n  if (sizeField) {\n    if (!size) {\n      size = [2, 8];\n    }\n    if (isNumber(size)) {\n      size = [size, size];\n    }\n  }\n\n  if (tooltip && !tooltip.fields) {\n    tooltip = {\n      ...tooltip,\n      fields: [xField, yField, colorField, sizeField, shapeField],\n    };\n  }\n  // 数据\n  chart.data(data);\n\n  // geometry\n  point(\n    deepAssign({}, params, {\n      options: {\n        seriesField: colorField,\n        point: {\n          color,\n          shape,\n          size,\n          style: pointStyle,\n        },\n        tooltip,\n      },\n    })\n  );\n\n  const geometry = findGeometry(chart, 'point');\n\n  // 数据调整\n  if (type) {\n    geometry.adjust(type);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  const newOptions = transformOptions(options);\n  return flow(\n    scale({\n      [xField]: xAxis,\n      [yField]: yAxis,\n    })\n  )(deepAssign({}, params, { options: newOptions }));\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { legend, colorField, shapeField, sizeField, shapeLegend, sizeLegend } = options;\n\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n  const showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  }\n\n  // 优先取 shapeLegend, 否则取 legend\n  if (shapeField) {\n    if (shapeLegend) {\n      chart.legend(shapeField, shapeLegend);\n    } else {\n      chart.legend(shapeField, shapeLegend === false ? false : legend);\n    }\n  }\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend ? sizeLegend : false);\n  }\n\n  /** 默认不展示 shape 图例，当 shapeLegend 为 undefined 也不展示图例 */\n  /** 默认没有 sizeField，则隐藏连续图例 */\n  if (!showLegend && !shapeLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const scatterGeometry = findGeometry(chart, 'point');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    scatterGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    scatterGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * annotation 配置\n * - 特殊 annotation: quadrant(四象限)\n * @param params\n */\nfunction scatterAnnotation(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options } = params;\n  const { quadrant } = options;\n\n  const annotationOptions = [];\n\n  if (quadrant) {\n    const { xBaseline = 0, yBaseline = 0, labels, regionStyle, lineStyle } = quadrant;\n    const defaultConfig = getQuadrantDefaultConfig(xBaseline, yBaseline);\n    // 仅支持四象限\n    const quadrants = new Array(4).join(',').split(',');\n    quadrants.forEach((_: string, index: number) => {\n      annotationOptions.push(\n        {\n          type: 'region',\n          top: false,\n          ...defaultConfig.regionStyle[index].position,\n          style: deepAssign({}, defaultConfig.regionStyle[index].style, regionStyle?.[index]),\n        },\n        {\n          type: 'text',\n          top: true,\n          ...deepAssign({}, defaultConfig.labelStyle[index], labels?.[index]),\n        }\n      );\n    });\n    // 生成坐标轴\n    annotationOptions.push(\n      {\n        type: 'line',\n        top: false,\n        start: ['min', yBaseline],\n        end: ['max', yBaseline],\n        style: deepAssign({}, defaultConfig.lineStyle, lineStyle),\n      },\n      {\n        type: 'line',\n        top: false,\n        start: [xBaseline, 'min'],\n        end: [xBaseline, 'max'],\n        style: deepAssign({}, defaultConfig.lineStyle, lineStyle),\n      }\n    );\n  }\n\n  return flow(annotation(annotationOptions))(params);\n}\n\n// 趋势线\nfunction regressionLine(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options, chart } = params;\n  const { regressionLine } = options;\n  if (regressionLine) {\n    const { style, top = false } = regressionLine;\n    const defaultStyle = {\n      stroke: '#9ba29a',\n      lineWidth: 2,\n      opacity: 0.5,\n    };\n    chart.annotation().shape({\n      top,\n      render: (container, view) => {\n        const group = container.addGroup({\n          id: `${chart.id}-regression-line`,\n          name: 'regression-line-group',\n        });\n        const path = getPath({\n          view,\n          options,\n        });\n        group.addShape('path', {\n          name: 'regression-line',\n          attrs: {\n            path,\n            ...defaultStyle,\n            ...style,\n          },\n        });\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip) {\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n\n/**\n * 散点图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ScatterOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    meta,\n    axis,\n    legend,\n    tooltip,\n    label,\n    // 需要在 interaction 前面\n    brushInteraction,\n    interaction,\n    scatterAnnotation,\n    animation,\n    theme,\n    regressionLine\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}