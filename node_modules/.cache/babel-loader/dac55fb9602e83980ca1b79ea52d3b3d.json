{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { interaction, animation, theme, scale, pattern } from '../../adaptor/common';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { getLiquidData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      liquidStyle = options.liquidStyle,\n      radius = options.radius,\n      outline = options.outline,\n      wave = options.wave,\n      shape = options.shape;\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(getLiquidData(percent));\n  var color = options.color || chart.getTheme().defaultColor;\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  var background = chart.getTheme().background;\n  var customInfo = {\n    radius: radius,\n    outline: outline,\n    wave: wave,\n    shape: shape,\n    background: background\n  }; // 将 radius 传入到自定义 shape 中\n\n  geometry.customInfo(customInfo); // 关闭组件\n\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nexport function statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n\n  var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n    return (v * 100).toFixed(2) + \"%\";\n  };\n\n  var contentOpt = statistic.content;\n\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n    });\n  }\n\n  renderStatistic(chart, {\n    statistic: __assign(__assign({}, statistic), {\n      content: contentOpt\n    }),\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}","map":{"version":3,"sources":["../../../src/plots/liquid/adaptor.ts"],"names":[],"mappings":";AACA,SAAS,GAAT,EAAc,KAAd,QAA2B,YAA3B;AACA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,KAAjC,EAAwC,KAAxC,EAA+C,OAA/C,QAA8D,sBAA9D;AAEA,SAAS,IAAT,EAAe,UAAf,EAA2B,eAA3B,QAAkD,aAAlD;AACA,SAAS,QAAT,QAAyB,0BAAzB;AAEA,SAAS,aAAT,QAA8B,SAA9B;AAEA;;;AAGG;;AACH,SAAS,QAAT,CAAkB,MAAlB,EAA+C;AACrC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,OAAO,GAAgD,OAAO,CAAvD,OAAP;AAAA,MAAS,WAAW,GAAmC,OAAO,CAA1C,WAApB;AAAA,MAAsB,MAAM,GAA2B,OAAO,CAAlC,MAA5B;AAAA,MAA8B,OAAO,GAAkB,OAAO,CAAzB,OAArC;AAAA,MAAuC,IAAI,GAAY,OAAO,CAAnB,IAA3C;AAAA,MAA6C,KAAK,GAAK,OAAO,CAAZ,KAAlD;AAER,EAAA,KAAK,CAAC,KAAN,CAAY;AACV,IAAA,OAAO,EAAE;AACP,MAAA,GAAG,EAAE,CADE;AAEP,MAAA,GAAG,EAAE;AAFE;AADC,GAAZ;AAOA,EAAA,KAAK,CAAC,IAAN,CAAW,aAAa,CAAC,OAAD,CAAxB;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,KAAR,IAAiB,KAAK,CAAC,QAAN,GAAiB,YAAhD;AAEA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,MADD;AAEP,MAAA,MAAM,EAAE,SAFD;AAGP;AACA;AACA,MAAA,UAAU,EAAE,MALL;AAMP,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAA,KADG;AAER,QAAA,KAAK,EAAE,WAFC;AAGR,QAAA,KAAK,EAAE;AAHC;AANH;AADsB,GAAb,CAApB;AAcQ,MAAA,GAAG,GAAK,QAAQ,CAAC,CAAD,CAAR,CAAL,GAAH;AACR,MAAM,QAAQ,GAAG,GAAG,CAAC,QAArB;AACQ,MAAA,UAAU,GAAK,KAAK,CAAC,QAAN,GAAL,UAAV;AACR,MAAM,UAAU,GAAe;AAC7B,IAAA,MAAM,EAAA,MADuB;AAE7B,IAAA,OAAO,EAAA,OAFsB;AAG7B,IAAA,IAAI,EAAA,IAHyB;AAI7B,IAAA,KAAK,EAAA,KAJwB;AAK7B,IAAA,UAAU,EAAA;AALmB,GAA/B,CAhC6C,CAwC7C;;AACA,EAAA,QAAQ,CAAC,UAAT,CAAoB,UAApB,EAzC6C,CA2C7C;;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,KAAb;AACA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,KAAd;AAEA,SAAO,MAAP;AACD;AAED;;;AAGG;;;AACH,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAmD,OAAnD,EAAoE;AAChE,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,SAAS,GAAoB,OAAO,CAA3B,SAAT;AAAA,MAAW,OAAO,GAAW,OAAO,CAAlB,OAAlB;AAAA,MAAoB,IAAI,GAAK,OAAO,CAAZ,IAAxB,CAFgE,CAIxE;;AACA,EAAA,KAAK,CAAC,aAAN,CAAoB,YAApB,EAAkC,KAAlC,CAAwC,IAAxC;;AAEA,MAAM,aAAa,GAAG,GAAG,CAAC,IAAD,EAAO,CAAC,SAAD,EAAY,WAAZ,CAAP,CAAH,IAAwC,UAAC,CAAD,EAAE;AAAK,WAAG,CAAC,CAAC,GAAG,GAAL,EAAU,OAAV,CAAkB,CAAlB,IAAH,GAAA;AAA0B,GAA/F;;AACA,MAAI,UAAU,GAAG,SAAS,CAAC,OAA3B;;AACA,MAAI,UAAJ,EAAgB;AACd,IAAA,UAAU,GAAG,UAAU,CAAC,EAAD,EAAK,UAAL,EAAiB;AACtC,MAAA,OAAO,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,OAAZ,CAAN,GAA6B,UAAU,CAAC,OAAxC,GAAkD,aAAa,CAAC,OAAD;AADlC,KAAjB,CAAvB;AAGD;;AAED,EAAA,eAAe,CAAC,KAAD,EAAQ;AAAE,IAAA,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,SAAP,CAAA,EAAgB;AAAE,MAAA,OAAO,EAAE;AAAX,KAAhB,CAAX;AAAoD,IAAA,QAAQ,EAAE;AAA9D,GAAR,EAAkF;AAAE,IAAA,OAAO,EAAA;AAAT,GAAlF,CAAf;;AAEA,MAAI,OAAJ,EAAa;AACX,IAAA,KAAK,CAAC,MAAN,CAAa,IAAb;AACD;;AAED,SAAO,MAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAA+C;AACnD;AACA,SAAO,IAAI,CAAC,KAAD,EAAQ,OAAO,CAAC,aAAD,CAAf,EAAgC,QAAhC,EAA0C,SAA1C,EAAqD,KAAK,CAAC,EAAD,CAA1D,EAAgE,SAAhE,EAA2E,WAA3E,CAAJ,CAA4F,MAA5F,CAAP;AACD","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isNil } from '@antv/util';\nimport { interaction, animation, theme, scale, pattern } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { LiquidOptions, CustomInfo } from './types';\nimport { getLiquidData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, liquidStyle, radius, outline, wave, shape } = options;\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(getLiquidData(percent));\n\n  const color = options.color || chart.getTheme().defaultColor;\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n  const { background } = chart.getTheme();\n  const customInfo: CustomInfo = {\n    radius,\n    outline,\n    wave,\n    shape,\n    background,\n  };\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params: Params<LiquidOptions>, updated?: boolean): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n  let contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n    });\n  }\n\n  renderStatistic(chart, { statistic: { ...statistic, content: contentOpt }, plotType: 'liquid' }, { percent });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}