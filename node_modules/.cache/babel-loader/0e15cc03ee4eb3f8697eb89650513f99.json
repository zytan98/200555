{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { getUnitPatternSize, initCanvas, drawBackground, getSymbolsPosition, transformMatrix, getPixelRatio } from './util';\n/**\n * dotPattern的默认配置\n */\n\nexport var defaultDotPatternCfg = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n  isStagger: true\n};\n/**\n * 绘制圆点\n *\n * @param context\n * @param cfg\n * @param x 圆点中心坐标x\n * @param y 圆点中心坐标y\n */\n\nexport function drawDot(context, cfg, x, y) {\n  var size = cfg.size,\n      fill = cfg.fill,\n      lineWidth = cfg.lineWidth,\n      stroke = cfg.stroke,\n      fillOpacity = cfg.fillOpacity;\n  context.beginPath();\n  context.globalAlpha = fillOpacity;\n  context.fillStyle = fill;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.arc(x, y, size / 2, 0, 2 * Math.PI, false);\n  context.fill();\n\n  if (lineWidth) {\n    context.stroke();\n  }\n\n  context.closePath();\n}\n/**\n * 创建 dot pattern，返回 HTMLCanvasElement\n *\n * @param cfg\n * @returns HTMLCanvasElement\n */\n\nexport function createDotPattern(cfg) {\n  var dotCfg = deepAssign({}, defaultDotPatternCfg, cfg);\n  var size = dotCfg.size,\n      padding = dotCfg.padding,\n      isStagger = dotCfg.isStagger,\n      rotation = dotCfg.rotation; // 计算 画布大小，dots的位置\n\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var dots = getSymbolsPosition(unitSize, isStagger); // 初始化 patternCanvas\n\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d'); // 绘制 background，dots\n\n  drawBackground(ctx, dotCfg, unitSize);\n\n  for (var _i = 0, dots_1 = dots; _i < dots_1.length; _i++) {\n    var _a = dots_1[_i],\n        x = _a[0],\n        y = _a[1];\n    drawDot(ctx, dotCfg, x, y);\n  }\n\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}","map":{"version":3,"sources":["../../../src/utils/pattern/dot.ts"],"names":[],"mappings":"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","sourcesContent":["import { DotPatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport {\n  getUnitPatternSize,\n  initCanvas,\n  drawBackground,\n  getSymbolsPosition,\n  transformMatrix,\n  getPixelRatio,\n} from './util';\n\n/**\n * dotPattern的默认配置\n */\nexport const defaultDotPatternCfg = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n  isStagger: true,\n};\n\n/**\n * 绘制圆点\n *\n * @param context\n * @param cfg\n * @param x 圆点中心坐标x\n * @param y 圆点中心坐标y\n */\nexport function drawDot(context: CanvasRenderingContext2D, cfg: DotPatternCfg, x: number, y: number) {\n  const { size, fill, lineWidth, stroke, fillOpacity } = cfg;\n\n  context.beginPath();\n  context.globalAlpha = fillOpacity;\n  context.fillStyle = fill;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.arc(x, y, size / 2, 0, 2 * Math.PI, false);\n  context.fill();\n  if (lineWidth) {\n    context.stroke();\n  }\n  context.closePath();\n}\n\n/**\n * 创建 dot pattern，返回 HTMLCanvasElement\n *\n * @param cfg\n * @returns HTMLCanvasElement\n */\nexport function createDotPattern(cfg?: DotPatternCfg): CanvasPattern {\n  const dotCfg = deepAssign({}, defaultDotPatternCfg, cfg);\n\n  const { size, padding, isStagger, rotation } = dotCfg;\n\n  // 计算 画布大小，dots的位置\n  const unitSize = getUnitPatternSize(size, padding, isStagger);\n  const dots = getSymbolsPosition(unitSize, isStagger);\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(unitSize, unitSize);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，dots\n  drawBackground(ctx, dotCfg, unitSize);\n  for (const [x, y] of dots) {\n    drawDot(ctx, dotCfg, x, y);\n  }\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}