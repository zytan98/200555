{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { isNaN, isArray, isFunction, isNumber, isString, floydWarshall, getAdjMatrix, isObject } from \"../../util\";\nimport { Base } from \"../base\";\nimport MDS from \"./mds\";\nimport RadialNonoverlapForce from \"./radialNonoverlapForce\";\n\nfunction getWeightMatrix(M) {\n  const rows = M.length;\n  const cols = M[0].length;\n  const result = [];\n\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n\n    for (let j = 0; j < cols; j++) {\n      if (M[i][j] !== 0) {\n        row.push(1 / (M[i][j] * M[i][j]));\n      } else {\n        row.push(0);\n      }\n    }\n\n    result.push(row);\n  }\n\n  return result;\n}\n\nfunction getIndexById(array, id) {\n  let index = -1;\n  array.forEach((a, i) => {\n    if (a.id === id) {\n      index = i;\n    }\n  });\n  return index;\n}\n\nfunction getEDistance(p1, p2) {\n  return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\n\n\nexport class RadialLayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n\n    this.maxIteration = 1000;\n    /** 中心点，默认为数据中第一个点 */\n\n    this.focusNode = null;\n    /** 每一圈半径 */\n\n    this.unitRadius = null;\n    /** 默认边长度 */\n\n    this.linkDistance = 50;\n    /** 是否防止重叠 */\n\n    this.preventOverlap = false;\n    /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n\n    this.strictRadial = true;\n    /** 防止重叠步骤的最大迭代次数 */\n\n    this.maxPreventOverlapIteration = 200;\n    this.sortStrength = 10;\n    this.nodes = [];\n    this.edges = [];\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      focusNode: null,\n      unitRadius: null,\n      linkDistance: 50,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      strictRadial: true,\n      maxPreventOverlapIteration: 200,\n      sortBy: undefined,\n      sortStrength: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges || [];\n\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    const linkDistance = self.linkDistance; // layout\n\n    let focusNode = null;\n\n    if (isString(self.focusNode)) {\n      let found = false;\n\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === self.focusNode) {\n          focusNode = nodes[i];\n          self.focusNode = focusNode;\n          found = true;\n          i = nodes.length;\n        }\n      }\n\n      if (!found) {\n        focusNode = null;\n      }\n    } else {\n      focusNode = self.focusNode;\n    } // default focus node\n\n\n    if (!focusNode) {\n      focusNode = nodes[0];\n      self.focusNode = focusNode;\n    } // the index of the focusNode in data\n\n\n    const focusIndex = getIndexById(nodes, focusNode.id);\n    self.focusIndex = focusIndex; // the graph-theoretic distance (shortest path distance) matrix\n\n    const adjMatrix = getAdjMatrix({\n      nodes,\n      edges\n    }, false);\n    const D = floydWarshall(adjMatrix);\n    const maxDistance = self.maxToFocus(D, focusIndex); // replace first node in unconnected component to the circle at (maxDistance + 1)\n\n    self.handleInfinity(D, focusIndex, maxDistance + 1);\n    self.distances = D; // the shortest path distance from each node to focusNode\n\n    const focusNodeD = D[focusIndex];\n    const width = self.width || 500;\n    const height = self.height || 500;\n    let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n    let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n\n    if (semiWidth === 0) {\n      semiWidth = width / 2;\n    }\n\n    if (semiHeight === 0) {\n      semiHeight = height / 2;\n    } // the maxRadius of the graph\n\n\n    const maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n    const maxD = Math.max(...focusNodeD); // the radius for each nodes away from focusNode\n\n    const radii = [];\n    focusNodeD.forEach((value, i) => {\n      if (!self.unitRadius) {\n        self.unitRadius = maxRadius / maxD;\n      }\n\n      radii[i] = value * self.unitRadius;\n    });\n    self.radii = radii;\n    const eIdealD = self.eIdealDisMatrix(); // const eIdealD = scaleMatrix(D, linkDistance);\n\n    self.eIdealDistances = eIdealD; // the weight matrix, Wij = 1 / dij^(-2)\n\n    const W = getWeightMatrix(eIdealD);\n    self.weights = W; // the initial positions from mds\n\n    const mds = new MDS({\n      linkDistance,\n      distances: eIdealD\n    });\n    let positions = mds.layout();\n    positions.forEach(p => {\n      if (isNaN(p[0])) {\n        p[0] = Math.random() * linkDistance;\n      }\n\n      if (isNaN(p[1])) {\n        p[1] = Math.random() * linkDistance;\n      }\n    });\n    self.positions = positions;\n    positions.forEach((p, i) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    }); // move the graph to origin, centered at focusNode\n\n    positions.forEach(p => {\n      p[0] -= positions[focusIndex][0];\n      p[1] -= positions[focusIndex][1];\n    });\n    self.run();\n    const preventOverlap = self.preventOverlap;\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n    const strictRadial = self.strictRadial; // stagger the overlapped nodes\n\n    if (preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc;\n\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n\n      if (!nodeSize) {\n        nodeSizeFunc = d => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n              return res + nodeSpacingFunc(d);\n            }\n\n            if (isObject(d.size)) {\n              const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n              return res + nodeSpacingFunc(d);\n            }\n\n            return d.size + nodeSpacingFunc(d);\n          }\n\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = d => {\n          const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n          return res + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = d => nodeSize + nodeSpacingFunc(d);\n      }\n\n      const nonoverlapForceParams = {\n        nodes,\n        nodeSizeFunc,\n        adjMatrix,\n        positions,\n        radii,\n        height,\n        width,\n        strictRadial,\n        focusID: focusIndex,\n        iterations: self.maxPreventOverlapIteration || 200,\n        k: positions.length / 4.5\n      };\n      const nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n      positions = nonoverlapForce.layout();\n    } // move the graph to center\n\n\n    positions.forEach((p, i) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  run() {\n    const self = this;\n    const maxIteration = self.maxIteration;\n    const positions = self.positions || [];\n    const W = self.weights || [];\n    const eIdealDis = self.eIdealDistances || [];\n    const radii = self.radii || [];\n\n    for (let i = 0; i <= maxIteration; i++) {\n      const param = i / maxIteration;\n      self.oneIteration(param, positions, radii, eIdealDis, W);\n    }\n  }\n\n  oneIteration(param, positions, radii, D, W) {\n    const self = this;\n    const vparam = 1 - param;\n    const focusIndex = self.focusIndex;\n    positions.forEach((v, i) => {\n      // v\n      const originDis = getEDistance(v, [0, 0]);\n      const reciODis = originDis === 0 ? 0 : 1 / originDis;\n\n      if (i === focusIndex) {\n        return;\n      }\n\n      let xMolecule = 0;\n      let yMolecule = 0;\n      let denominator = 0;\n      positions.forEach((u, j) => {\n        // u\n        if (i === j) {\n          return;\n        } // the euclidean distance between v and u\n\n\n        const edis = getEDistance(v, u);\n        const reciEdis = edis === 0 ? 0 : 1 / edis;\n        const idealDis = D[j][i]; // same for x and y\n\n        denominator += W[i][j]; // x\n\n        xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis); // y\n\n        yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n      });\n      const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n      denominator *= vparam;\n      denominator += param * reciR * reciR; // x\n\n      xMolecule *= vparam;\n      xMolecule += param * reciR * v[0] * reciODis;\n      v[0] = xMolecule / denominator; // y\n\n      yMolecule *= vparam;\n      yMolecule += param * reciR * v[1] * reciODis;\n      v[1] = yMolecule / denominator;\n    });\n  }\n\n  eIdealDisMatrix() {\n    const self = this;\n    const nodes = self.nodes;\n    if (!nodes) return [];\n    const D = self.distances;\n    const linkDis = self.linkDistance;\n    const radii = self.radii || [];\n    const unitRadius = self.unitRadius || 50;\n    const result = [];\n\n    if (D) {\n      D.forEach((row, i) => {\n        const newRow = [];\n        row.forEach((v, j) => {\n          if (i === j) {\n            newRow.push(0);\n          } else if (radii[i] === radii[j]) {\n            // i and j are on the same circle\n            if (self.sortBy === \"data\") {\n              // sort the nodes on the same circle according to the ordering of the data\n              newRow.push(v * (Math.abs(i - j) * self.sortStrength) / (radii[i] / unitRadius));\n            } else if (self.sortBy) {\n              // sort the nodes on the same circle according to the attributes\n              let iValue = nodes[i][self.sortBy] || 0;\n              let jValue = nodes[j][self.sortBy] || 0;\n\n              if (isString(iValue)) {\n                iValue = iValue.charCodeAt(0);\n              }\n\n              if (isString(jValue)) {\n                jValue = jValue.charCodeAt(0);\n              }\n\n              newRow.push(v * (Math.abs(iValue - jValue) * self.sortStrength) / (radii[i] / unitRadius));\n            } else {\n              newRow.push(v * linkDis / (radii[i] / unitRadius));\n            }\n          } else {\n            // i and j are on different circle\n            // i and j are on different circle\n            const link = (linkDis + unitRadius) / 2;\n            newRow.push(v * link);\n          }\n        });\n        result.push(newRow);\n      });\n    }\n\n    return result;\n  }\n\n  handleInfinity(matrix, focusIndex, step) {\n    const length = matrix.length; // 遍历 matrix 中遍历 focus 对应行\n\n    for (let i = 0; i < length; i++) {\n      // matrix 关注点对应行的 Inf 项\n      if (matrix[focusIndex][i] === Infinity) {\n        matrix[focusIndex][i] = step;\n        matrix[i][focusIndex] = step; // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n\n        for (let j = 0; j < length; j++) {\n          if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n            matrix[focusIndex][j] = step + matrix[i][j];\n            matrix[j][focusIndex] = step + matrix[i][j];\n          }\n        }\n      }\n    } // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n\n\n    for (let i = 0; i < length; i++) {\n      if (i === focusIndex) {\n        continue;\n      }\n\n      for (let j = 0; j < length; j++) {\n        if (matrix[i][j] === Infinity) {\n          let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n          minus = minus === 0 ? 1 : minus;\n          matrix[i][j] = minus;\n        }\n      }\n    }\n  }\n\n  maxToFocus(matrix, focusIndex) {\n    let max = 0;\n\n    for (let i = 0; i < matrix[focusIndex].length; i++) {\n      if (matrix[focusIndex][i] === Infinity) {\n        continue;\n      }\n\n      max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n    }\n\n    return max;\n  }\n\n  getType() {\n    return \"radial\";\n  }\n\n}","map":{"version":3,"sources":["../../../src/layout/radial/radial.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { isNaN, isArray, isFunction, isNumber, isString, floydWarshall, getAdjMatrix, isObject } from \"../../util\";\nimport { Base } from \"../base\";\nimport MDS from \"./mds\";\nimport RadialNonoverlapForce from \"./radialNonoverlapForce\";\nfunction getWeightMatrix(M) {\n    const rows = M.length;\n    const cols = M[0].length;\n    const result = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (M[i][j] !== 0) {\n                row.push(1 / (M[i][j] * M[i][j]));\n            }\n            else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n}\nfunction getIndexById(array, id) {\n    let index = -1;\n    array.forEach((a, i) => {\n        if (a.id === id) {\n            index = i;\n        }\n    });\n    return index;\n}\nfunction getEDistance(p1, p2) {\n    return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\nexport class RadialLayout extends Base {\n    constructor(options) {\n        super();\n        /** 停止迭代的最大迭代数 */\n        this.maxIteration = 1000;\n        /** 中心点，默认为数据中第一个点 */\n        this.focusNode = null;\n        /** 每一圈半径 */\n        this.unitRadius = null;\n        /** 默认边长度 */\n        this.linkDistance = 50;\n        /** 是否防止重叠 */\n        this.preventOverlap = false;\n        /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n        this.strictRadial = true;\n        /** 防止重叠步骤的最大迭代次数 */\n        this.maxPreventOverlapIteration = 200;\n        this.sortStrength = 10;\n        this.nodes = [];\n        this.edges = [];\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            maxIteration: 1000,\n            focusNode: null,\n            unitRadius: null,\n            linkDistance: 50,\n            preventOverlap: false,\n            nodeSize: undefined,\n            nodeSpacing: undefined,\n            strictRadial: true,\n            maxPreventOverlapIteration: 200,\n            sortBy: undefined,\n            sortStrength: 10\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        const self = this;\n        const nodes = self.nodes;\n        const edges = self.edges || [];\n        if (!nodes || nodes.length === 0) {\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        const center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        const linkDistance = self.linkDistance;\n        // layout\n        let focusNode = null;\n        if (isString(self.focusNode)) {\n            let found = false;\n            for (let i = 0; i < nodes.length; i++) {\n                if (nodes[i].id === self.focusNode) {\n                    focusNode = nodes[i];\n                    self.focusNode = focusNode;\n                    found = true;\n                    i = nodes.length;\n                }\n            }\n            if (!found) {\n                focusNode = null;\n            }\n        }\n        else {\n            focusNode = self.focusNode;\n        }\n        // default focus node\n        if (!focusNode) {\n            focusNode = nodes[0];\n            self.focusNode = focusNode;\n        }\n        // the index of the focusNode in data\n        const focusIndex = getIndexById(nodes, focusNode.id);\n        self.focusIndex = focusIndex;\n        // the graph-theoretic distance (shortest path distance) matrix\n        const adjMatrix = getAdjMatrix({ nodes, edges }, false);\n        const D = floydWarshall(adjMatrix);\n        const maxDistance = self.maxToFocus(D, focusIndex);\n        // replace first node in unconnected component to the circle at (maxDistance + 1)\n        self.handleInfinity(D, focusIndex, maxDistance + 1);\n        self.distances = D;\n        // the shortest path distance from each node to focusNode\n        const focusNodeD = D[focusIndex];\n        const width = self.width || 500;\n        const height = self.height || 500;\n        let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n        let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n        if (semiWidth === 0) {\n            semiWidth = width / 2;\n        }\n        if (semiHeight === 0) {\n            semiHeight = height / 2;\n        }\n        // the maxRadius of the graph\n        const maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n        const maxD = Math.max(...focusNodeD);\n        // the radius for each nodes away from focusNode\n        const radii = [];\n        focusNodeD.forEach((value, i) => {\n            if (!self.unitRadius) {\n                self.unitRadius = maxRadius / maxD;\n            }\n            radii[i] = value * self.unitRadius;\n        });\n        self.radii = radii;\n        const eIdealD = self.eIdealDisMatrix();\n        // const eIdealD = scaleMatrix(D, linkDistance);\n        self.eIdealDistances = eIdealD;\n        // the weight matrix, Wij = 1 / dij^(-2)\n        const W = getWeightMatrix(eIdealD);\n        self.weights = W;\n        // the initial positions from mds\n        const mds = new MDS({ linkDistance, distances: eIdealD });\n        let positions = mds.layout();\n        positions.forEach((p) => {\n            if (isNaN(p[0])) {\n                p[0] = Math.random() * linkDistance;\n            }\n            if (isNaN(p[1])) {\n                p[1] = Math.random() * linkDistance;\n            }\n        });\n        self.positions = positions;\n        positions.forEach((p, i) => {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        // move the graph to origin, centered at focusNode\n        positions.forEach((p) => {\n            p[0] -= positions[focusIndex][0];\n            p[1] -= positions[focusIndex][1];\n        });\n        self.run();\n        const preventOverlap = self.preventOverlap;\n        const nodeSize = self.nodeSize;\n        let nodeSizeFunc;\n        const strictRadial = self.strictRadial;\n        // stagger the overlapped nodes\n        if (preventOverlap) {\n            const nodeSpacing = self.nodeSpacing;\n            let nodeSpacingFunc;\n            if (isNumber(nodeSpacing)) {\n                nodeSpacingFunc = () => nodeSpacing;\n            }\n            else if (isFunction(nodeSpacing)) {\n                nodeSpacingFunc = nodeSpacing;\n            }\n            else {\n                nodeSpacingFunc = () => 0;\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = (d) => {\n                    if (d.size) {\n                        if (isArray(d.size)) {\n                            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                            return res + nodeSpacingFunc(d);\n                        }\n                        if (isObject(d.size)) {\n                            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                            return res + nodeSpacingFunc(d);\n                        }\n                        return d.size + nodeSpacingFunc(d);\n                    }\n                    return 10 + nodeSpacingFunc(d);\n                };\n            }\n            else if (isArray(nodeSize)) {\n                nodeSizeFunc = (d) => {\n                    const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n                    return res + nodeSpacingFunc(d);\n                };\n            }\n            else {\n                nodeSizeFunc = (d) => nodeSize + nodeSpacingFunc(d);\n            }\n            const nonoverlapForceParams = {\n                nodes,\n                nodeSizeFunc,\n                adjMatrix,\n                positions,\n                radii,\n                height,\n                width,\n                strictRadial,\n                focusID: focusIndex,\n                iterations: self.maxPreventOverlapIteration || 200,\n                k: positions.length / 4.5\n            };\n            const nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n            positions = nonoverlapForce.layout();\n        }\n        // move the graph to center\n        positions.forEach((p, i) => {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        if (self.onLayoutEnd)\n            self.onLayoutEnd();\n        return {\n            nodes,\n            edges\n        };\n    }\n    run() {\n        const self = this;\n        const maxIteration = self.maxIteration;\n        const positions = self.positions || [];\n        const W = self.weights || [];\n        const eIdealDis = self.eIdealDistances || [];\n        const radii = self.radii || [];\n        for (let i = 0; i <= maxIteration; i++) {\n            const param = i / maxIteration;\n            self.oneIteration(param, positions, radii, eIdealDis, W);\n        }\n    }\n    oneIteration(param, positions, radii, D, W) {\n        const self = this;\n        const vparam = 1 - param;\n        const focusIndex = self.focusIndex;\n        positions.forEach((v, i) => {\n            // v\n            const originDis = getEDistance(v, [0, 0]);\n            const reciODis = originDis === 0 ? 0 : 1 / originDis;\n            if (i === focusIndex) {\n                return;\n            }\n            let xMolecule = 0;\n            let yMolecule = 0;\n            let denominator = 0;\n            positions.forEach((u, j) => {\n                // u\n                if (i === j) {\n                    return;\n                }\n                // the euclidean distance between v and u\n                const edis = getEDistance(v, u);\n                const reciEdis = edis === 0 ? 0 : 1 / edis;\n                const idealDis = D[j][i];\n                // same for x and y\n                denominator += W[i][j];\n                // x\n                xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis);\n                // y\n                yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n            });\n            const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n            denominator *= vparam;\n            denominator += param * reciR * reciR;\n            // x\n            xMolecule *= vparam;\n            xMolecule += param * reciR * v[0] * reciODis;\n            v[0] = xMolecule / denominator;\n            // y\n            yMolecule *= vparam;\n            yMolecule += param * reciR * v[1] * reciODis;\n            v[1] = yMolecule / denominator;\n        });\n    }\n    eIdealDisMatrix() {\n        const self = this;\n        const nodes = self.nodes;\n        if (!nodes)\n            return [];\n        const D = self.distances;\n        const linkDis = self.linkDistance;\n        const radii = self.radii || [];\n        const unitRadius = self.unitRadius || 50;\n        const result = [];\n        if (D) {\n            D.forEach((row, i) => {\n                const newRow = [];\n                row.forEach((v, j) => {\n                    if (i === j) {\n                        newRow.push(0);\n                    }\n                    else if (radii[i] === radii[j]) {\n                        // i and j are on the same circle\n                        if (self.sortBy === \"data\") {\n                            // sort the nodes on the same circle according to the ordering of the data\n                            newRow.push((v * (Math.abs(i - j) * self.sortStrength)) /\n                                (radii[i] / unitRadius));\n                        }\n                        else if (self.sortBy) {\n                            // sort the nodes on the same circle according to the attributes\n                            let iValue = nodes[i][self.sortBy] || 0;\n                            let jValue = nodes[j][self.sortBy] || 0;\n                            if (isString(iValue)) {\n                                iValue = iValue.charCodeAt(0);\n                            }\n                            if (isString(jValue)) {\n                                jValue = jValue.charCodeAt(0);\n                            }\n                            newRow.push((v * (Math.abs(iValue - jValue) * self.sortStrength)) /\n                                (radii[i] / unitRadius));\n                        }\n                        else {\n                            newRow.push((v * linkDis) / (radii[i] / unitRadius));\n                        }\n                    }\n                    else {\n                        // i and j are on different circle\n                        // i and j are on different circle\n                        const link = (linkDis + unitRadius) / 2;\n                        newRow.push(v * link);\n                    }\n                });\n                result.push(newRow);\n            });\n        }\n        return result;\n    }\n    handleInfinity(matrix, focusIndex, step) {\n        const length = matrix.length;\n        // 遍历 matrix 中遍历 focus 对应行\n        for (let i = 0; i < length; i++) {\n            // matrix 关注点对应行的 Inf 项\n            if (matrix[focusIndex][i] === Infinity) {\n                matrix[focusIndex][i] = step;\n                matrix[i][focusIndex] = step;\n                // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n                for (let j = 0; j < length; j++) {\n                    if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n                        matrix[focusIndex][j] = step + matrix[i][j];\n                        matrix[j][focusIndex] = step + matrix[i][j];\n                    }\n                }\n            }\n        }\n        // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n        for (let i = 0; i < length; i++) {\n            if (i === focusIndex) {\n                continue;\n            }\n            for (let j = 0; j < length; j++) {\n                if (matrix[i][j] === Infinity) {\n                    let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n                    minus = minus === 0 ? 1 : minus;\n                    matrix[i][j] = minus;\n                }\n            }\n        }\n    }\n    maxToFocus(matrix, focusIndex) {\n        let max = 0;\n        for (let i = 0; i < matrix[focusIndex].length; i++) {\n            if (matrix[focusIndex][i] === Infinity) {\n                continue;\n            }\n            max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n        }\n        return max;\n    }\n    getType() {\n        return \"radial\";\n    }\n}\n//# sourceMappingURL=radial.js.map"]},"metadata":{},"sourceType":"module"}