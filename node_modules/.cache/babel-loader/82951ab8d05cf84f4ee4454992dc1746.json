{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { createEntity } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nexport var GeometrySystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.GeometryComponentManager), _dec3 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function GeometrySystem() {\n    _classCallCheck(this, GeometrySystem);\n\n    _initializerDefineProperty(this, \"geometry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n  }\n\n  _createClass(GeometrySystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.geometry.forEach(function (entity, component) {\n                  // build buffers for each geometry\n                  if (component.dirty) {\n                    component.attributes.forEach(function (attribute) {\n                      if (attribute.dirty && attribute.data) {\n                        if (!attribute.buffer) {\n                          attribute.buffer = _this.engine.createBuffer({\n                            data: attribute.data,\n                            type: gl.FLOAT\n                          });\n                        } else {\n                          var _attribute$buffer;\n\n                          (_attribute$buffer = attribute.buffer) === null || _attribute$buffer === void 0 ? void 0 : _attribute$buffer.subData({\n                            data: attribute.data,\n                            // TODO: support offset in subdata\n                            offset: 0\n                          });\n                        }\n\n                        attribute.dirty = false;\n                      }\n                    }); // create index buffer if needed\n\n                    if (component.indices) {\n                      if (!component.indicesBuffer) {\n                        component.indicesBuffer = _this.engine.createElements({\n                          data: component.indices,\n                          count: component.indices.length,\n                          type: gl.UNSIGNED_INT,\n                          usage: gl.STATIC_DRAW\n                        });\n                      } else {\n                        component.indicesBuffer.subData({\n                          data: component.indices,\n                          offset: 0\n                        });\n                      }\n                    }\n\n                    component.dirty = false;\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.geometry.forEach(function (_, geometry) {\n        if (geometry.indicesBuffer) {\n          geometry.indicesBuffer.destroy();\n        }\n\n        geometry.attributes.forEach(function (attribute) {\n          if (attribute.buffer) {\n            attribute.buffer.destroy();\n          }\n        });\n      });\n      this.geometry.clear();\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n     */\n\n  }, {\n    key: \"createBufferGeometry\",\n    value: function createBufferGeometry() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        vertexCount: 3\n      },\n          vertexCount = _ref.vertexCount;\n\n      var entity = createEntity();\n      return this.geometry.create(entity, {\n        vertexCount: vertexCount\n      });\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n     */\n\n  }, {\n    key: \"createInstancedBufferGeometry\",\n    value: function createInstancedBufferGeometry(_ref2) {\n      var maxInstancedCount = _ref2.maxInstancedCount,\n          vertexCount = _ref2.vertexCount;\n      var entity = createEntity();\n      return this.geometry.create(entity, {\n        maxInstancedCount: maxInstancedCount,\n        vertexCount: vertexCount\n      });\n    }\n  }]);\n\n  return GeometrySystem;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../src/components/geometry/System.ts"],"names":["injectable","GeometrySystem","inject","IDENTIFIER","component","attribute","data","type","gl","FLOAT","offset","count","usage","STATIC_DRAW","geometry","vertexCount","entity","createEntity","maxInstancedCount"],"mappings":";;;;;;;;;;AACA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AACA,SAAA,YAAA,QAAA,OAAA;AAEA,SAAA,UAAA,QAAA,kBAAA;AAEA,SAAA,EAAA,QAAA,gBAAA;AAMA,OAAA,IAAaC,cAAb,IAAA,IAAA,GADCD,UAAU,EACX,EAAA,KAAA,GACGE,MAAM,CAACC,UAAU,CADpB,wBACS,CADT,EAAA,KAAA,GAIGD,MAAM,CAACC,UAAU,CAJpB,YAIS,CAJT,EAAA,IAAA,CAAA,MAAA,IAAA,OAAA,IAAA,KAAA,GAAA,aAAA,YAAA;AAAA,WAAA,cAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,IAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,QAAA,EAAA,YAAA,EAAA,IAAA,CAAA;AAAA;;AAAA,EAAA,YAAA,CAAA,cAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,QAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,YAAA,KAAA,GAAA,IAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAQI,qBAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,MAAA,EAAA,SAAA,EAAuB;AAC3C;AACA,sBAAIC,SAAS,CAAb,KAAA,EAAqB;AACnBA,oBAAAA,SAAS,CAATA,UAAAA,CAAAA,OAAAA,CAA6B,UAAA,SAAA,EAAe;AAC1C,0BAAIC,SAAS,CAATA,KAAAA,IAAmBA,SAAS,CAAhC,IAAA,EAAuC;AACrC,4BAAI,CAACA,SAAS,CAAd,MAAA,EAAuB;AACrBA,0BAAAA,SAAS,CAATA,MAAAA,GAAmB,KAAI,CAAJ,MAAA,CAAA,YAAA,CAAyB;AAC1CC,4BAAAA,IAAI,EAAED,SAAS,CAD2B,IAAA;AAE1CE,4BAAAA,IAAI,EAAEC,EAAE,CAACC;AAFiC,2BAAzB,CAAnBJ;AADF,yBAAA,MAKO;AAAA,8BAAA,iBAAA;;AACL,2BAAA,iBAAA,GAAA,SAAS,CAAT,MAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,OAAA,CAA0B;AACxBC,4BAAAA,IAAI,EAAED,SAAS,CADS,IAAA;AAExB;AACAK,4BAAAA,MAAM,EAAE;AAHgB,2BAA1B,CAAA;AAKD;;AACDL,wBAAAA,SAAS,CAATA,KAAAA,GAAAA,KAAAA;AACD;AAhBgB,qBACnBD,EADmB,CAmBnB;;AACA,wBAAIA,SAAS,CAAb,OAAA,EAAuB;AACrB,0BAAI,CAACA,SAAS,CAAd,aAAA,EAA8B;AAC5BA,wBAAAA,SAAS,CAATA,aAAAA,GAA0B,KAAI,CAAJ,MAAA,CAAA,cAAA,CAA2B;AACnDE,0BAAAA,IAAI,EAAEF,SAAS,CADoC,OAAA;AAEnDO,0BAAAA,KAAK,EAAEP,SAAS,CAATA,OAAAA,CAF4C,MAAA;AAGnDG,0BAAAA,IAAI,EAAEC,EAAE,CAH2C,YAAA;AAInDI,0BAAAA,KAAK,EAAEJ,EAAE,CAACK;AAJyC,yBAA3B,CAA1BT;AADF,uBAAA,MAOO;AACLA,wBAAAA,SAAS,CAATA,aAAAA,CAAAA,OAAAA,CAAgC;AAC9BE,0BAAAA,IAAI,EAAEF,SAAS,CADe,OAAA;AAE9BM,0BAAAA,MAAM,EAAE;AAFsB,yBAAhCN;AAID;AACF;;AACDA,oBAAAA,SAAS,CAATA,KAAAA,GAAAA,KAAAA;AACD;AAtCH,iBAAA;;AARJ,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;AAAA,OAAA,CAAA,CAAA;;AAAA,eAAA,OAAA,GAAA;AAAA,eAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,OAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,SAAA,QAAA,GAkDoB;AAChB,WAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,CAAA,EAAA,QAAA,EAAiB;AACrC,YAAIU,QAAQ,CAAZ,aAAA,EAA4B;AAC1BA,UAAAA,QAAQ,CAARA,aAAAA,CAAAA,OAAAA;AACD;;AAEDA,QAAAA,QAAQ,CAARA,UAAAA,CAAAA,OAAAA,CAA4B,UAAA,SAAA,EAAe;AACzC,cAAIT,SAAS,CAAb,MAAA,EAAsB;AACpBA,YAAAA,SAAS,CAATA,MAAAA,CAAAA,OAAAA;AACD;AAHHS,SAAAA;AALF,OAAA;AAWA,WAAA,QAAA,CAAA,KAAA;AACD;AAED;AACF;AACA;;AAnEA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,sBAAA;AAAA,IAAA,KAAA,EAAA,SAAA,oBAAA,GAsEI;AAAA,UAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD2C;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAC3C;AAAA,UADEA,WACF,GAAA,IAAA,CADEA,WACF;;AACA,UAAMC,MAAM,GAAGC,YAAf,EAAA;AACA,aAAO,KAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAA6B;AAClCF,QAAAA,WAAW,EAAXA;AADkC,OAA7B,CAAP;AAGD;AAED;AACF;AACA;;AA/EA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,+BAAA;AAAA,IAAA,KAAA,EAAA,SAAA,6BAAA,CAAA,KAAA,EAsFK;AAAA,UALDG,iBAKC,GAAA,KAAA,CALDA,iBAKC;AAAA,UAJDH,WAIC,GAAA,KAAA,CAJDA,WAIC;AACD,UAAMC,MAAM,GAAGC,YAAf,EAAA;AACA,aAAO,KAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAA6B;AAClCC,QAAAA,iBAAiB,EADiB,iBAAA;AAElCH,QAAAA,WAAW,EAAXA;AAFkC,OAA7B,CAAP;AAID;AA5FH,GAAA,CAAA,CAAA;;AAAA,SAAA,cAAA;AAAA,CAAA,EAAA,EAAA,KAAA,CAAA,GAAA,WAAA,GAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,UAAA,EAAA,CAAA,KAAA,CAAA,EAAA;AAAA,EAAA,YAAA,EAAA,IAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,QAAA,EAAA,IAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAA,CAAA,EAAA,YAAA,GAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,EAAA;AAAA,EAAA,YAAA,EAAA,IAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,QAAA,EAAA,IAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAA,CAAA,GAAA,OAAA,CAAA,CAAA,IAAA,MAAA,CAAA","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { generateAABBFromVertices } from '../../utils/aabb';\nimport { gl } from '../renderer/gl';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { GeometryComponent } from './GeometryComponent';\n\n@injectable()\nexport class GeometrySystem implements ISystem {\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute() {\n    this.geometry.forEach((entity, component) => {\n      // build buffers for each geometry\n      if (component.dirty) {\n        component.attributes.forEach((attribute) => {\n          if (attribute.dirty && attribute.data) {\n            if (!attribute.buffer) {\n              attribute.buffer = this.engine.createBuffer({\n                data: attribute.data,\n                type: gl.FLOAT,\n              });\n            } else {\n              attribute.buffer?.subData({\n                data: attribute.data,\n                // TODO: support offset in subdata\n                offset: 0,\n              });\n            }\n            attribute.dirty = false;\n          }\n        });\n\n        // create index buffer if needed\n        if (component.indices) {\n          if (!component.indicesBuffer) {\n            component.indicesBuffer = this.engine.createElements({\n              data: component.indices,\n              count: component.indices.length,\n              type: gl.UNSIGNED_INT,\n              usage: gl.STATIC_DRAW,\n            });\n          } else {\n            component.indicesBuffer.subData({\n              data: component.indices,\n              offset: 0,\n            });\n          }\n        }\n        component.dirty = false;\n      }\n    });\n  }\n\n  public tearDown() {\n    this.geometry.forEach((_, geometry) => {\n      if (geometry.indicesBuffer) {\n        geometry.indicesBuffer.destroy();\n      }\n\n      geometry.attributes.forEach((attribute) => {\n        if (attribute.buffer) {\n          attribute.buffer.destroy();\n        }\n      });\n    });\n    this.geometry.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n   */\n  public createBufferGeometry(\n    { vertexCount }: { vertexCount: number } = { vertexCount: 3 },\n  ) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      vertexCount,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n   */\n  public createInstancedBufferGeometry({\n    maxInstancedCount,\n    vertexCount,\n  }: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      maxInstancedCount,\n      vertexCount,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}