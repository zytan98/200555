{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport { isAllZero } from './utils';\nimport './interactions';\n\nvar Pie =\n/** @class */\nfunction (_super) {\n  __extends(Pie, _super);\n\n  function Pie() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'pie';\n    return _this;\n  }\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n\n\n  Pie.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param data\n   */\n\n\n  Pie.prototype.changeData = function (data) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    var prevOptions = this.options;\n    var angleField = this.options.angleField;\n    var prevData = processIllegalData(prevOptions.data, angleField);\n    var curData = processIllegalData(data, angleField); // 如果上一次或当前数据全为 0，则重新渲染\n\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({\n        data: data\n      });\n    } else {\n      this.updateOption({\n        data: data\n      });\n      this.chart.data(curData); // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n      pieAnnotation({\n        chart: this.chart,\n        options: this.options\n      });\n      this.chart.render(true);\n    }\n\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n\n\n  Pie.prototype.getDefaultOptions = function () {\n    return Pie.getDefaultOptions();\n  };\n  /**\n   * 获取 饼图 的适配器\n   */\n\n\n  Pie.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Pie;\n}(Plot);\n\nexport { Pie };","map":{"version":3,"sources":["../../../src/plots/pie/index.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,EAA2B,KAA3B,QAAwC,UAAxC;AACA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,kBAAT,QAAmC,aAAnC;AACA,SAAS,OAAT,EAAkB,aAAlB,QAAuC,WAAvC;AACA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,SAAT,QAA0B,SAA1B;AACA,OAAO,gBAAP;;AAIA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,GAAA,EAAA,MAAA,CAAA;;AAAzB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AASE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,KAAf;;AA6CR;AAtDC;;;AAGG;;;AACI,EAAA,GAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAOP;;;AAGG;;;AACI,EAAA,GAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA0C;AACxC,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,kBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,kBAA5C,EAAgE,IAAhE,CAFF;AAIA,QAAM,WAAW,GAAG,KAAK,OAAzB;AACQ,QAAA,UAAU,GAAK,KAAK,OAAL,CAAL,UAAV;AACR,QAAM,QAAQ,GAAG,kBAAkB,CAAC,WAAW,CAAC,IAAb,EAAmB,UAAnB,CAAnC;AACA,QAAM,OAAO,GAAG,kBAAkB,CAAC,IAAD,EAAO,UAAP,CAAlC,CARwC,CASxC;;AACA,QAAI,SAAS,CAAC,QAAD,EAAW,UAAX,CAAT,IAAmC,SAAS,CAAC,OAAD,EAAU,UAAV,CAAhD,EAAuE;AACrE,WAAK,MAAL,CAAY;AAAE,QAAA,IAAI,EAAA;AAAN,OAAZ;AACD,KAFD,MAEO;AACL,WAAK,YAAL,CAAkB;AAAE,QAAA,IAAI,EAAA;AAAN,OAAlB;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAFK,CAGL;;AACA,MAAA,aAAa,CAAC;AAAE,QAAA,KAAK,EAAE,KAAK,KAAd;AAAqB,QAAA,OAAO,EAAE,KAAK;AAAnC,OAAD,CAAb;AACA,WAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB;AACD;;AAED,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,iBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,iBAA5C,EAA+D,IAA/D,CAFF;AAID,GAxBM;AA0BP;;AAEG;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,GAAG,CAAC,iBAAJ,EAAP;AACD,GAFS;AAIV;;AAEG;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,GAAA;AAAC,CAvDD,CAAyB,IAAzB,CAAA","sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport { PieOptions } from './types';\nimport { isAllZero } from './utils';\nimport './interactions';\n\nexport type { PieOptions };\n\nexport class Pie extends Plot<PieOptions> {\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<PieOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'pie';\n\n  /**\n   * 更新数据\n   * @param data\n   */\n  public changeData(data: PieOptions['data']) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n    const prevOptions = this.options;\n    const { angleField } = this.options;\n    const prevData = processIllegalData(prevOptions.data, angleField);\n    const curData = processIllegalData(data, angleField);\n    // 如果上一次或当前数据全为 0，则重新渲染\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({ data });\n    } else {\n      this.updateOption({ data });\n      this.chart.data(curData);\n      // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n      pieAnnotation({ chart: this.chart, options: this.options });\n      this.chart.render(true);\n    }\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n  protected getDefaultOptions(): Partial<PieOptions> {\n    return Pie.getDefaultOptions();\n  }\n\n  /**\n   * 获取 饼图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<PieOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}