{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\nexport var Mask;\n\n(function (Mask) {\n  Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n  Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n  Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n})(Mask || (Mask = {}));\n\nexport var Frustum = /*#__PURE__*/function () {\n  function Frustum(planes) {\n    _classCallCheck(this, Frustum);\n\n    this.planes = [];\n\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n\n\n  _createClass(Frustum, [{\n    key: \"extractFromVPMatrix\",\n    value: function extractFromVPMatrix(vpMatrix) {\n      var _vpMatrix = _slicedToArray(vpMatrix, 16),\n          m0 = _vpMatrix[0],\n          m1 = _vpMatrix[1],\n          m2 = _vpMatrix[2],\n          m3 = _vpMatrix[3],\n          m4 = _vpMatrix[4],\n          m5 = _vpMatrix[5],\n          m6 = _vpMatrix[6],\n          m7 = _vpMatrix[7],\n          m8 = _vpMatrix[8],\n          m9 = _vpMatrix[9],\n          m10 = _vpMatrix[10],\n          m11 = _vpMatrix[11],\n          m12 = _vpMatrix[12],\n          m13 = _vpMatrix[13],\n          m14 = _vpMatrix[14],\n          m15 = _vpMatrix[15]; // right\n\n\n      vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n      this.planes[0].distance = -(m15 - m12); // left\n\n      vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n      this.planes[1].distance = -(m15 + m12); // bottom\n\n      vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n      this.planes[2].distance = -(m15 + m13); // top\n\n      vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n      this.planes[3].distance = -(m15 - m13); // far\n\n      vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n      this.planes[4].distance = -(m15 - m14); // near\n\n      vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n      this.planes[5].distance = -(m15 + m14);\n      this.planes.forEach(function (plane) {\n        plane.normalize();\n        plane.updatePNVertexFlag();\n      });\n    }\n  }]);\n\n  return Frustum;\n}();","map":{"version":3,"sources":["../../src/shape/Frustum.ts"],"names":["Mask","Frustum","planes","i","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","vec3","plane"],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { Plane } from './Plane';\n\nexport enum Mask {\n  OUTSIDE = 0xffffffff,\n  INSIDE = 0x00000000,\n  INDETERMINATE = 0x7fffffff,\n}\n\nexport class Frustum {\n  public planes: Plane[] = [];\n\n  constructor(planes?: Plane[]) {\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (let i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n  public extractFromVPMatrix(vpMatrix: mat4) {\n    const [\n      m0,\n      m1,\n      m2,\n      m3,\n      m4,\n      m5,\n      m6,\n      m7,\n      m8,\n      m9,\n      m10,\n      m11,\n      m12,\n      m13,\n      m14,\n      m15,\n    ] = vpMatrix;\n\n    // right\n    vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n    this.planes[0].distance = -(m15 - m12);\n\n    // left\n    vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n    this.planes[1].distance = -(m15 + m12);\n\n    // bottom\n    vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n    this.planes[2].distance = -(m15 + m13);\n\n    // top\n    vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n    this.planes[3].distance = -(m15 - m13);\n\n    // far\n    vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n    this.planes[4].distance = -(m15 - m14);\n\n    // near\n    vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n    this.planes[5].distance = -(m15 + m14);\n\n    this.planes.forEach((plane) => {\n      plane.normalize();\n      plane.updatePNVertexFlag();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}