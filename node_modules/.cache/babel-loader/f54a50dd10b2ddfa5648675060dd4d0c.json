{"ast":null,"code":"/**\n * 获取设备像素比\n */\nexport function getPixelRatio() {\n  return typeof window === 'object' ? window === null || window === void 0 ? void 0 : window.devicePixelRatio : 2;\n}\n/**\n * 初始化 cavnas，设置宽高等\n */\n\nexport function initCanvas(width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n\n  var canvas = document.createElement('canvas');\n  var pixelRatio = getPixelRatio(); // 画布尺寸\n\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio; // 显示尺寸\n\n  canvas.style.width = width + \"px\";\n  canvas.style.height = height + \"px\";\n  var ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n  return canvas;\n}\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\n\nexport function drawBackground(context, cfg, width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n\n  var backgroundColor = cfg.backgroundColor,\n      opacity = cfg.opacity;\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\n\nexport function getUnitPatternSize(size, padding, isStagger) {\n  // 如果交错, unitSize 放大两倍\n  var unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\n\nexport function getSymbolsPosition(unitSize, isStagger) {\n  // 如果交错, 交错绘制 dot\n  var symbolsPos = isStagger ? [[unitSize * (1 / 4), unitSize * (1 / 4)], [unitSize * (3 / 4), unitSize * (3 / 4)]] : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\n\nexport function transformMatrix(dpr, rotation) {\n  var radian = rotation * Math.PI / 180;\n  var matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0\n  };\n  return matrix;\n}","map":{"version":3,"sources":["../../../src/utils/pattern/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { PatternCfg } from '../../types/pattern';\n\n/**\n * 获取设备像素比\n */\nexport function getPixelRatio(): number {\n  return typeof window === 'object' ? window?.devicePixelRatio : 2;\n}\n\n/**\n * 初始化 cavnas，设置宽高等\n */\nexport function initCanvas(width: number, height: number = width): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n\n  const pixelRatio = getPixelRatio();\n  // 画布尺寸\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  // 显示尺寸\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n\n  return canvas;\n}\n\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\nexport function drawBackground(\n  context: CanvasRenderingContext2D,\n  cfg: PatternCfg,\n  width: number,\n  height: number = width\n) {\n  const { backgroundColor, opacity } = cfg;\n\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\nexport function getUnitPatternSize(size: number, padding: number, isStagger: boolean): number {\n  // 如果交错, unitSize 放大两倍\n  const unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\nexport function getSymbolsPosition(unitSize: number, isStagger: boolean): number[][] {\n  // 如果交错, 交错绘制 dot\n  const symbolsPos = isStagger\n    ? [\n        [unitSize * (1 / 4), unitSize * (1 / 4)],\n        [unitSize * (3 / 4), unitSize * (3 / 4)],\n      ]\n    : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\nexport function transformMatrix(dpr: number, rotation: number) {\n  const radian = (rotation * Math.PI) / 180;\n  const matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0,\n  };\n  return matrix;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}