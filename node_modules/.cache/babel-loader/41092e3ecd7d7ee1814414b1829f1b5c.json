{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nvar tmpVecA = vec3.create();\nvar tmpVecB = vec3.create();\nvar tmpVecC = vec3.create();\nvar tmpVecD = vec3.create();\nvar tmpVecE = vec3.create();\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\n\nexport var Ray = /*#__PURE__*/function () {\n  function Ray(origin, direction) {\n    _classCallCheck(this, Ray);\n\n    this.origin = void 0;\n    this.direction = void 0;\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  _createClass(Ray, [{\n    key: \"intersectsAABB\",\n    value: function intersectsAABB(aabb, intersection) {\n      return intersection ? this.intersectAABBWithIntersection(aabb, intersection) : this.intersectsAABBWithoutIntersection(aabb);\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere, intersection) {\n      var m = vec3.sub(tmpVecA, this.origin, sphere.center);\n      vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n      var b = vec3.dot(m, tmpVecB);\n      var c = vec3.dot(m, m) - sphere.radius * sphere.radius; // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n\n      if (c > 0 && b > 0) {\n        return null;\n      }\n\n      var discr = b * b - c; // a negative discriminant corresponds to ray missing sphere\n\n      if (discr < 0) {\n        return false;\n      } // ray intersects sphere, compute smallest t value of intersection\n\n\n      var t = Math.abs(-b - Math.sqrt(discr)); // if t is negative, ray started inside sphere so clamp t to zero\n\n      if (intersection) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane, intersection) {\n      var t = (plane.distance - vec3.dot(plane.normal, this.origin)) / vec3.dot(plane.normal, this.direction);\n      var intersects = t >= 0;\n\n      if (intersects && intersection) {\n        vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n      }\n\n      return intersects;\n    }\n    /**\n     * faster than implements like Three.js\n     * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n     */\n\n  }, {\n    key: \"intersectsAABBWithoutIntersection\",\n    value: function intersectsAABBWithoutIntersection(aabb) {\n      var diff = tmpVecA;\n      var cross = tmpVecB;\n      var prod = tmpVecC;\n      var absDiff = tmpVecD;\n      var absDir = tmpVecE;\n      var rayDir = this.direction;\n      vec3.sub(diff, this.origin, aabb.center);\n      vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n      vec3.mul(prod, diff, rayDir);\n\n      if (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0 || absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0 || absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0) {\n        return false;\n      }\n\n      vec3.set(absDir, Math.abs(rayDir[0]), Math.abs(rayDir[1]), Math.abs(rayDir[2]));\n      vec3.cross(cross, rayDir, diff);\n      vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n      return !(cross[0] > aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] || cross[1] > aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] || cross[2] > aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]);\n    }\n  }, {\n    key: \"intersectAABBWithIntersection\",\n    value: function intersectAABBWithIntersection(aabb, intersection) {\n      var tMin = vec3.copy(vec3.create(), aabb.getMin());\n      vec3.sub(tMin, tMin, this.origin);\n      var tMax = vec3.copy(vec3.create(), aabb.getMax());\n      vec3.sub(tMax, tMax, this.origin);\n      var dir = this.direction; // Ensure that we are not dividing it by zero\n\n      if (dir[0] === 0) {\n        tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[0] /= dir[0];\n        tMax[0] /= dir[0];\n      }\n\n      if (dir[1] === 0) {\n        tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[1] /= dir[1];\n        tMax[1] /= dir[1];\n      }\n\n      if (dir[2] === 0) {\n        tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[2] /= dir[2];\n        tMax[2] /= dir[2];\n      }\n\n      var realMin = vec3.set(tmpVecC, Math.min(tMin[0], tMax[0]), Math.min(tMin[1], tMax[1]), Math.min(tMin[2], tMax[2]));\n      var realMax = vec3.set(tmpVecD, Math.max(tMin[0], tMax[0]), Math.max(tMin[1], tMax[1]), Math.max(tMin[2], tMax[2]));\n      var minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n      var maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n      var intersects = minMax >= maxMin && maxMin >= 0;\n\n      if (intersects) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n      }\n\n      return intersects;\n    }\n  }]);\n\n  return Ray;\n}();","map":{"version":3,"sources":["../../src/shape/Ray.ts"],"names":["tmpVecA","vec3","tmpVecB","tmpVecC","tmpVecD","tmpVecE","Ray","origin","direction","intersection","m","sphere","b","c","discr","t","Math","plane","intersects","diff","cross","prod","absDiff","absDir","rayDir","aabb","tMin","tMax","dir","Number","realMin","realMax","minMax","maxMin"],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { BoundingSphere } from './BoundingSphere';\nimport { Plane } from './Plane';\n\nconst tmpVecA = vec3.create();\nconst tmpVecB = vec3.create();\nconst tmpVecC = vec3.create();\nconst tmpVecD = vec3.create();\nconst tmpVecE = vec3.create();\n\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\nexport class Ray {\n  public origin: vec3;\n  public direction: vec3;\n\n  constructor(origin: vec3, direction: vec3) {\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  public intersectsAABB(aabb: AABB, intersection?: vec3) {\n    return intersection\n      ? this.intersectAABBWithIntersection(aabb, intersection)\n      : this.intersectsAABBWithoutIntersection(aabb);\n  }\n\n  public intersectsSphere(sphere: BoundingSphere, intersection?: vec3) {\n    const m = vec3.sub(tmpVecA, this.origin, sphere.center);\n    vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n    const b = vec3.dot(m, tmpVecB);\n    const c = vec3.dot(m, m) - sphere.radius * sphere.radius;\n\n    // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n    if (c > 0 && b > 0) {\n      return null;\n    }\n\n    const discr = b * b - c;\n    // a negative discriminant corresponds to ray missing sphere\n    if (discr < 0) {\n      return false;\n    }\n\n    // ray intersects sphere, compute smallest t value of intersection\n    const t = Math.abs(-b - Math.sqrt(discr));\n\n    // if t is negative, ray started inside sphere so clamp t to zero\n    if (intersection) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n    }\n\n    return true;\n  }\n\n  public intersectsPlane(plane: Plane, intersection?: vec3) {\n    const t =\n      (plane.distance - vec3.dot(plane.normal, this.origin)) /\n      vec3.dot(plane.normal, this.direction);\n    const intersects = t >= 0;\n    if (intersects && intersection) {\n      vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n    }\n\n    return intersects;\n  }\n\n  /**\n   * faster than implements like Three.js\n   * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n   */\n  private intersectsAABBWithoutIntersection(aabb: AABB) {\n    const diff = tmpVecA;\n    const cross = tmpVecB;\n    const prod = tmpVecC;\n    const absDiff = tmpVecD;\n    const absDir = tmpVecE;\n    const rayDir = this.direction;\n\n    vec3.sub(diff, this.origin, aabb.center);\n    vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n    vec3.mul(prod, diff, rayDir);\n\n    if (\n      (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0) ||\n      (absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0) ||\n      (absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0)\n    ) {\n      return false;\n    }\n\n    vec3.set(\n      absDir,\n      Math.abs(rayDir[0]),\n      Math.abs(rayDir[1]),\n      Math.abs(rayDir[2]),\n    );\n    vec3.cross(cross, rayDir, diff);\n    vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n\n    return !(\n      cross[0] >\n        aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] ||\n      cross[1] >\n        aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] ||\n      cross[2] >\n        aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]\n    );\n  }\n\n  private intersectAABBWithIntersection(aabb: AABB, intersection: vec3) {\n    const tMin = vec3.copy(vec3.create(), aabb.getMin());\n    vec3.sub(tMin, tMin, this.origin);\n    const tMax = vec3.copy(vec3.create(), aabb.getMax());\n    vec3.sub(tMax, tMax, this.origin);\n    const dir = this.direction;\n\n    // Ensure that we are not dividing it by zero\n    if (dir[0] === 0) {\n      tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[0] /= dir[0];\n      tMax[0] /= dir[0];\n    }\n    if (dir[1] === 0) {\n      tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[1] /= dir[1];\n      tMax[1] /= dir[1];\n    }\n    if (dir[2] === 0) {\n      tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[2] /= dir[2];\n      tMax[2] /= dir[2];\n    }\n\n    const realMin = vec3.set(\n      tmpVecC,\n      Math.min(tMin[0], tMax[0]),\n      Math.min(tMin[1], tMax[1]),\n      Math.min(tMin[2], tMax[2]),\n    );\n    const realMax = vec3.set(\n      tmpVecD,\n      Math.max(tMin[0], tMax[0]),\n      Math.max(tMin[1], tMax[1]),\n      Math.max(tMin[2], tMax[2]),\n    );\n\n    const minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n    const maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n\n    const intersects = minMax >= maxMin && maxMin >= 0;\n\n    if (intersects) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n    }\n\n    return intersects;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}