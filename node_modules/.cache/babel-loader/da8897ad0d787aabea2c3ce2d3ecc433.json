{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util'; // 获取对应的 scale\n\nfunction getFilter(scale, dim, point1, point2) {\n  var min = Math.min(point1[dim], point2[dim]);\n  var max = Math.max(point1[dim], point2[dim]);\n  var _a = scale.range,\n      rangeMin = _a[0],\n      rangeMax = _a[1]; // 约束值在 scale 的 range 之间\n\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n\n  if (max > rangeMax) {\n    max = rangeMax;\n  } // 范围大于整个 view 的范围，则返回 null\n\n\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n\n  var minValue = scale.invert(min);\n  var maxValue = scale.invert(max);\n\n  if (scale.isCategory) {\n    var minIndex = scale.values.indexOf(minValue);\n    var maxIndex = scale.values.indexOf(maxValue);\n    var arr_1 = scale.values.slice(minIndex, maxIndex + 1);\n    return function (value) {\n      return arr_1.includes(value);\n    };\n  } else {\n    return function (value) {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\n\n\nvar EVENTS;\n\n(function (EVENTS) {\n  EVENTS[\"FILTER\"] = \"brush-filter-processing\";\n  EVENTS[\"RESET\"] = \"brush-filter-reset\";\n  EVENTS[\"BEFORE_FILTER\"] = \"brush-filter:beforefilter\";\n  EVENTS[\"AFTER_FILTER\"] = \"brush-filter:afterfilter\";\n  EVENTS[\"BEFORE_RESET\"] = \"brush-filter:beforereset\";\n  EVENTS[\"AFTER_RESET\"] = \"brush-filter:afterreset\";\n})(EVENTS || (EVENTS = {}));\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n/**\n * 范围过滤的 Action\n * @ignore\n */\n\nvar RangeFilter =\n/** @class */\nfunction (_super) {\n  __extends(RangeFilter, _super);\n\n  function RangeFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 范围过滤生效的字段/维度，可以是 x, y\n     */\n\n\n    _this.dims = ['x', 'y'];\n    /** 起始点 */\n\n    _this.startPoint = null;\n    _this.isStarted = false;\n    return _this;\n  } // x,y 是否生效\n\n\n  RangeFilter.prototype.hasDim = function (dim) {\n    return this.dims.includes(dim);\n  };\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n\n\n  RangeFilter.prototype.start = function () {\n    var context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  };\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n\n\n  RangeFilter.prototype.filter = function () {\n    var startPoint;\n    var currentPoint;\n\n    if (isMask(this.context)) {\n      var maskShape = this.context.event.target;\n      var bbox = maskShape.getCanvasBBox();\n      startPoint = {\n        x: bbox.x,\n        y: bbox.y\n      };\n      currentPoint = {\n        x: bbox.maxX,\n        y: bbox.maxY\n      };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n\n    var _a = this.context,\n        view = _a.view,\n        event = _a.event;\n    var payload = {\n      view: view,\n      event: event,\n      dims: this.dims\n    };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n    var coord = view.getCoordinate();\n    var normalCurrent = coord.invert(currentPoint);\n    var normalStart = coord.invert(startPoint); // 设置 x 方向的 filter\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      var filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    } // 设置 y 方向的 filter\n\n\n    if (this.hasDim('y')) {\n      var yScale = view.getYScales()[0];\n      var filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n\n    this.reRender(view, {\n      source: EVENTS.FILTER\n    });\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  };\n  /**\n   * 结束\n   */\n\n\n  RangeFilter.prototype.end = function () {\n    this.isStarted = false;\n  };\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n\n\n  RangeFilter.prototype.reset = function () {\n    var view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n    this.isStarted = false;\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      var yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n\n    this.reRender(view, {\n      source: EVENTS.RESET\n    });\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  };\n  /**\n   * 对 view 进行过滤\n   */\n\n\n  RangeFilter.prototype.filterView = function (view, field, filter) {\n    view.filter(field, filter);\n  };\n  /**\n   * 重新渲染\n   * @param view\n   */\n\n\n  RangeFilter.prototype.reRender = function (view, payload) {\n    view.render(true, payload);\n  };\n\n  return RangeFilter;\n}(Action);\n\nexport default RangeFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/data/range-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Point, Scale } from '../../../dependents';\nimport { FilterCondition, EventPayload } from '../../../interface';\nimport { View, Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n\n// 获取对应的 scale\nfunction getFilter(scale: Scale, dim: string, point1: Point, point2: Point): FilterCondition {\n  let min = Math.min(point1[dim], point2[dim]);\n  let max = Math.max(point1[dim], point2[dim]);\n  const [rangeMin, rangeMax] = scale.range;\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  const minValue = scale.invert(min);\n  const maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    const minIndex = scale.values.indexOf(minValue);\n    const maxIndex = scale.values.indexOf(maxValue);\n    const arr = scale.values.slice(minIndex, maxIndex + 1);\n    return (value) => {\n      return arr.includes(value);\n    };\n  } else {\n    return (value) => {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\nenum EVENTS {\n  FILTER = 'brush-filter-processing',\n  RESET = 'brush-filter-reset',\n  BEFORE_FILTER = 'brush-filter:beforefilter',\n  AFTER_FILTER = 'brush-filter:afterfilter',\n  BEFORE_RESET = 'brush-filter:beforereset',\n  AFTER_RESET = 'brush-filter:afterreset',\n}\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n\n/**\n * 范围过滤的 Action\n * @ignore\n */\nclass RangeFilter extends Action {\n  /** 允许外部传入 dims */\n  protected cfgFields: ['dims'];\n  /**\n   * 范围过滤生效的字段/维度，可以是 x, y\n   */\n  protected dims: string[] = ['x', 'y'];\n  /** 起始点 */\n  protected startPoint: Point = null;\n\n  private isStarted: boolean = false;\n\n  // x,y 是否生效\n  private hasDim(dim: string) {\n    return this.dims.includes(dim);\n  }\n\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  public start() {\n    const context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  }\n\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  public filter() {\n    let startPoint;\n    let currentPoint;\n    if (isMask(this.context)) {\n      const maskShape = this.context.event.target;\n      const bbox = maskShape.getCanvasBBox();\n      startPoint = { x: bbox.x, y: bbox.y };\n      currentPoint = { x: bbox.maxX, y: bbox.maxY };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    const { view, event } = this.context;\n    const payload = { view, event, dims: this.dims };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n\n    const coord = view.getCoordinate();\n    const normalCurrent = coord.invert(currentPoint);\n    const normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      const filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      const yScale = view.getYScales()[0];\n      const filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, { source: EVENTS.FILTER });\n\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n  }\n\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  public reset() {\n    const view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      const yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n    this.reRender(view, { source: EVENTS.RESET });\n\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  }\n\n  /**\n   * 对 view 进行过滤\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    view.filter(field, filter);\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View, payload?: EventPayload) {\n    view.render(true, payload);\n  }\n}\n\nexport default RangeFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}