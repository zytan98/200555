{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Canvas as GCanvas } from '@antv/g-canvas';\nimport { Canvas as GSVGCanvas } from '@antv/g-svg';\nimport { isString, isNil, each, debounce } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { ext } from '@antv/matrix-util';\nimport Base from '../base';\nvar max = Math.max;\nvar transform = ext.transform;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDom(\"\\n      <div\\n        class=\" + cfgs.viewportClassName + \"\\n        style='position:absolute;\\n          left:0;\\n          top:0;\\n          box-sizing:border-box;\\n          outline: 2px solid #1980ff'\\n        draggable=true>\\n      </div>\");\n    var isFireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1; // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    viewport.addEventListener('dragstart', function (e) {\n      var _a, _b;\n\n      if (e.dataTransfer) {\n        var img = new Image();\n        img.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' %3E%3Cpath /%3E%3C/svg%3E\";\n        (_b = (_a = e.dataTransfer).setDragImage) === null || _b === void 0 ? void 0 : _b.call(_a, img, 0, 0);\n\n        try {\n          e.dataTransfer.setData('text/html', 'view-port-minimap');\n        } catch (_c) {\n          // support IE\n          e.dataTransfer.setData('text', 'view-port-minimap');\n        }\n      }\n\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener(isFireFox ? 'dragover' : 'drag', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('dragend', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup); // 当 renderer 是 svg，由于渲染引擎的 bug，这里需要将 visible 为 false 的元素手动隐藏\n\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      // 递归更新子元素\n      this.updateVisible(clonedGroup);\n    }\n  }; // svg 在 canvas.add(clonedGroup) 之后会出现 visible 为 false 的元素被展示出来，需要递归更新\n\n\n  MiniMap.prototype.updateVisible = function (ele) {\n    var _this = this;\n\n    if (!ele.isGroup() && !ele.get('visible')) {\n      ele.hide();\n    } else {\n      var children = ele.get('children');\n      if (!children || !children.length) return;\n      children.forEach(function (child) {\n        if (!child.get('visible')) child.hide();\n\n        _this.updateVisible(child);\n      });\n    }\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDom(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDom('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    containerDOM.addEventListener('dragenter', function (e) {\n      e.preventDefault();\n    });\n    containerDOM.addEventListener('dragover', function (e) {\n      e.preventDefault();\n    });\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size'); // 用户定义的 minimap size\n\n    var canvas = this.get('canvas'); // minimap 的 canvas\n\n    var type = this.get('type'); // minimap 的类型\n\n    var padding = this.get('padding'); // 用户额定义的 minimap 的 padding\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox(); // 主图的 bbox\n\n    var graphBBox = graph.get('canvas').getCanvasBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy] // 移动到画布中心\n    ]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-plugin/es/minimap/index.js"],"names":["__extends","_extendStatics","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","Canvas","GCanvas","GSVGCanvas","isString","isNil","each","debounce","createDom","modifyCSS","ext","Base","max","Math","transform","DEFAULT_MODE","KEYSHAPE_MODE","DELEGATE_MODE","SVG","MiniMap","_super","_this","handleUpdateCanvas","event","self","destroyed","updateCanvas","getDefaultCfgs","container","className","viewportClassName","type","padding","size","delegateStyle","fill","stroke","refresh","getEvents","beforepaint","beforeanimate","afteranimate","viewportchange","disableRefresh","set","enableRefresh","disableOneRefresh","initViewport","cfgs","_cfgs","graph","canvas","get","containerDOM","viewport","isFireFox","navigator","userAgent","toLowerCase","indexOf","x","y","dragging","left","top","width","height","ratio","zoom","addEventListener","e","_a","_b","dataTransfer","img","Image","src","setDragImage","setData","_c","target","style","parseInt","getZoom","clientX","clientY","dx","dy","translate","appendChild","updateViewport","totaldx","totaldy","graphWidth","graphHeight","topLeft","getPointByCanvas","bottomRight","right","bottom","correctLeft","correctTop","updateGraphShapes","graphGroup","clonedGroup","clone","resetMatrix","clear","add","renderer","updateVisible","ele","isGroup","hide","children","forEach","child","updateKeyShapes","getEdges","edge","updateOneEdgeKeyShape","getNodes","node","updateOneNodeKeyShape","clearDestroyedShapes","item","group","addGroup","itemMap","mappedItem","bbox","getBBox","cKeyShape","keyShapeStyle","attr","attrs","centerX","centerY","shapeType","minX","minY","isVisible","exist","updateDelegateShapes","updateOneNodeDelegateShape","keys","shape","remove","path","toBack","addShape","name","init","initContainer","on","parentNode","document","getElementById","preventDefault","isRefresh","getCanvasBBox","graphBBox","Number","isFinite","min","matrix","setMatrix","getCanvas","getViewport","getContainer","destroy","removeChild"],"mappings":"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","sourcesContent":["var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Canvas as GCanvas } from '@antv/g-canvas';\nimport { Canvas as GSVGCanvas } from '@antv/g-svg';\nimport { isString, isNil, each, debounce } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { ext } from '@antv/matrix-util';\nimport Base from '../base';\nvar max = Math.max;\nvar transform = ext.transform;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDom(\"\\n      <div\\n        class=\" + cfgs.viewportClassName + \"\\n        style='position:absolute;\\n          left:0;\\n          top:0;\\n          box-sizing:border-box;\\n          outline: 2px solid #1980ff'\\n        draggable=true>\\n      </div>\");\n    var isFireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1; // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    viewport.addEventListener('dragstart', function (e) {\n      var _a, _b;\n\n      if (e.dataTransfer) {\n        var img = new Image();\n        img.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' %3E%3Cpath /%3E%3C/svg%3E\";\n        (_b = (_a = e.dataTransfer).setDragImage) === null || _b === void 0 ? void 0 : _b.call(_a, img, 0, 0);\n\n        try {\n          e.dataTransfer.setData('text/html', 'view-port-minimap');\n        } catch (_c) {\n          // support IE\n          e.dataTransfer.setData('text', 'view-port-minimap');\n        }\n      }\n\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener(isFireFox ? 'dragover' : 'drag', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('dragend', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup); // 当 renderer 是 svg，由于渲染引擎的 bug，这里需要将 visible 为 false 的元素手动隐藏\n\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      // 递归更新子元素\n      this.updateVisible(clonedGroup);\n    }\n  }; // svg 在 canvas.add(clonedGroup) 之后会出现 visible 为 false 的元素被展示出来，需要递归更新\n\n\n  MiniMap.prototype.updateVisible = function (ele) {\n    var _this = this;\n\n    if (!ele.isGroup() && !ele.get('visible')) {\n      ele.hide();\n    } else {\n      var children = ele.get('children');\n      if (!children || !children.length) return;\n      children.forEach(function (child) {\n        if (!child.get('visible')) child.hide();\n\n        _this.updateVisible(child);\n      });\n    }\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDom(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDom('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    containerDOM.addEventListener('dragenter', function (e) {\n      e.preventDefault();\n    });\n    containerDOM.addEventListener('dragover', function (e) {\n      e.preventDefault();\n    });\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size'); // 用户定义的 minimap size\n\n    var canvas = this.get('canvas'); // minimap 的 canvas\n\n    var type = this.get('type'); // minimap 的类型\n\n    var padding = this.get('padding'); // 用户额定义的 minimap 的 padding\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox(); // 主图的 bbox\n\n    var graphBBox = graph.get('canvas').getCanvasBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy] // 移动到画布中心\n    ]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;"]},"metadata":{},"sourceType":"module"}