{"ast":null,"code":"import { Base } from \"../layout/base\";\nimport { isObject } from \"../util\";\nconst map = new Map();\nexport const registerLayout = (name, layoutOverride) => {\n  if (map.get(name)) {\n    console.warn(`The layout with the name ${name} exists already, it will be overridden`);\n  }\n\n  if (isObject(layoutOverride)) {\n    // tslint:disable-next-line: max-classes-per-file\n    class GLayout extends Base {\n      constructor(cfg) {\n        super();\n        const self = this;\n        const props = {};\n        const defaultCfg = self.getDefaultCfg();\n        Object.assign(props, defaultCfg, layoutOverride, cfg);\n        Object.keys(props).forEach(key => {\n          const value = props[key];\n          self[key] = value;\n        });\n      }\n\n    }\n\n    map.set(name, GLayout);\n  } else {\n    map.set(name, layoutOverride);\n  }\n};\nexport const unRegisterLayout = name => {\n  if (map.has(name)) {\n    map.delete(name);\n  }\n};\nexport const getLayoutByName = name => {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n\n  return null;\n};","map":{"version":3,"sources":["../../src/registy/index.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,QAAT,QAAyB,SAAzB;AAEA,MAAM,GAAG,GAAqB,IAAI,GAAJ,EAA9B;AAEA,OAAO,MAAM,cAAc,GAAG,CAAC,IAAD,EAAe,cAAf,KAAsC;AAClE,MAAI,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAJ,EAAmB;AACjB,IAAA,OAAO,CAAC,IAAR,CAAa,4BAA4B,IAAI,wCAA7C;AACD;;AACD,MAAI,QAAQ,CAAC,cAAD,CAAZ,EAA8B;AAC5B;AACA,UAAM,OAAN,SAAsB,IAAtB,CAA0B;AACxB,MAAA,WAAA,CAAY,GAAZ,EAAoB;AAClB;AACA,cAAM,IAAI,GAAG,IAAb;AACA,cAAM,KAAK,GAAQ,EAAnB;AACA,cAAM,UAAU,GAAG,IAAI,CAAC,aAAL,EAAnB;AACA,QAAA,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,UAArB,EAAiC,cAAjC,EAAiD,GAAjD;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA4B,GAAD,IAAgB;AACzC,gBAAM,KAAK,GAAG,KAAK,CAAC,GAAD,CAAnB;AACA,UAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,KAAZ;AACD,SAHD;AAID;;AAXuB;;AAa1B,IAAA,GAAG,CAAC,GAAJ,CAAQ,IAAR,EAAc,OAAd;AACD,GAhBD,MAgBO;AACL,IAAA,GAAG,CAAC,GAAJ,CAAQ,IAAR,EAAc,cAAd;AACD;AACF,CAvBM;AAyBP,OAAO,MAAM,gBAAgB,GAAI,IAAD,IAAiB;AAC/C,MAAI,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAJ,EAAmB;AACjB,IAAA,GAAG,CAAC,MAAJ,CAAW,IAAX;AACD;AACF,CAJM;AAMP,OAAO,MAAM,eAAe,GAAI,IAAD,IAAiB;AAC9C,MAAI,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAJ,EAAmB;AACjB,WAAO,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAP;AACD;;AACD,SAAO,IAAP;AACD,CALM","sourceRoot":"","sourcesContent":["import { Base } from \"../layout/base\";\nimport { isObject } from \"../util\";\nconst map = new Map();\nexport const registerLayout = (name, layoutOverride) => {\n    if (map.get(name)) {\n        console.warn(`The layout with the name ${name} exists already, it will be overridden`);\n    }\n    if (isObject(layoutOverride)) {\n        // tslint:disable-next-line: max-classes-per-file\n        class GLayout extends Base {\n            constructor(cfg) {\n                super();\n                const self = this;\n                const props = {};\n                const defaultCfg = self.getDefaultCfg();\n                Object.assign(props, defaultCfg, layoutOverride, cfg);\n                Object.keys(props).forEach((key) => {\n                    const value = props[key];\n                    self[key] = value;\n                });\n            }\n        }\n        map.set(name, GLayout);\n    }\n    else {\n        map.set(name, layoutOverride);\n    }\n};\nexport const unRegisterLayout = (name) => {\n    if (map.has(name)) {\n        map.delete(name);\n    }\n};\nexport const getLayoutByName = (name) => {\n    if (map.has(name)) {\n        return map.get(name);\n    }\n    return null;\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}