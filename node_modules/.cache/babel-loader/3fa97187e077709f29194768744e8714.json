{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { get } from '@antv/util';\nimport { point } from '../../adaptor/geometries/point';\nimport { interaction as baseInteraction, animation, theme, legend, annotation, scale, pattern } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { getAdjustAppendPadding, resolveAllPadding } from '../../utils/padding';\nimport { transformData, resolvePaddingForCircle } from './utils';\nimport { RAW_FIELDS } from './constant';\n/**\n * 获取默认 option\n * @param params\n */\n\nfunction defaultOptions(params) {\n  var chart = params.chart;\n  var diameter = Math.min(chart.viewBBox.width, chart.viewBBox.height);\n  return deepAssign({\n    options: {\n      size: function (_a) {\n        var r = _a.r;\n        return r * diameter;\n      }\n    }\n  }, params);\n}\n/**\n * padding 配置\n * @param params\n */\n\n\nfunction padding(params) {\n  var options = params.options,\n      chart = params.chart; // 通过改变 padding，修改 coordinate 的绘制区域\n\n  var containerSize = chart.viewBBox;\n  var padding = options.padding,\n      appendPadding = options.appendPadding,\n      drilldown = options.drilldown;\n  var tempAppendPadding = appendPadding;\n\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    var appendPaddingByDrilldown = getAdjustAppendPadding(chart.appendPadding, get(drilldown, ['breadCrumb', 'position']));\n    tempAppendPadding = resolveAllPadding([appendPaddingByDrilldown, appendPadding]);\n  }\n\n  var finalPadding = resolvePaddingForCircle(padding, tempAppendPadding, containerSize).finalPadding;\n  chart.padding = finalPadding;\n  chart.appendPadding = 0;\n  return params;\n}\n/**\n * 字段\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var padding = chart.padding,\n      appendPadding = chart.appendPadding;\n  var color = options.color,\n      colorField = options.colorField,\n      pointStyle = options.pointStyle,\n      hierarchyConfig = options.hierarchyConfig,\n      sizeField = options.sizeField,\n      _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a,\n      drilldown = options.drilldown;\n  var data = transformData({\n    data: options.data,\n    hierarchyConfig: hierarchyConfig,\n    enableDrillDown: drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled,\n    rawFields: rawFields\n  });\n  chart.data(data);\n  var containerSize = chart.viewBBox;\n  var finalSize = resolvePaddingForCircle(padding, appendPadding, containerSize).finalSize; // 有sizeField的时候，例如 value ，可以选择映射 size 函数，自己计算出映射的半径\n\n  var circleSize = function (_a) {\n    var r = _a.r;\n    return r * finalSize;\n  }; // 默认配置\n\n\n  if (sizeField) {\n    circleSize = function (d) {\n      return d[sizeField] * finalSize;\n    }; // 目前只有 r 通道映射效果会正常\n\n  } // geometry\n\n\n  point(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField,\n      sizeField: sizeField,\n      rawFields: __spreadArrays(RAW_FIELDS, rawFields),\n      point: {\n        color: color,\n        style: pointStyle,\n        shape: 'circle',\n        size: circleSize\n      }\n    }\n  }));\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  return flow(scale({}, {\n    // 必须强制为 nice\n    x: {\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1,\n      nice: true\n    },\n    y: {\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1,\n      nice: true\n    }\n  }))(params);\n}\n/**\n * tooltip 配置\n * @param params\n */\n\nfunction tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip; // 设置了 fields，就不进行 customItems 了; 设置 formatter 时，需要搭配 fields\n\n    if (!get(tooltip, 'fields')) {\n      tooltipOptions = deepAssign({}, {\n        customItems: function (items) {\n          return items.map(function (item) {\n            var scales = get(chart.getOptions(), 'scales');\n            var nameFormatter = get(scales, ['name', 'formatter'], function (v) {\n              return v;\n            });\n            var valueFormatter = get(scales, ['value', 'formatter'], function (v) {\n              return v;\n            });\n            return __assign(__assign({}, item), {\n              name: nameFormatter(item.data.name),\n              value: valueFormatter(item.data.value)\n            });\n          });\n        }\n      }, tooltipOptions);\n    }\n\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n/**\n * 坐标轴, 默认关闭\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n\nfunction adaptorInteraction(options) {\n  var drilldown = options.drilldown,\n      _a = options.interactions,\n      interactions = _a === void 0 ? [] : _a;\n\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    return deepAssign({}, options, {\n      interactions: __spreadArrays(interactions, [{\n        type: 'drill-down',\n        cfg: {\n          drillDownConfig: drilldown,\n          transformData: transformData,\n          enableDrillDown: true\n        }\n      }])\n    });\n  }\n\n  return options;\n}\n/**\n * 交互配置\n * @param params\n * @returns\n */\n\n\nfunction interaction(params) {\n  var chart = params.chart,\n      options = params.options;\n  baseInteraction({\n    chart: chart,\n    options: adaptorInteraction(options)\n  });\n  return params;\n}\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(pattern('pointStyle'), defaultOptions, padding, theme, meta, geometry, axis, legend, tooltip, interaction, animation, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/circle-packing/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from '@antv/util';\nimport { Types } from '@antv/g2';\nimport { point } from '../../adaptor/geometries/point';\nimport { Params } from '../../core/adaptor';\nimport {\n  interaction as baseInteraction,\n  animation,\n  theme,\n  legend,\n  annotation,\n  scale,\n  pattern,\n} from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { getAdjustAppendPadding, resolveAllPadding } from '../../utils/padding';\nimport { transformData, resolvePaddingForCircle } from './utils';\nimport { CirclePackingOptions } from './types';\nimport { RAW_FIELDS } from './constant';\n\n/**\n * 获取默认 option\n * @param params\n */\nfunction defaultOptions(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { chart } = params;\n  const diameter = Math.min(chart.viewBBox.width, chart.viewBBox.height);\n\n  return deepAssign(\n    {\n      options: {\n        size: ({ r }) => r * diameter, // 当autofit：false时，默认给固定半径\n      },\n    },\n    params\n  );\n}\n\n/**\n * padding 配置\n * @param params\n */\nfunction padding(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { options, chart } = params;\n  // 通过改变 padding，修改 coordinate 的绘制区域\n  const containerSize = chart.viewBBox;\n  const { padding, appendPadding, drilldown } = options;\n\n  let tempAppendPadding = appendPadding;\n  if (drilldown?.enabled) {\n    const appendPaddingByDrilldown = getAdjustAppendPadding(\n      chart.appendPadding,\n      get(drilldown, ['breadCrumb', 'position'])\n    );\n    tempAppendPadding = resolveAllPadding([appendPaddingByDrilldown, appendPadding]);\n  }\n\n  const { finalPadding } = resolvePaddingForCircle(padding, tempAppendPadding, containerSize);\n  chart.padding = finalPadding;\n  chart.appendPadding = 0;\n\n  return params;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { chart, options } = params;\n  const { padding, appendPadding } = chart;\n  const { color, colorField, pointStyle, hierarchyConfig, sizeField, rawFields = [], drilldown } = options;\n\n  const data = transformData({\n    data: options.data,\n    hierarchyConfig,\n    enableDrillDown: drilldown?.enabled,\n    rawFields,\n  });\n  chart.data(data);\n\n  const containerSize = chart.viewBBox;\n  const { finalSize } = resolvePaddingForCircle(padding, appendPadding, containerSize);\n  // 有sizeField的时候，例如 value ，可以选择映射 size 函数，自己计算出映射的半径\n  let circleSize = ({ r }) => r * finalSize; // 默认配置\n\n  if (sizeField) {\n    circleSize = (d) => d[sizeField] * finalSize; // 目前只有 r 通道映射效果会正常\n  }\n\n  // geometry\n  point(\n    deepAssign({}, params, {\n      options: {\n        xField: 'x',\n        yField: 'y',\n        seriesField: colorField,\n        sizeField,\n        rawFields: [...RAW_FIELDS, ...rawFields],\n        point: {\n          color,\n          style: pointStyle,\n          shape: 'circle',\n          size: circleSize,\n        },\n      },\n    })\n  );\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  return flow(\n    scale(\n      {},\n      {\n        // 必须强制为 nice\n        x: { min: 0, max: 1, minLimit: 0, maxLimit: 1, nice: true },\n        y: { min: 0, max: 1, minLimit: 0, maxLimit: 1, nice: true },\n      }\n    )\n  )(params);\n}\n\n/**\n * tooltip 配置\n * @param params\n */\nfunction tooltip(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    let tooltipOptions = tooltip;\n    // 设置了 fields，就不进行 customItems 了; 设置 formatter 时，需要搭配 fields\n    if (!get(tooltip, 'fields')) {\n      tooltipOptions = deepAssign(\n        {},\n        {\n          customItems: (items: Types.TooltipItem[]) =>\n            items.map((item) => {\n              const scales = get(chart.getOptions(), 'scales');\n              const nameFormatter = get(scales, ['name', 'formatter'], (v) => v);\n              const valueFormatter = get(scales, ['value', 'formatter'], (v) => v);\n              return {\n                ...item,\n                name: nameFormatter(item.data.name),\n                value: valueFormatter(item.data.value),\n              };\n            }),\n        },\n        tooltipOptions\n      );\n    }\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n\n/**\n * 坐标轴, 默认关闭\n * @param params\n */\nfunction axis(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\nfunction adaptorInteraction(options: CirclePackingOptions): CirclePackingOptions {\n  const { drilldown, interactions = [] } = options;\n\n  if (drilldown?.enabled) {\n    return deepAssign({}, options, {\n      interactions: [\n        ...interactions,\n        {\n          type: 'drill-down',\n          cfg: { drillDownConfig: drilldown, transformData, enableDrillDown: true },\n        },\n      ],\n    });\n  }\n  return options;\n}\n\n/**\n * 交互配置\n * @param params\n * @returns\n */\nfunction interaction(params: Params<CirclePackingOptions>): Params<CirclePackingOptions> {\n  const { chart, options } = params;\n\n  baseInteraction({\n    chart,\n    options: adaptorInteraction(options),\n  });\n\n  return params;\n}\n\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<CirclePackingOptions>) {\n  return flow(\n    pattern('pointStyle'),\n    defaultOptions,\n    padding,\n    theme,\n    meta,\n    geometry,\n    axis,\n    legend,\n    tooltip,\n    interaction,\n    animation,\n    annotation()\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}