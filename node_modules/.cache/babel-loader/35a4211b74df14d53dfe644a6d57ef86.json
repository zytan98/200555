{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, transformOptions, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n\nvar Scatter =\n/** @class */\nfunction (_super) {\n  __extends(Scatter, _super);\n\n  function Scatter(container, options) {\n    var _this = _super.call(this, container, options) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'scatter'; // 监听 brush 事件，处理 meta\n\n    _this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, function (evt) {\n      var _a, _b; // 运行时，读取 option\n\n\n      var _c = _this,\n          options = _c.options,\n          chart = _c.chart;\n\n      if (((_a = evt.data) === null || _a === void 0 ? void 0 : _a.source) === BRUSH_FILTER_EVENTS.FILTER) {\n        var filteredData = _this.chart.filterData(_this.chart.getData());\n\n        meta({\n          chart: chart,\n          options: __assign(__assign({}, options), {\n            data: filteredData\n          })\n        });\n      }\n\n      if (((_b = evt.data) === null || _b === void 0 ? void 0 : _b.source) === BRUSH_FILTER_EVENTS.RESET) {\n        meta({\n          chart: chart,\n          options: options\n        });\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n\n\n  Scatter.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n\n\n  Scatter.prototype.changeData = function (data) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, {\n      data: data\n    })));\n\n    var _a = this,\n        options = _a.options,\n        chart = _a.chart;\n\n    meta({\n      chart: chart,\n      options: options\n    });\n    this.chart.changeData(data);\n  };\n  /**\n   * 获取 散点图 的适配器\n   */\n\n\n  Scatter.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  Scatter.prototype.getDefaultOptions = function () {\n    return Scatter.getDefaultOptions();\n  };\n\n  return Scatter;\n}(Plot);\n\nexport { Scatter };","map":{"version":3,"sources":["../../../src/plots/scatter/index.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,EAA8B,gBAA9B,QAAsD,UAAtD;AACA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,UAAT,QAA2B,aAA3B;AAEA,SAAS,OAAT,EAAkB,gBAAlB,EAAoC,IAApC,QAAgD,WAAhD;AACA,SAAS,eAAT,QAAgC,YAAhC;AACA,OAAO,gBAAP;;AAIA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAY3B,WAAA,OAAA,CAAY,SAAZ,EAA6C,OAA7C,EAAoE;AAApE,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,OAAjB,KAAyB,IAD3B;AAHA;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf,CAE6D,CAGlE;;AACA,IAAA,KAAI,CAAC,EAAL,CAAQ,gBAAgB,CAAC,aAAzB,EAAwC,UAAC,GAAD,EAAI;iBAAA,CAC1C;;;AACM,UAAA,EAAA,GAAqB,KAArB;AAAA,UAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,UAAW,KAAK,GAAA,EAAA,CAAA,KAAhB;;AACN,UAAI,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,IAAJ,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAQ,EAAA,CAAE,MAAV,MAAqB,mBAAmB,CAAC,MAA7C,EAAqD;AACnD,YAAM,YAAY,GAAG,KAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,KAAI,CAAC,KAAL,CAAW,OAAX,EAAtB,CAArB;;AACA,QAAA,IAAI,CAAC;AAAE,UAAA,KAAK,EAAA,KAAP;AAAS,UAAA,OAAO,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,OAAP,CAAA,EAAc;AAAE,YAAA,IAAI,EAAE;AAAR,WAAd;AAAhB,SAAD,CAAJ;AACD;;AAED,UAAI,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,IAAJ,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAQ,EAAA,CAAE,MAAV,MAAqB,mBAAmB,CAAC,KAA7C,EAAoD;AAClD,QAAA,IAAI,CAAC;AAAE,UAAA,KAAK,EAAA,KAAP;AAAS,UAAA,OAAO,EAAA;AAAhB,SAAD,CAAJ;AACD;AACF,KAXD;;;AAYD;AA3BD;;;AAGG;;;AACI,EAAA,OAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAyBP;;;AAGG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA8C;AAC5C,SAAK,YAAL,CAAkB,gBAAgB,CAAC,UAAU,CAAC,EAAD,EAAK,KAAK,OAAV,EAAmB;AAAE,MAAA,IAAI,EAAA;AAAN,KAAnB,CAAX,CAAlC;;AACM,QAAA,EAAA,GAAqB,IAArB;AAAA,QAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,QAAW,KAAK,GAAA,EAAA,CAAA,KAAhB;;AACN,IAAA,IAAI,CAAC;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,OAAO,EAAA;AAAhB,KAAD,CAAJ;AACA,SAAK,KAAL,CAAW,UAAX,CAAsB,IAAtB;AACD,GALM;AAOP;;AAEG;;;AACO,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAIA,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,OAAO,CAAC,iBAAR,EAAP;AACD,GAFS;;AAGZ,SAAA,OAAA;AAAC,CAnDD,CAA6B,IAA7B,CAAA","sourcesContent":["import { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { deepAssign } from '../../utils';\nimport { ScatterOptions } from './types';\nimport { adaptor, transformOptions, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n\nexport type { ScatterOptions };\n\nexport class Scatter extends Plot<ScatterOptions> {\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<ScatterOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'scatter';\n\n  constructor(container: string | HTMLElement, options: ScatterOptions) {\n    super(container, options);\n\n    // 监听 brush 事件，处理 meta\n    this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, (evt) => {\n      // 运行时，读取 option\n      const { options, chart } = this;\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.FILTER) {\n        const filteredData = this.chart.filterData(this.chart.getData());\n        meta({ chart, options: { ...options, data: filteredData } });\n      }\n\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.RESET) {\n        meta({ chart, options });\n      }\n    });\n  }\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data: ScatterOptions['data']) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, { data })));\n    const { options, chart } = this;\n    meta({ chart, options });\n    this.chart.changeData(data);\n  }\n\n  /**\n   * 获取 散点图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ScatterOptions> {\n    return adaptor;\n  }\n\n  protected getDefaultOptions() {\n    return Scatter.getDefaultOptions();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}