{"ast":null,"code":"import { theme, scale, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { adjustYMetaByZero } from '../../utils/data';\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      color = options.color,\n      areaStyle = options.areaStyle,\n      pointOptions = options.point,\n      lineOptions = options.line;\n  var pointState = pointOptions === null || pointOptions === void 0 ? void 0 : pointOptions.state;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData);\n  var primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      line: lineOptions,\n      point: pointOptions\n    }\n  });\n  var second = deepAssign({}, primary, {\n    options: {\n      tooltip: false\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  }); // area geometry 处理\n\n  area(primary);\n  line(second);\n  point(pointParams);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a, _b;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      data = options.data;\n  var seriesData = getTinyData(data);\n  return flow(scale((_a = {}, _a[X_FIELD] = xAxis, _a[Y_FIELD] = yAxis, _a), (_b = {}, _b[X_FIELD] = {\n    type: 'cat'\n  }, _b[Y_FIELD] = adjustYMetaByZero(seriesData, Y_FIELD), _b)))(params);\n}\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  return flow(pattern('areaStyle'), geometry, meta, tooltip, theme, animation, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/tiny-area/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { theme, scale, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { TinyAreaOptions } from './types';\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyAreaOptions>): Params<TinyAreaOptions> {\n  const { chart, options } = params;\n  const { data, color, areaStyle, point: pointOptions, line: lineOptions } = options;\n  const pointState = pointOptions?.state;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  const primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: { color, style: areaStyle },\n      line: lineOptions,\n      point: pointOptions,\n    },\n  });\n  const second = deepAssign({}, primary, { options: { tooltip: false } });\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  // area geometry 处理\n  area(primary);\n  line(second);\n  point(pointParams);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<TinyAreaOptions>): Params<TinyAreaOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, data } = options;\n  const seriesData = getTinyData(data);\n\n  return flow(\n    scale(\n      {\n        [X_FIELD]: xAxis,\n        [Y_FIELD]: yAxis,\n      },\n      {\n        [X_FIELD]: {\n          type: 'cat',\n        },\n        [Y_FIELD]: adjustYMetaByZero(seriesData, Y_FIELD),\n      }\n    )\n  )(params);\n}\n\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyAreaOptions>) {\n  return flow(pattern('areaStyle'), geometry, meta, tooltip, theme, animation, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}