{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { groupBy, min, max } from '@antv/util';\nimport pdf from 'pdfast';\nimport { quantile } from '../../utils/transform/quantile';\nexport var toBoxValue = function (values) {\n  return {\n    low: min(values),\n    high: max(values),\n    q1: quantile(values, 0.25),\n    q3: quantile(values, 0.75),\n    median: quantile(values, [0.5]),\n    minMax: [min(values), max(values)],\n    quantile: [quantile(values, 0.25), quantile(values, 0.75)]\n  };\n};\nexport var toViolinValue = function (values, pdfOptions) {\n  var pdfResults = pdf.create(values, pdfOptions);\n  return {\n    violinSize: pdfResults.map(function (result) {\n      return result.y;\n    }),\n    violinY: pdfResults.map(function (result) {\n      return result.x;\n    })\n  };\n};\nexport var transformViolinData = function (options) {\n  var xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField,\n      data = options.data,\n      kde = options.kde;\n  /** 生成概率密度函数的配置 */\n\n  var pdfOptions = {\n    min: kde.min,\n    max: kde.max,\n    size: kde.sampleSize,\n    width: kde.width\n  }; // 无拆分\n\n  if (!seriesField) {\n    var group_1 = groupBy(data, xField);\n    return Object.keys(group_1).map(function (x) {\n      var records = group_1[x];\n      var values = records.map(function (record) {\n        return record[yField];\n      });\n      return __assign(__assign({\n        x: x\n      }, toViolinValue(values, pdfOptions)), toBoxValue(values));\n    });\n  } // 有拆分\n\n\n  var resultList = [];\n  var seriesGroup = groupBy(data, seriesField);\n  Object.keys(seriesGroup).forEach(function (series) {\n    var group = groupBy(seriesGroup[series], xField);\n    return Object.keys(group).forEach(function (key) {\n      var _a;\n\n      var records = group[key];\n      var values = records.map(function (record) {\n        return record[yField];\n      });\n      resultList.push(__assign(__assign((_a = {\n        x: key\n      }, _a[seriesField] = series, _a), toViolinValue(values, pdfOptions)), toBoxValue(values)));\n    });\n  });\n  return resultList;\n};","map":{"version":3,"sources":["../../../src/plots/violin/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, min, max } from '@antv/util';\nimport pdf from 'pdfast';\nimport { quantile } from '../../utils/transform/quantile';\nimport { ViolinOptions } from './types';\n\nexport type ViolinData = {\n  /** X轴 */\n  x: string;\n\n  /** 小提琴轮廓的 size 通道数据 */\n  violinSize: number[];\n  /** 小提琴轮廓的 y 通道数据 */\n  violinY: number[];\n\n  // 箱线图基础数据\n  /** 最大值 */\n  high: number;\n  /** 最小值 */\n  low: number;\n  /** 上四分位数 */\n  q1: number;\n  /** 下四分位数 */\n  q3: number;\n  /** 箱线图中的中位值 */\n  median: number[];\n\n  /** 箱线图中的上线边缘线 */\n  minMax: number[];\n  /** 箱线图中的上下四分位点 */\n  quantile: number[];\n};\n\nexport type PdfOptions = {\n  min: number;\n  max: number;\n  size: number;\n  width: number;\n};\n\nexport const toBoxValue = (values: number[]) => {\n  return {\n    low: min(values),\n    high: max(values),\n    q1: quantile(values, 0.25),\n    q3: quantile(values, 0.75),\n    median: quantile(values, [0.5]),\n    minMax: [min(values), max(values)],\n    quantile: [quantile(values, 0.25), quantile(values, 0.75)],\n  };\n};\n\nexport const toViolinValue = (values: number[], pdfOptions: PdfOptions) => {\n  const pdfResults: Array<{ x: number; y: number }> = pdf.create(values, pdfOptions);\n  return {\n    violinSize: pdfResults.map((result) => result.y),\n    violinY: pdfResults.map((result) => result.x),\n  };\n};\n\nexport const transformViolinData = (options: ViolinOptions): ViolinData[] => {\n  const { xField, yField, seriesField, data, kde } = options;\n\n  /** 生成概率密度函数的配置 */\n  const pdfOptions: PdfOptions = {\n    min: kde.min,\n    max: kde.max,\n    size: kde.sampleSize,\n    width: kde.width,\n  };\n\n  // 无拆分\n  if (!seriesField) {\n    const group = groupBy(data, xField);\n    return Object.keys(group).map((x) => {\n      const records = group[x];\n      const values = records.map((record) => record[yField]);\n      return {\n        x,\n        ...toViolinValue(values, pdfOptions),\n        ...toBoxValue(values),\n      };\n    });\n  }\n\n  // 有拆分\n  const resultList: ViolinData[] = [];\n  const seriesGroup = groupBy(data, seriesField);\n  Object.keys(seriesGroup).forEach((series) => {\n    const group = groupBy(seriesGroup[series], xField);\n    return Object.keys(group).forEach((key) => {\n      const records = group[key];\n      const values = records.map((record) => record[yField]);\n      resultList.push({\n        x: key,\n        [seriesField]: series,\n        ...toViolinValue(values, pdfOptions),\n        ...toBoxValue(values),\n      });\n    });\n  });\n  return resultList;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}