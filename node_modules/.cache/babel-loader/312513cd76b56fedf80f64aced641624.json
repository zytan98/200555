{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\n/* babel-plugin-inline-import '../../../services/shader-module/shaders/webgl.copy.frag.glsl' */\n\nvar copyFrag = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n}\";\n/* babel-plugin-inline-import '../../../services/shader-module/shaders/webgl.copy.vert.glsl' */\n\nvar copyVert = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\n/* babel-plugin-inline-import '../../../services/shader-module/shaders/webgpu.copy.frag.glsl' */\n\nvar copyFragWebGPU = \"layout(set = 0, binding = 0) uniform sampler u_TextureSampler;\\nlayout(set = 0, binding = 1) uniform texture2D u_Texture;\\n\\nlayout(location = 0) in vec2 v_UV;\\nlayout(location = 0) out vec4 outColor;\\n\\nvoid main() {\\n  outColor = texture(sampler2D(u_Texture, u_TextureSampler), v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../services/shader-module/shaders/webgpu.copy.vert.glsl' */\n\nvar copyVertWebGPU = \"layout(location = 0) in vec2 a_Position;\\nlayout(location = 0) out vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport { gl } from '../gl';\nimport { RenderPass } from './RenderPass';\nexport var CopyPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ResourcePool), _dec(_class = (_class2 = (_temp = _class3 = function CopyPass() {\n  var _this = this;\n\n  _classCallCheck(this, CopyPass);\n\n  _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n  _initializerDefineProperty(this, \"resourcePool\", _descriptor2, this);\n\n  this.model = void 0;\n\n  this.setup = function (fg, passNode, pass) {\n    var renderPass = fg.getPass(RenderPass.IDENTIFIER);\n\n    if (renderPass) {\n      var output = fg.createRenderTarget(passNode, 'render to screen', {\n        width: 1,\n        height: 1\n      });\n      pass.data = {\n        input: passNode.read(renderPass.data.output),\n        output: passNode.write(fg, output)\n      };\n    }\n  };\n\n  this.execute = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass) {\n      var _this$engine, createModel, createAttribute, createBuffer, model, resourceNode, framebuffer;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$engine = _this.engine, createModel = _this$engine.createModel, createAttribute = _this$engine.createAttribute, createBuffer = _this$engine.createBuffer;\n\n              if (_this.model) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return createModel({\n                vs: _this.engine.supportWebGPU ? copyVertWebGPU : copyVert,\n                fs: _this.engine.supportWebGPU ? copyFragWebGPU : copyFrag,\n                attributes: {\n                  // rendering a fullscreen triangle instead of quad\n                  // @see https://www.saschawillems.de/blog/2016/08/13/vulkan-tutorial-on-rendering-a-fullscreen-quad-without-buffers/\n                  a_Position: createAttribute({\n                    buffer: createBuffer({\n                      data: [-4, -4, 4, -4, 0, 4],\n                      type: gl.FLOAT\n                    }),\n                    size: 2,\n                    arrayStride: 2 * 4,\n                    stepMode: 'vertex',\n                    attributes: [{\n                      shaderLocation: 0,\n                      offset: 0,\n                      format: 'float2'\n                    }]\n                  })\n                },\n                uniforms: {\n                  // @ts-ignore\n                  u_Texture: null\n                },\n                depth: {\n                  enable: false\n                },\n                count: 3,\n                blend: {\n                  // copy pass 需要混合\n                  // enable: this.getName() === 'copy',\n                  enable: true\n                }\n              });\n\n            case 4:\n              model = _context.sent;\n              _this.model = model;\n\n            case 6:\n              // 实例化资源\n              resourceNode = fg.getResourceNode(pass.data.input);\n              framebuffer = _this.resourcePool.getOrCreateResource(resourceNode.resource);\n\n              _this.engine.useFramebuffer(null, function () {\n                _this.engine.clear({\n                  framebuffer: null,\n                  color: [0, 0, 0, 0],\n                  depth: 1,\n                  stencil: 0\n                });\n\n                _this.model.draw({\n                  uniforms: {\n                    u_Texture: framebuffer // u_ViewportSize: [width, height],\n\n                  }\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  this.tearDown = function () {\n    _this.model = undefined;\n  };\n}, _class3.IDENTIFIER = 'Copy Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../../src/components/renderer/passes/CopyPass.ts"],"names":["injectable","CopyPass","inject","IDENTIFIER","renderPass","fg","RenderPass","output","width","height","pass","input","passNode","createModel","createAttribute","createBuffer","model","vs","fs","attributes","a_Position","buffer","data","type","gl","FLOAT","size","arrayStride","stepMode","shaderLocation","offset","format","uniforms","u_Texture","depth","enable","count","blend","resourceNode","framebuffer","color","stencil"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport copyFrag from '../../../services/shader-module/shaders/webgl.copy.frag.glsl';\nimport copyVert from '../../../services/shader-module/shaders/webgl.copy.vert.glsl';\nimport copyFragWebGPU from '../../../services/shader-module/shaders/webgpu.copy.frag.glsl';\nimport copyVertWebGPU from '../../../services/shader-module/shaders/webgpu.copy.vert.glsl';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { gl } from '../gl';\nimport { IModel } from '../IModel';\nimport { IRendererService } from '../IRendererService';\nimport { IRenderPass } from './IRenderPass';\nimport { RenderPass, RenderPassData } from './RenderPass';\n\nexport interface CopyPassData {\n  input: FrameGraphHandle;\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class CopyPass implements IRenderPass<CopyPassData> {\n  public static IDENTIFIER = 'Copy Pass';\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private model: IModel | undefined;\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<CopyPassData>,\n  ): void => {\n    const renderPass = fg.getPass<RenderPassData>(RenderPass.IDENTIFIER);\n    if (renderPass) {\n      const output = fg.createRenderTarget(passNode, 'render to screen', {\n        width: 1,\n        height: 1,\n      });\n\n      pass.data = {\n        input: passNode.read(renderPass.data.output),\n        output: passNode.write(fg, output),\n      };\n    }\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<CopyPassData>,\n  ): Promise<void> => {\n    const { createModel, createAttribute, createBuffer } = this.engine;\n\n    if (!this.model) {\n      const model = await createModel({\n        vs: this.engine.supportWebGPU ? copyVertWebGPU : copyVert,\n        fs: this.engine.supportWebGPU ? copyFragWebGPU : copyFrag,\n        attributes: {\n          // rendering a fullscreen triangle instead of quad\n          // @see https://www.saschawillems.de/blog/2016/08/13/vulkan-tutorial-on-rendering-a-fullscreen-quad-without-buffers/\n          a_Position: createAttribute({\n            buffer: createBuffer({\n              data: [-4, -4, 4, -4, 0, 4],\n              type: gl.FLOAT,\n            }),\n            size: 2,\n            arrayStride: 2 * 4,\n            stepMode: 'vertex',\n            attributes: [\n              {\n                shaderLocation: 0,\n                offset: 0,\n                format: 'float2',\n              },\n            ],\n          }),\n        },\n        uniforms: {\n          // @ts-ignore\n          u_Texture: null,\n        },\n        depth: {\n          enable: false,\n        },\n        count: 3,\n        blend: {\n          // copy pass 需要混合\n          // enable: this.getName() === 'copy',\n          enable: true,\n        },\n      });\n      this.model = model;\n    }\n\n    // 实例化资源\n    const resourceNode = fg.getResourceNode(pass.data.input);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    this.engine.useFramebuffer(null, () => {\n      this.engine.clear({\n        framebuffer: null,\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n      });\n      this.model!.draw({\n        uniforms: {\n          u_Texture: framebuffer,\n          // u_ViewportSize: [width, height],\n        },\n      });\n    });\n  };\n\n  public tearDown = () => {\n    this.model = undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}