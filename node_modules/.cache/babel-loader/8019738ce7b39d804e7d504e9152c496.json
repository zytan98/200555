{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { pack } from '../../utils/hierarchy/pack';\nimport { deepAssign, pick } from '../../utils';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { resolveAllPadding } from '../../utils/padding';\n/**\n * circle-packing 数据转换\n * @param options\n */\n\nexport function transformData(options) {\n  var data = options.data,\n      hierarchyConfig = options.hierarchyConfig,\n      _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a,\n      enableDrillDown = options.enableDrillDown;\n  var nodes = pack(data, __assign(__assign({}, hierarchyConfig), {\n    field: 'value',\n    as: ['x', 'y', 'r']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n\n    var path = node.data.name;\n\n    var ancestorNode = __assign({}, node);\n\n    while (ancestorNode.depth > 1) {\n      path = ((_a = ancestorNode.parent.data) === null || _a === void 0 ? void 0 : _a.name) + \" / \" + path;\n      ancestorNode = ancestorNode.parent;\n    } // 开启下钻，仅加载 depth <= 2 的数据 (加载两层)\n\n\n    if (enableDrillDown && node.depth > 2) {\n      return null;\n    }\n\n    var nodeInfo = deepAssign({}, node.data, __assign(__assign(__assign({}, pick(node.data, rawFields)), {\n      path: path\n    }), node));\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      rawFields: rawFields,\n      enableDrillDown: enableDrillDown\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}\n/**\n * 根据传入的 padding 和 现有的 画布大小， 输出针对圆形视图布局需要的 finalPadding 以及 finalSize\n * @param params\n */\n\nexport function resolvePaddingForCircle(padding, appendPadding, containerSize) {\n  var tempPadding = resolveAllPadding([padding, appendPadding]);\n  var top = tempPadding[0],\n      right = tempPadding[1],\n      bottom = tempPadding[2],\n      left = tempPadding[3]; // 没设定，默认是 [0, 0, 0, 0]\n\n  var width = containerSize.width,\n      height = containerSize.height; // 有了 tempPadding 介入以后，计算出coordinate范围宽高的最小值 minSize = circle-packing的直径\n\n  var wSize = width - (left + right);\n  var hSize = height - (top + bottom);\n  var minSize = Math.min(wSize, hSize); // circle-packing的直径\n  // 得到居中后各方向剩余的 padding\n\n  var restWidthPadding = (wSize - minSize) / 2;\n  var restHeightPadding = (hSize - minSize) / 2;\n  var finalTop = top + restHeightPadding;\n  var finalRight = right + restWidthPadding;\n  var finalBottom = bottom + restHeightPadding;\n  var finalLeft = left + restWidthPadding;\n  var finalPadding = [finalTop, finalRight, finalBottom, finalLeft];\n  var finalSize = minSize < 0 ? 0 : minSize; // 防止为负数\n\n  return {\n    finalPadding: finalPadding,\n    finalSize: finalSize\n  };\n}","map":{"version":3,"sources":["../../../src/plots/circle-packing/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from '@antv/g2';\nimport { pack } from '../../utils/hierarchy/pack';\nimport { deepAssign, pick } from '../../utils';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { resolveAllPadding } from '../../utils/padding';\nimport { CirclePackingOptions } from './types';\n\ninterface TransformDataOptions {\n  data: CirclePackingOptions['data'];\n  rawFields: CirclePackingOptions['rawFields'];\n  enableDrillDown: boolean;\n  hierarchyConfig: CirclePackingOptions['hierarchyConfig'];\n}\n\n/**\n * circle-packing 数据转换\n * @param options\n */\nexport function transformData(options: TransformDataOptions) {\n  const { data, hierarchyConfig, rawFields = [], enableDrillDown } = options;\n\n  const nodes = pack(data, {\n    ...hierarchyConfig,\n    field: 'value',\n    as: ['x', 'y', 'r'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    let path = node.data.name;\n    let ancestorNode = { ...node };\n    while (ancestorNode.depth > 1) {\n      path = `${ancestorNode.parent.data?.name} / ${path}`;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    // 开启下钻，仅加载 depth <= 2 的数据 (加载两层)\n    if (enableDrillDown && node.depth > 2) {\n      return null;\n    }\n\n    const nodeInfo = deepAssign({}, node.data, {\n      ...pick(node.data, rawFields),\n      path,\n      // 以下字段，必备: x, y, r, name, depth, height\n      ...node,\n    });\n\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, rawFields, enableDrillDown };\n\n    result.push(nodeInfo);\n  });\n\n  return result;\n}\n\n/**\n * 根据传入的 padding 和 现有的 画布大小， 输出针对圆形视图布局需要的 finalPadding 以及 finalSize\n * @param params\n */\nexport function resolvePaddingForCircle(\n  padding: Types.ViewPadding,\n  appendPadding: Types.ViewAppendPadding,\n  containerSize: { width: number; height: number }\n) {\n  const tempPadding = resolveAllPadding([padding, appendPadding]);\n  const [top, right, bottom, left] = tempPadding; // 没设定，默认是 [0, 0, 0, 0]\n  const { width, height } = containerSize;\n\n  // 有了 tempPadding 介入以后，计算出coordinate范围宽高的最小值 minSize = circle-packing的直径\n  const wSize = width - (left + right);\n  const hSize = height - (top + bottom);\n  const minSize = Math.min(wSize, hSize); // circle-packing的直径\n\n  // 得到居中后各方向剩余的 padding\n  const restWidthPadding = (wSize - minSize) / 2;\n  const restHeightPadding = (hSize - minSize) / 2;\n\n  const finalTop = top + restHeightPadding;\n  const finalRight = right + restWidthPadding;\n  const finalBottom = bottom + restHeightPadding;\n  const finalLeft = left + restWidthPadding;\n\n  const finalPadding = [finalTop, finalRight, finalBottom, finalLeft];\n  const finalSize = minSize < 0 ? 0 : minSize; // 防止为负数\n\n  return { finalPadding, finalSize };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}