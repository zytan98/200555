{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { getUnitPatternSize, initCanvas, drawBackground, getSymbolsPosition, transformMatrix, getPixelRatio } from './util';\n/**\n * squarePattern 的 默认配置\n */\n\nexport var defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0\n};\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\n\nexport function drawSquare(context, cfg, x, y) {\n  var stroke = cfg.stroke,\n      size = cfg.size,\n      fill = cfg.fill,\n      lineWidth = cfg.lineWidth,\n      fillOpacity = cfg.fillOpacity;\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill; // 因为正方形绘制从左上角开始，所以x，y做个偏移\n\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n/**\n * 创建 squarePattern\n */\n\nexport function createSquarePattern(cfg) {\n  var squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n  var size = squareCfg.size,\n      padding = squareCfg.padding,\n      isStagger = squareCfg.isStagger,\n      rotation = squareCfg.rotation; // 计算 画布大小，squares的位置\n\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n  // 初始化 patternCanvas\n\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d'); // 绘制 background，squares\n\n  drawBackground(ctx, squareCfg, unitSize);\n\n  for (var _i = 0, squares_1 = squares; _i < squares_1.length; _i++) {\n    var _a = squares_1[_i],\n        x = _a[0],\n        y = _a[1];\n    drawSquare(ctx, squareCfg, x, y);\n  }\n\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}","map":{"version":3,"sources":["../../../src/utils/pattern/square.ts"],"names":[],"mappings":"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","sourcesContent":["import { SquarePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport {\n  getUnitPatternSize,\n  initCanvas,\n  drawBackground,\n  getSymbolsPosition,\n  transformMatrix,\n  getPixelRatio,\n} from './util';\n\n/**\n * squarePattern 的 默认配置\n */\nexport const defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n};\n\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\nexport function drawSquare(context: CanvasRenderingContext2D, cfg: SquarePatternCfg, x: number, y: number) {\n  const { stroke, size, fill, lineWidth, fillOpacity } = cfg;\n\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill;\n  // 因为正方形绘制从左上角开始，所以x，y做个偏移\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n\n/**\n * 创建 squarePattern\n */\nexport function createSquarePattern(cfg?: SquarePatternCfg): CanvasPattern {\n  const squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n\n  const { size, padding, isStagger, rotation } = squareCfg;\n\n  // 计算 画布大小，squares的位置\n  const unitSize = getUnitPatternSize(size, padding, isStagger);\n  const squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(unitSize, unitSize);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，squares\n  drawBackground(ctx, squareCfg, unitSize);\n  for (const [x, y] of squares) {\n    drawSquare(ctx, squareCfg, x, y);\n  }\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}