{"ast":null,"code":"// represents a body(a point mass) and its position\nexport default class Body {\n  constructor(params) {\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n\n    this.g = params.g || 0;\n  } // returns the euclidean distance\n\n\n  distanceTo(bo) {\n    const dx = this.rx - bo.rx;\n    const dy = this.ry - bo.ry;\n    return Math.hypot(dx, dy);\n  }\n\n  setPos(x, y) {\n    this.rx = x;\n    this.ry = y;\n  } // resets the forces\n\n\n  resetForce() {\n    this.fx = 0;\n    this.fy = 0;\n  }\n\n  addForce(b) {\n    const dx = b.rx - this.rx;\n    const dy = b.ry - this.ry;\n    let dist = Math.hypot(dx, dy);\n    dist = dist < 0.0001 ? 0.0001 : dist; // the repulsive defined by force atlas 2\n\n    const F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n    this.fx += F * dx / dist;\n    this.fy += F * dy / dist;\n  } // if quad contains this body\n\n\n  in(quad) {\n    return quad.contains(this.rx, this.ry);\n  } // returns a new body\n\n\n  add(bo) {\n    const nenwMass = this.mass + bo.mass;\n    const x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n    const y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n    const dg = this.degree + bo.degree;\n    const params = {\n      rx: x,\n      ry: y,\n      mass: nenwMass,\n      degree: dg\n    };\n    return new Body(params);\n  }\n\n}","map":{"version":3,"sources":["../../../src/layout/forceAtlas2/body.ts"],"names":[],"mappings":"AAkBA;AACA,eAAc,MAAO,IAAP,CAAW;AAUvB,EAAA,WAAA,CAAY,MAAZ,EAA6B;AAC3B;;;AAGG;AACH,SAAK,EAAL,GAAU,MAAM,CAAC,EAAP,IAAa,CAAvB;AACA;;;AAGG;;AACH,SAAK,EAAL,GAAU,MAAM,CAAC,EAAjB;AACA;;;AAGG;;AACH,SAAK,EAAL,GAAU,MAAM,CAAC,EAAjB;AACA;;;AAGG;;AACH,SAAK,EAAL,GAAU,CAAV;AACA;;;AAGG;;AACH,SAAK,EAAL,GAAU,CAAV;AACA;;;AAGG;;AACH,SAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACA;;;AAGG;;AACH,SAAK,MAAL,GAAc,MAAM,CAAC,MAArB;AACA;;;AAGG;;AACH,SAAK,CAAL,GAAS,MAAM,CAAC,CAAP,IAAY,CAArB;AACD,GAnDsB,CAoDvB;;;AACA,EAAA,UAAU,CAAC,EAAD,EAAS;AACjB,UAAM,EAAE,GAAG,KAAK,EAAL,GAAU,EAAE,CAAC,EAAxB;AACA,UAAM,EAAE,GAAG,KAAK,EAAL,GAAU,EAAE,CAAC,EAAxB;AACA,WAAO,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,EAAf,CAAP;AACD;;AACD,EAAA,MAAM,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACzB,SAAK,EAAL,GAAU,CAAV;AACA,SAAK,EAAL,GAAU,CAAV;AACD,GA7DsB,CA8DvB;;;AACA,EAAA,UAAU,GAAA;AACR,SAAK,EAAL,GAAU,CAAV;AACA,SAAK,EAAL,GAAU,CAAV;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,EAAQ;AACd,UAAM,EAAE,GAAG,CAAC,CAAC,EAAF,GAAO,KAAK,EAAvB;AACA,UAAM,EAAE,GAAG,CAAC,CAAC,EAAF,GAAO,KAAK,EAAvB;AACA,QAAI,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,EAAf,CAAX;AACA,IAAA,IAAI,GAAG,IAAI,GAAG,MAAP,GAAgB,MAAhB,GAAyB,IAAhC,CAJc,CAKd;;AACA,UAAM,CAAC,GAAI,KAAK,CAAL,IAAU,KAAK,MAAL,GAAc,CAAxB,KAA8B,CAAC,CAAC,MAAF,GAAW,CAAzC,CAAD,GAAgD,IAA1D;AACA,SAAK,EAAL,IAAW,CAAC,GAAG,EAAJ,GAAS,IAApB;AACA,SAAK,EAAL,IAAW,CAAC,GAAG,EAAJ,GAAS,IAApB;AACD,GA5EsB,CA6EvB;;;AACA,EAAA,EAAE,CAAC,IAAD,EAAW;AACX,WAAO,IAAI,CAAC,QAAL,CAAc,KAAK,EAAnB,EAAuB,KAAK,EAA5B,CAAP;AACD,GAhFsB,CAiFvB;;;AACA,EAAA,GAAG,CAAC,EAAD,EAAS;AACV,UAAM,QAAQ,GAAG,KAAK,IAAL,GAAY,EAAE,CAAC,IAAhC;AACA,UAAM,CAAC,GAAG,CAAC,KAAK,EAAL,GAAU,KAAK,IAAf,GAAsB,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,IAAlC,IAA0C,QAApD;AACA,UAAM,CAAC,GAAG,CAAC,KAAK,EAAL,GAAU,KAAK,IAAf,GAAsB,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,IAAlC,IAA0C,QAApD;AACA,UAAM,EAAE,GAAG,KAAK,MAAL,GAAc,EAAE,CAAC,MAA5B;AACA,UAAM,MAAM,GAAc;AACxB,MAAA,EAAE,EAAE,CADoB;AAExB,MAAA,EAAE,EAAE,CAFoB;AAGxB,MAAA,IAAI,EAAE,QAHkB;AAIxB,MAAA,MAAM,EAAE;AAJgB,KAA1B;AAMA,WAAO,IAAI,IAAJ,CAAS,MAAT,CAAP;AACD;;AA9FsB","sourceRoot":"","sourcesContent":["// represents a body(a point mass) and its position\nexport default class Body {\n    constructor(params) {\n        /**\n         * the id of this body, the same with the node id\n         * @type  {number}\n         */\n        this.id = params.id || 0;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.rx = params.rx;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.ry = params.ry;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fx = 0;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fy = 0;\n        /**\n         * the mass of this body, =1 for a node\n         * @type  {number}\n         */\n        this.mass = params.mass;\n        /**\n         * the degree of the node represented by this body\n         * @type  {number}\n         */\n        this.degree = params.degree;\n        /**\n         * the parameter for repulsive force, = kr\n         * @type  {number}\n         */\n        this.g = params.g || 0;\n    }\n    // returns the euclidean distance\n    distanceTo(bo) {\n        const dx = this.rx - bo.rx;\n        const dy = this.ry - bo.ry;\n        return Math.hypot(dx, dy);\n    }\n    setPos(x, y) {\n        this.rx = x;\n        this.ry = y;\n    }\n    // resets the forces\n    resetForce() {\n        this.fx = 0;\n        this.fy = 0;\n    }\n    addForce(b) {\n        const dx = b.rx - this.rx;\n        const dy = b.ry - this.ry;\n        let dist = Math.hypot(dx, dy);\n        dist = dist < 0.0001 ? 0.0001 : dist;\n        // the repulsive defined by force atlas 2\n        const F = (this.g * (this.degree + 1) * (b.degree + 1)) / dist;\n        this.fx += F * dx / dist;\n        this.fy += F * dy / dist;\n    }\n    // if quad contains this body\n    in(quad) {\n        return quad.contains(this.rx, this.ry);\n    }\n    // returns a new body\n    add(bo) {\n        const nenwMass = this.mass + bo.mass;\n        const x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n        const y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n        const dg = this.degree + bo.degree;\n        const params = {\n            rx: x,\n            ry: y,\n            mass: nenwMass,\n            degree: dg\n        };\n        return new Body(params);\n    }\n}\n//# sourceMappingURL=body.js.map"]},"metadata":{},"sourceType":"module"}