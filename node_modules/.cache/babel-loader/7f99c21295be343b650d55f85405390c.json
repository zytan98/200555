{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../util/createLoading';\nimport { ErrorBoundary } from '../../base';\nimport useGraph from '../hooks/useGraph';\nimport { deepClone } from '../../util/utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, bindEvents, useProps } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n  stroke: '#72CC4A',\n  fill: '#f00'\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'LR',\n  nodesep: 30,\n  ranksep: 50\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000000A6',\n    fontSize: 10\n  }\n};\nvar defaultProps = {\n  nodeType: 'round-rect',\n  edgeType: 'fund-polyline',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeSize: defaultNodeSize,\n  nodeLabelCfg: defaultLabelCfg,\n  edgeLabelCfg: defaultLabelCfg,\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  layout: defaultLayout,\n  nodeStyle: defaultNodeStyle,\n  edgeStyle: defaultEdgeStyle,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  colorMap: {},\n  autoFit: true\n};\nvar graphs = {};\n\nvar DagreFundFlowGraph = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'round-rect' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'fund-polyline' : _b,\n      _c = uProps.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = uProps.nodeSize,\n      nodeSize = _d === void 0 ? defaultNodeSize : _d,\n      _e = uProps.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = uProps.edgeLabelCfg,\n      edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f,\n      _g = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g,\n      _h = uProps.layout,\n      layout = _h === void 0 ? defaultLayout : _h,\n      minimapCfg = uProps.minimapCfg,\n      _j = uProps.nodeStyle,\n      nodeStyle = _j === void 0 ? defaultNodeStyle : _j,\n      _k = uProps.edgeStyle,\n      edgeStyle = _k === void 0 ? defaultEdgeStyle : _k,\n      _l = uProps.nodeStateStyles,\n      nodeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = uProps.edgeStateStyles,\n      edgeStateStyles = _m === void 0 ? defaultStateStyles : _m,\n      _o = uProps.colorMap,\n      colorMap = _o === void 0 ? {} : _o,\n      _p = uProps.autoFit,\n      autoFit = _p === void 0 ? true : _p,\n      graphRef = uProps.graphRef,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          colorMap: colorMap,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    var originData = deepClone(data);\n    graph.data(originData);\n    graph.render();\n\n    if (onReady) {\n      onReady(graph);\n    } // modify the node color according to the in edge\n\n\n    var edges = graph.getEdges(); // @ts-ignore\n\n    edges.forEach(function (edge) {\n      var line = edge.getKeyShape();\n      var stroke = line.attr('stroke');\n      var targetNode = edge.getTarget();\n      targetNode.update({\n        style: {\n          stroke: stroke\n        }\n      });\n    });\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreFundFlowGraph;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@ant-design/charts/es/obsolescent/graph/dagreFundFlow.js"],"names":["React","useEffect","G6","ChartLoading","ErrorBoundary","useGraph","deepClone","defaultNodeAnchorPoints","defaultStateStyles","defaultEdgeStyle","processMinimap","getGraphSize","getGraphId","bindEvents","useProps","registerCustomItems","defaultNodeSize","defaultNodeStyle","stroke","fill","defaultLayout","type","rankdir","nodesep","ranksep","defaultLabelCfg","style","fontSize","defaultProps","nodeType","edgeType","behaviors","nodeSize","nodeLabelCfg","edgeLabelCfg","nodeAnchorPoints","layout","nodeStyle","edgeStyle","nodeStateStyles","edgeStateStyles","colorMap","autoFit","graphs","DagreFundFlowGraph","props","uProps","data","className","width","height","_a","_b","_c","_d","_e","_f","_g","_h","minimapCfg","_j","_k","_l","_m","_o","_p","graphRef","onReady","loading","loadingTemplate","errorTemplate","container","useRef","graph","graphId","graphSize","Graph","current","modes","default","defaultNode","size","anchorPoints","labelCfg","defaultEdge","fitView","originData","render","edges","getEdges","forEach","edge","line","getKeyShape","attr","targetNode","getTarget","update","destroy","createElement","ref"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../util/createLoading';\nimport { ErrorBoundary } from '../../base';\nimport useGraph from '../hooks/useGraph';\nimport { deepClone } from '../../util/utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, bindEvents, useProps } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n    stroke: '#72CC4A',\n    fill: '#f00',\n};\nvar defaultLayout = {\n    type: 'dagre',\n    rankdir: 'LR',\n    nodesep: 30,\n    ranksep: 50,\n};\nvar defaultLabelCfg = {\n    style: {\n        fill: '#000000A6',\n        fontSize: 10,\n    },\n};\nvar defaultProps = {\n    nodeType: 'round-rect',\n    edgeType: 'fund-polyline',\n    behaviors: ['zoom-canvas', 'drag-canvas'],\n    nodeSize: defaultNodeSize,\n    nodeLabelCfg: defaultLabelCfg,\n    edgeLabelCfg: defaultLabelCfg,\n    nodeAnchorPoints: defaultNodeAnchorPoints,\n    layout: defaultLayout,\n    nodeStyle: defaultNodeStyle,\n    edgeStyle: defaultEdgeStyle,\n    nodeStateStyles: defaultStateStyles,\n    edgeStateStyles: defaultStateStyles,\n    colorMap: {},\n    autoFit: true,\n};\nvar graphs = {};\nvar DagreFundFlowGraph = function (props) {\n    var uProps = useProps(props, defaultProps);\n    var data = uProps.data, className = uProps.className, style = uProps.style, width = uProps.width, height = uProps.height, _a = uProps.nodeType, nodeType = _a === void 0 ? 'round-rect' : _a, _b = uProps.edgeType, edgeType = _b === void 0 ? 'fund-polyline' : _b, _c = uProps.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = uProps.nodeSize, nodeSize = _d === void 0 ? defaultNodeSize : _d, _e = uProps.nodeLabelCfg, nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e, _f = uProps.edgeLabelCfg, edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = uProps.nodeAnchorPoints, nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g, _h = uProps.layout, layout = _h === void 0 ? defaultLayout : _h, minimapCfg = uProps.minimapCfg, _j = uProps.nodeStyle, nodeStyle = _j === void 0 ? defaultNodeStyle : _j, _k = uProps.edgeStyle, edgeStyle = _k === void 0 ? defaultEdgeStyle : _k, _l = uProps.nodeStateStyles, nodeStateStyles = _l === void 0 ? defaultStateStyles : _l, _m = uProps.edgeStateStyles, edgeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = uProps.colorMap, colorMap = _o === void 0 ? {} : _o, _p = uProps.autoFit, autoFit = _p === void 0 ? true : _p, graphRef = uProps.graphRef, onReady = uProps.onReady, loading = uProps.loading, loadingTemplate = uProps.loadingTemplate, errorTemplate = uProps.errorTemplate;\n    var container = React.useRef(null);\n    var graph = React.useRef(null);\n    var graphId = getGraphId(graph);\n    useGraph(graphs[graphId], uProps, container);\n    useEffect(function () {\n        var graphSize = getGraphSize(width, height, container);\n        var graph = graphs[graphId];\n        if (!graph) {\n            graph = new G6.Graph({\n                container: container.current,\n                width: graphSize[0],\n                height: graphSize[1],\n                modes: {\n                    default: behaviors,\n                },\n                defaultNode: {\n                    type: nodeType,\n                    size: nodeSize,\n                    style: nodeStyle,\n                    anchorPoints: nodeAnchorPoints,\n                    labelCfg: nodeLabelCfg,\n                },\n                defaultEdge: {\n                    type: edgeType,\n                    style: edgeStyle,\n                    colorMap: colorMap,\n                    labelCfg: edgeLabelCfg,\n                },\n                nodeStateStyles: nodeStateStyles,\n                edgeStateStyles: edgeStateStyles,\n                layout: layout,\n                fitView: autoFit,\n            });\n            graphs[graphId] = graph;\n        }\n        if (graphRef) {\n            graphRef.current = graph;\n        }\n        processMinimap(minimapCfg, graph);\n        var originData = deepClone(data);\n        graph.data(originData);\n        graph.render();\n        if (onReady) {\n            onReady(graph);\n        }\n        // modify the node color according to the in edge\n        var edges = graph.getEdges();\n        // @ts-ignore\n        edges.forEach(function (edge) {\n            var line = edge.getKeyShape();\n            var stroke = line.attr('stroke');\n            var targetNode = edge.getTarget();\n            targetNode.update({\n                style: {\n                    stroke: stroke,\n                },\n            });\n        });\n        bindEvents(graph, props);\n        return function () {\n            if (graphs[graphId]) {\n                graphs[graphId].destroy();\n                delete graphs[graphId];\n            }\n        };\n    }, []);\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n};\nexport default DagreFundFlowGraph;\n"]},"metadata":{},"sourceType":"module"}