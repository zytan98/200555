{"ast":null,"code":"import { isNumber, isArray } from '@antv/util';\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\n\nexport function normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n/**\n * 获取调整的 appendPadding\n */\n\nexport function getAdjustAppendPadding(padding, position, append) {\n  if (position === void 0) {\n    position = 'bottom';\n  }\n\n  if (append === void 0) {\n    append = 25;\n  }\n\n  var currentAppendPadding = normalPadding(padding);\n  var PADDING = [position.startsWith('top') ? append : 0, position.startsWith('right') ? append : 0, position.startsWith('bottom') ? append : 0, position.startsWith('left') ? append : 0];\n  return [currentAppendPadding[0] + PADDING[0], currentAppendPadding[1] + PADDING[1], currentAppendPadding[2] + PADDING[2], currentAppendPadding[3] + PADDING[3]];\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\n\nexport function resolveAllPadding(paddings) {\n  // 先把数组里的 padding 全部转换成 normal\n  var normalPaddings = paddings.map(function (item) {\n    return normalPadding(item);\n  });\n  var finalPadding = [0, 0, 0, 0];\n\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map(function (item, index) {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach(function (d, i) {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n\n  return finalPadding;\n}","map":{"version":3,"sources":["../../src/utils/padding.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from '@antv/g2';\nimport { isNumber, isArray } from '@antv/util';\n\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    const length = padding.length;\n\n    if (length === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length === 4) {\n      return padding as [number, number, number, number];\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding: Types.ViewAppendPadding, position = 'bottom', append = 25) {\n  const currentAppendPadding = normalPadding(padding);\n\n  const PADDING = [\n    position.startsWith('top') ? append : 0,\n    position.startsWith('right') ? append : 0,\n    position.startsWith('bottom') ? append : 0,\n    position.startsWith('left') ? append : 0,\n  ];\n  return [\n    currentAppendPadding[0] + PADDING[0],\n    currentAppendPadding[1] + PADDING[1],\n    currentAppendPadding[2] + PADDING[2],\n    currentAppendPadding[3] + PADDING[3],\n  ];\n}\n\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings: Types.ViewPadding[]) {\n  // 先把数组里的 padding 全部转换成 normal\n  const normalPaddings = paddings.map((item) => normalPadding(item));\n  let finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map((item, index) => {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach((d, i) => {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}