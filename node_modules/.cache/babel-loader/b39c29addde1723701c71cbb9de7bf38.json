{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\n/* babel-plugin-inline-import './shaders/webgl.line.frag.glsl' */\n\nvar lineFrag = \"uniform float u_dash_array : 0.02;\\nuniform float u_dash_offset : 0;\\nuniform float u_dash_ratio : 0;\\nuniform float u_thickness : 0.02;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_counters;\\n\\nvoid main() {\\n    float blur = 1. - smoothstep(0.98, 1., length(v_normal));\\n\\n    gl_FragColor = v_color;\\n    gl_FragColor.a *= blur * ceil(mod(v_counters + u_dash_offset, u_dash_array) - (u_dash_array * u_dash_ratio));\\n}\";\n/* babel-plugin-inline-import './shaders/webgl.line.vert.glsl' */\n\nvar lineVert = \"attribute vec2 a_pos;\\nattribute vec4 a_color;\\nattribute float a_line_miter;\\nattribute vec2 a_line_normal;\\nattribute float a_counters;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform float u_thickness : 0.02;\\nuniform vec2 u_viewport;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_counters;\\n\\nvoid main() {\\n  v_color = a_color;\\n  v_counters = a_counters;\\n\\n  vec3 normal = normalize(vec3(a_line_normal, 0.0));\\n\\n  vec4 offset = vec4(normal * u_thickness / 2.0 * a_line_miter, 0.0);\\n\\n  v_normal = vec2(normal * sign(a_line_miter));\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(a_pos, 0.0, 1.0) + offset;\\n}\\n\";\nexport var Line = (_dec = injectable(), _dec2 = inject(IDENTIFIER.Systems), _dec3 = named(IDENTIFIER.MaterialSystem), _dec4 = inject(IDENTIFIER.Systems), _dec5 = named(IDENTIFIER.GeometrySystem), _dec6 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Renderable) {\n  _inherits(Line, _Renderable);\n\n  var _super = _createSuper(Line);\n\n  function Line() {\n    var _this;\n\n    _classCallCheck(this, Line);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_this, \"materialSystem\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"geometrySystem\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor3, _assertThisInitialized(_this));\n\n    _this.vertexCount = void 0;\n    return _this;\n  }\n\n  _createClass(Line, [{\n    key: \"onAttributeChanged\",\n    value: function onAttributeChanged(_ref) {\n      var name = _ref.name,\n          data = _ref.data;\n      var mesh = this.getMeshComponent();\n\n      if (mesh && mesh.material) {\n        switch (name) {\n          case 'dashArray':\n            mesh.material.setUniform('u_dash_array', data);\n            break;\n\n          case 'dashOffset':\n            mesh.material.setUniform('u_dash_offset', data);\n            break;\n\n          case 'dashRatio':\n            mesh.material.setUniform('u_dash_ratio', data);\n            break;\n\n          case 'thickness':\n            mesh.material.setUniform('u_thickness', data);\n            break;\n\n          case 'color':\n            var colors = new Array(this.vertexCount).fill(undefined).map(function () {\n              return data;\n            }).reduce(function (prev, cur) {\n              // @ts-ignore\n              return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n            }, []); // @ts-ignore\n\n            mesh.geometry.setAttribute('a_color', Float32Array.from(colors), {\n              arrayStride: 4 * 4,\n              stepMode: 'vertex',\n              attributes: [{\n                shaderLocation: 1,\n                offset: 0,\n                format: 'float4'\n              }]\n            });\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var _this2 = this;\n\n      this.shaderModuleService.registerModule('line', {\n        vs: lineVert,\n        fs: lineFrag\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('line'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          extractedUniforms = _this$shaderModuleSer.uniforms;\n\n      var material = this.materialSystem.createShaderMaterial({\n        vertexShader: vs,\n        fragmentShader: fs\n      });\n\n      var _getNormals = getNormals(this.config.points, false),\n          normals = _getNormals.normals,\n          attrIndex = _getNormals.attrIndex,\n          attrPos = _getNormals.attrPos,\n          attrCounters = _getNormals.attrCounters;\n\n      var vertexCount = attrPos.length;\n      this.vertexCount = vertexCount;\n      var geometry = this.geometrySystem.createBufferGeometry({\n        vertexCount: vertexCount\n      });\n      this.setMaterial(material);\n      this.setGeometry(geometry);\n      material.setCull({\n        enable: false,\n        face: gl.BACK\n      }) // @ts-ignore\n      .setUniform(extractedUniforms);\n      this.setAttributes({\n        dashArray: this.config.dashArray,\n        dashOffset: this.config.dashOffset,\n        dashRatio: this.config.dashRatio,\n        thickness: this.config.thickness\n      });\n      var attrNormal = [];\n      var attrMiter = [];\n      normals.forEach(function (n) {\n        var norm = n[0];\n        var miter = n[1];\n        attrNormal.push([norm[0], norm[1]]); // @ts-ignore\n\n        attrMiter.push(miter);\n      }); // [[0,1,2], [2,1,3]]\n\n      geometry.setIndex(attrIndex.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, []));\n      geometry.setAttribute('a_pos', Float32Array.from(attrPos.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, [])), {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float2'\n        }]\n      });\n      var colors = new Array(vertexCount).fill(undefined).map(function () {\n        return _toConsumableArray(_this2.config.color);\n      }).reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, []);\n      geometry.setAttribute('a_color', Float32Array.from(colors), {\n        arrayStride: 4 * 4,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4'\n        }]\n      });\n      geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n        arrayStride: 4 * 1,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float'\n        }]\n      });\n      geometry.setAttribute('a_line_normal', Float32Array.from(attrNormal.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, [])), {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 3,\n          offset: 0,\n          format: 'float2'\n        }]\n      });\n      geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n        arrayStride: 4 * 1,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float'\n        }]\n      });\n    }\n  }]);\n\n  return Line;\n}(Renderable), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"materialSystem\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometrySystem\", [_dec4, _dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../src/renderable/line/index.ts"],"names":["injectable","Line","inject","IDENTIFIER","named","name","data","mesh","colors","Float32Array","arrayStride","stepMode","attributes","shaderLocation","offset","format","vs","fs","lineFrag","extractedUniforms","material","vertexShader","fragmentShader","normals","attrIndex","attrPos","attrCounters","getNormals","vertexCount","geometry","enable","face","gl","BACK","dashArray","dashOffset","dashRatio","thickness","attrNormal","attrMiter","norm","n","miter"],"mappings":"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","sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { encodePickingColor } from '../../utils/picking';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\nimport lineFrag from './shaders/webgl.line.frag.glsl';\nimport lineVert from './shaders/webgl.line.vert.glsl';\n\ninterface ILineConfig {\n  id: number;\n  points: number[][];\n  thickness: number;\n  color: [number, number, number, number]; // sRGB\n  dashOffset: number;\n  dashArray: number;\n  dashRatio: number;\n}\n\n@injectable()\nexport class Line extends Renderable<Partial<ILineConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  private vertexCount: number;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      switch (name) {\n        case 'dashArray':\n          mesh.material.setUniform('u_dash_array', data);\n          break;\n        case 'dashOffset':\n          mesh.material.setUniform('u_dash_offset', data);\n          break;\n        case 'dashRatio':\n          mesh.material.setUniform('u_dash_ratio', data);\n          break;\n        case 'thickness':\n          mesh.material.setUniform('u_thickness', data);\n          break;\n        case 'color':\n          const colors = new Array(this.vertexCount)\n            .fill(undefined)\n            .map(() => data)\n            .reduce((prev, cur) => {\n              // @ts-ignore\n              return [...prev, ...cur];\n            }, []);\n          // @ts-ignore\n          mesh.geometry.setAttribute('a_color', Float32Array.from(colors), {\n            arrayStride: 4 * 4,\n            stepMode: 'vertex',\n            attributes: [\n              {\n                shaderLocation: 1,\n                offset: 0,\n                format: 'float4',\n              },\n            ],\n          });\n          break;\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('line', {\n      vs: lineVert,\n      fs: lineFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('line');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n    });\n\n    const { normals, attrIndex, attrPos, attrCounters } = getNormals(\n      this.config.points!,\n      false,\n    );\n    const vertexCount = attrPos.length;\n    this.vertexCount = vertexCount;\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount,\n    });\n\n    this.setMaterial(material);\n    this.setGeometry(geometry);\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      // @ts-ignore\n      .setUniform(extractedUniforms);\n\n    this.setAttributes({\n      dashArray: this.config.dashArray,\n      dashOffset: this.config.dashOffset,\n      dashRatio: this.config.dashRatio,\n      thickness: this.config.thickness,\n    });\n\n    const attrNormal: number[][] = [];\n    const attrMiter: number[] = [];\n\n    normals.forEach((n: number[][]) => {\n      const norm = n[0];\n      const miter = n[1];\n      attrNormal.push([norm[0], norm[1]]);\n      // @ts-ignore\n      attrMiter.push(miter);\n    });\n\n    // [[0,1,2], [2,1,3]]\n    geometry.setIndex(\n      attrIndex.reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []),\n    );\n\n    geometry.setAttribute(\n      'a_pos',\n      Float32Array.from(\n        attrPos.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    const colors = new Array(vertexCount)\n      .fill(undefined)\n      .map(() => [...this.config.color!])\n      .reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []);\n    geometry.setAttribute('a_color', Float32Array.from(colors), {\n      arrayStride: 4 * 4,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4',\n        },\n      ],\n    });\n\n    geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n\n    geometry.setAttribute(\n      'a_line_normal',\n      Float32Array.from(\n        attrNormal.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 3,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}