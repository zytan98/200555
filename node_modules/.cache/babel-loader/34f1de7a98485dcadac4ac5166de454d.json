{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * adaptor for regl.Framebuffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#framebuffers\n */\n\nvar ReglFramebuffer = /*#__PURE__*/function () {\n  function ReglFramebuffer(reGl, options) {\n    _classCallCheck(this, ReglFramebuffer);\n\n    this.framebuffer = void 0;\n    var width = options.width,\n        height = options.height,\n        color = options.color,\n        colors = options.colors,\n        depth = options.depth,\n        stencil = options.stencil;\n    var framebufferOptions = {\n      width: width,\n      height: height\n    };\n\n    if (Array.isArray(colors)) {\n      framebufferOptions.colors = colors.map(function (c) {\n        return c.get();\n      });\n    }\n\n    if (color && typeof color !== 'boolean') {\n      framebufferOptions.color = color.get();\n    } // TODO: depth & stencil\n\n\n    this.framebuffer = reGl.framebuffer(framebufferOptions);\n  }\n\n  _createClass(ReglFramebuffer, [{\n    key: \"get\",\n    value: function get() {\n      return this.framebuffer;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.framebuffer.destroy();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      this.framebuffer.resize(width, height);\n    }\n  }]);\n\n  return ReglFramebuffer;\n}();\n\nexport { ReglFramebuffer as default };","map":{"version":3,"sources":["../../src/webgl/ReglFramebuffer.ts"],"names":["ReglFramebuffer","framebuffer","width","height","color","colors","depth","stencil","options","framebufferOptions","Array","c","reGl"],"mappings":";;AAUA;AACA;AACA;AACA;;IACqBA,e;AAGnB,WAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAyE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AAAA,SAFjEC,WAEiE,GAAA,KAAA,CAAA;AAAA,QAC/DC,KAD+D,GACdM,OADc,CAAA,KAAA;AAAA,QACxDL,MADwD,GACdK,OADc,CAAA,MAAA;AAAA,QAChDJ,KADgD,GACdI,OADc,CAAA,KAAA;AAAA,QACzCH,MADyC,GACdG,OADc,CAAA,MAAA;AAAA,QACjCF,KADiC,GACdE,OADc,CAAA,KAAA;AAAA,QAC1BD,OAD0B,GACdC,OADc,CAAA,OAAA;AAGvE,QAAMC,kBAA2C,GAAG;AAClDP,MAAAA,KAAK,EAD6C,KAAA;AAElDC,MAAAA,MAAM,EAANA;AAFkD,KAApD;;AAKA,QAAIO,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzBD,MAAAA,kBAAkB,CAAlBA,MAAAA,GAA4B,MAAM,CAAN,GAAA,CAAW,UAAA,CAAA,EAAA;AAAA,eACpCE,CAAD,CADqC,GACpCA,EADoC;AAAvCF,OAA4B,CAA5BA;AAGD;;AAED,QAAIL,KAAK,IAAI,OAAA,KAAA,KAAb,SAAA,EAAyC;AACvCK,MAAAA,kBAAkB,CAAlBA,KAAAA,GAA4BL,KAAD,CAA3BK,GAA4BL,EAA5BK;AAfqE,KAAA,CAkBvE;;;AAEA,SAAA,WAAA,GAAmBG,IAAI,CAAJA,WAAAA,CAAnB,kBAAmBA,CAAnB;AACD;;;;0BAEY;AACX,aAAO,KAAP,WAAA;AACD;;;8BAEgB;AACf,WAAA,WAAA,CAAA,OAAA;AACD;;;iCAEmE;AAAA,UAApDV,KAAoD,GAAA,IAAA,CAApDA,KAAoD;AAAA,UAA7CC,MAA6C,GAAA,IAAA,CAA7CA,MAA6C;AAClE,WAAA,WAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA;AACD;;;;;;SApCkBH,e","sourcesContent":["import {\n  gl,\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n  IRenderbuffer,\n  ITexture2D,\n} from '@antv/g-webgpu-core';\nimport regl from 'regl';\nimport ReglTexture2D from './ReglTexture2D';\n\n/**\n * adaptor for regl.Framebuffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#framebuffers\n */\nexport default class ReglFramebuffer implements IFramebuffer {\n  private framebuffer: regl.Framebuffer;\n\n  constructor(reGl: regl.Regl, options: IFramebufferInitializationOptions) {\n    const { width, height, color, colors, depth, stencil } = options;\n\n    const framebufferOptions: regl.FramebufferOptions = {\n      width,\n      height,\n    };\n\n    if (Array.isArray(colors)) {\n      framebufferOptions.colors = colors.map((c: ITexture2D | IRenderbuffer) =>\n        (c as ReglTexture2D).get(),\n      );\n    }\n\n    if (color && typeof color !== 'boolean') {\n      framebufferOptions.color = (color as ReglTexture2D).get();\n    }\n\n    // TODO: depth & stencil\n\n    this.framebuffer = reGl.framebuffer(framebufferOptions);\n  }\n\n  public get() {\n    return this.framebuffer;\n  }\n\n  public destroy() {\n    this.framebuffer.destroy();\n  }\n\n  public resize({ width, height }: { width: number; height: number }) {\n    this.framebuffer.resize(width, height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}