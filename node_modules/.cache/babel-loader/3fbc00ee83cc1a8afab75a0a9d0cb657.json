{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nexport var ResourcePool = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function ResourcePool() {\n    _classCallCheck(this, ResourcePool);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    this.resourcePool = {};\n  }\n\n  _createClass(ResourcePool, [{\n    key: \"getOrCreateResource\",\n\n    /**\n     * 负责实例化虚拟资源，通过引擎服务\n     * @param resource 虚拟资源\n     */\n    value: function getOrCreateResource(resource) {\n      if (!this.resourcePool[resource.name]) {\n        var _resource$descriptor = resource.descriptor,\n            width = _resource$descriptor.width,\n            height = _resource$descriptor.height,\n            usage = _resource$descriptor.usage;\n        this.resourcePool[resource.name] = this.engine.createFramebuffer({\n          color: this.engine.createTexture2D({\n            width: width,\n            height: height,\n            wrapS: gl.CLAMP_TO_EDGE,\n            wrapT: gl.CLAMP_TO_EDGE,\n            usage: usage\n          })\n        });\n      }\n\n      return this.resourcePool[resource.name];\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.resourcePool = {};\n    }\n  }]);\n\n  return ResourcePool;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"sources":["../../../src/components/framegraph/ResourcePool.ts"],"names":["injectable","ResourcePool","inject","IDENTIFIER","resource","width","height","usage","color","wrapS","gl","wrapT"],"mappings":";;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AAEA,SAAA,UAAA,QAAA,kBAAA;AACA,SAAA,EAAA,QAAA,gBAAA;AAKA,OAAA,IAAaC,YAAb,IAAA,IAAA,GADCD,UAAU,EACX,EAAA,KAAA,GACGE,MAAM,CAACC,UAAU,CADpB,YACS,CADT,EAAA,IAAA,CAAA,MAAA,IAAA,OAAA,IAAA,KAAA,GAAA,aAAA,YAAA;AAAA,WAAA,YAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA,IAAA,CAAA;;AAAA,SAAA,YAAA,GAAA,EAAA;AAAA;;AAAA,EAAA,YAAA,CAAA,YAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;;AAOE;AACF;AACA;AACA;AAVA,IAAA,KAAA,EAAA,SAAA,mBAAA,CAAA,QAAA,EAWoE;AAChE,UAAI,CAAC,KAAA,YAAA,CAAkBC,QAAQ,CAA/B,IAAK,CAAL,EAAuC;AAAA,YAAA,oBAAA,GACJA,QAAQ,CADJ,UAAA;AAAA,YAC7BC,KAD6B,GAAA,oBAAA,CAAA,KAAA;AAAA,YACtBC,MADsB,GAAA,oBAAA,CAAA,MAAA;AAAA,YACdC,KADc,GAAA,oBAAA,CAAA,KAAA;AAErC,aAAA,YAAA,CAAkBH,QAAQ,CAA1B,IAAA,IAAmC,KAAA,MAAA,CAAA,iBAAA,CAA8B;AAC/DI,UAAAA,KAAK,EAAE,KAAA,MAAA,CAAA,eAAA,CAA4B;AACjCH,YAAAA,KAAK,EAD4B,KAAA;AAEjCC,YAAAA,MAAM,EAF2B,MAAA;AAGjCG,YAAAA,KAAK,EAAEC,EAAE,CAHwB,aAAA;AAIjCC,YAAAA,KAAK,EAAED,EAAE,CAJwB,aAAA;AAKjCH,YAAAA,KAAK,EAALA;AALiC,WAA5B;AADwD,SAA9B,CAAnC;AASD;;AAED,aAAO,KAAA,YAAA,CAAkBH,QAAQ,CAAjC,IAAO,CAAP;AACD;AA1BH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAAA,SAAA,KAAA,GA4BiB;AACb,WAAA,YAAA,GAAA,EAAA;AACD;AA9BH,GAAA,CAAA,CAAA;;AAAA,SAAA,YAAA;AAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,WAAA,GAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,EAAA;AAAA,EAAA,YAAA,EAAA,IAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,QAAA,EAAA,IAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,IAAA,MAAA,CAAA","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { IFramebuffer } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ResourceEntry } from './ResourceEntry';\n\n@injectable()\nexport class ResourcePool {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  // 资源池\n  private resourcePool: Record<string, IFramebuffer> = {};\n\n  /**\n   * 负责实例化虚拟资源，通过引擎服务\n   * @param resource 虚拟资源\n   */\n  public getOrCreateResource(resource: ResourceEntry): IFramebuffer {\n    if (!this.resourcePool[resource.name]) {\n      const { width, height, usage } = resource.descriptor;\n      this.resourcePool[resource.name] = this.engine.createFramebuffer({\n        color: this.engine.createTexture2D({\n          width,\n          height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE,\n          usage,\n        }),\n      });\n    }\n\n    return this.resourcePool[resource.name];\n  }\n\n  public clean() {\n    this.resourcePool = {};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}