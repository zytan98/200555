{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable } from 'inversify';\nimport { TextureCache } from './Cache';\nexport var Texture2D = (_dec = injectable(), _dec2 = inject(TextureCache), _dec3 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function Texture2D() {\n    _classCallCheck(this, Texture2D);\n\n    _initializerDefineProperty(this, \"textureCache\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n\n    this.config = void 0;\n    this.loaded = false;\n    this.texture = void 0;\n  }\n\n  _createClass(Texture2D, [{\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.config = config;\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this.loaded;\n    } // public update(config: ITexture2DInitializationOptions) {\n    //   if (this.loaded && this.texture) {\n    //     const t = this.texture.get();\n    //   }\n    // }\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.config.url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var existed = _this.textureCache.get(_this.config.url);\n\n                  if (existed) {\n                    resolve(existed);\n                  } else {\n                    var image = new Image();\n                    image.crossOrigin = 'Anonymous';\n                    image.src = _this.config.url;\n\n                    image.onload = function () {\n                      var texture = _this.engine.createTexture2D(_objectSpread(_objectSpread({}, _this.config), {}, {\n                        data: image,\n                        width: image.width,\n                        height: image.height,\n                        flipY: true\n                      }));\n\n                      _this.textureCache.set(_this.config.url, texture);\n\n                      _this.texture = texture;\n                      _this.loaded = true;\n                      resolve(texture);\n                    };\n\n                    image.onerror = function () {\n                      reject();\n                    };\n                  }\n                }));\n\n              case 4:\n                this.loaded = true;\n                this.texture = this.engine.createTexture2D(this.config);\n                return _context.abrupt(\"return\", this.texture);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Texture2D;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"textureCache\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../src/texture/Texture2D.ts"],"names":["injectable","Texture2D","inject","IDENTIFIER","existed","resolve","image","texture","data","width","height","flipY","reject"],"mappings":"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","sourcesContent":["import {\n  IClearOptions,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  IView,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable } from 'inversify';\nimport { TextureCache } from './Cache';\n\n@injectable()\nexport class Texture2D {\n  @inject(TextureCache)\n  private readonly textureCache: TextureCache;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  private config: ITexture2DInitializationOptions & { url: string };\n  private loaded = false;\n  private texture: ITexture2D;\n\n  public setConfig(config: ITexture2DInitializationOptions & { url: string }) {\n    this.config = config;\n  }\n\n  public isLoaded() {\n    return this.loaded;\n  }\n\n  // public update(config: ITexture2DInitializationOptions) {\n  //   if (this.loaded && this.texture) {\n  //     const t = this.texture.get();\n  //   }\n  // }\n\n  public async load() {\n    if (this.config.url) {\n      return new Promise<ITexture2D>((resolve, reject) => {\n        const existed = this.textureCache.get(this.config.url);\n        if (existed) {\n          resolve(existed);\n        } else {\n          const image = new Image();\n          image.crossOrigin = 'Anonymous';\n          image.src = this.config.url;\n          image.onload = () => {\n            const texture = this.engine.createTexture2D({\n              ...this.config,\n              data: image,\n              width: image.width,\n              height: image.height,\n              flipY: true,\n            });\n            this.textureCache.set(this.config.url, texture);\n            this.texture = texture;\n            this.loaded = true;\n            resolve(texture);\n          };\n          image.onerror = () => {\n            reject();\n          };\n        }\n      });\n    } else {\n      this.loaded = true;\n      this.texture = this.engine.createTexture2D(this.config);\n      return this.texture;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}