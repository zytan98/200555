{"ast":null,"code":"var TAU = Math.PI * 2;\n\nvar mapToEllipse = function (_a, rx, ry, cosphi, sinphi, centerx, centery) {\n  var x = _a.x,\n      y = _a.y;\n  x *= rx;\n  y *= ry;\n  var xp = cosphi * x - sinphi * y;\n  var yp = sinphi * x + cosphi * y;\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  };\n};\n\nvar approxUnitArc = function (ang1, ang2) {\n  // If 90 degree circular arc, use a constant\n  // as derived from http://spencermortensen.com/articles/bezier-circle\n  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  var x1 = Math.cos(ang1);\n  var y1 = Math.sin(ang1);\n  var x2 = Math.cos(ang1 + ang2);\n  var y2 = Math.sin(ang1 + ang2);\n  return [{\n    x: x1 - y1 * a,\n    y: y1 + x1 * a\n  }, {\n    x: x2 + y2 * a,\n    y: y2 - x2 * a\n  }, {\n    x: x2,\n    y: y2\n  }];\n};\n\nvar vectorAngle = function (ux, uy, vx, vy) {\n  var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  var dot = ux * vx + uy * vy;\n\n  if (dot > 1) {\n    dot = 1;\n  }\n\n  if (dot < -1) {\n    dot = -1;\n  }\n\n  return sign * Math.acos(dot);\n};\n\nvar getArcCenter = function (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n  var rxsq = Math.pow(rx, 2);\n  var rysq = Math.pow(ry, 2);\n  var pxpsq = Math.pow(pxp, 2);\n  var pypsq = Math.pow(pyp, 2);\n  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;\n\n  if (radicant < 0) {\n    radicant = 0;\n  }\n\n  radicant /= rxsq * pypsq + rysq * pxpsq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  var centerxp = radicant * rx / ry * pyp;\n  var centeryp = radicant * -ry / rx * pxp;\n  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n  var vx1 = (pxp - centerxp) / rx;\n  var vy1 = (pyp - centeryp) / ry;\n  var vx2 = (-pxp - centerxp) / rx;\n  var vy2 = (-pyp - centeryp) / ry;\n  var ang1 = vectorAngle(1, 0, vx1, vy1);\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n\n  return [centerx, centery, ang1, ang2];\n};\n\nvar arcToBezier = function (_a) {\n  var px = _a.px,\n      py = _a.py,\n      cx = _a.cx,\n      cy = _a.cy,\n      rx = _a.rx,\n      ry = _a.ry,\n      _b = _a.xAxisRotation,\n      xAxisRotation = _b === void 0 ? 0 : _b,\n      _c = _a.largeArcFlag,\n      largeArcFlag = _c === void 0 ? 0 : _c,\n      _d = _a.sweepFlag,\n      sweepFlag = _d === void 0 ? 0 : _d;\n  var curves = [];\n\n  if (rx === 0 || ry === 0) {\n    return [{\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      x: cx,\n      y: cy\n    }];\n  }\n\n  var sinphi = Math.sin(xAxisRotation * TAU / 360);\n  var cosphi = Math.cos(xAxisRotation * TAU / 360);\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n\n  if (pxp === 0 && pyp === 0) {\n    return [{\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      x: cx,\n      y: cy\n    }];\n  }\n\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n  var _e = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),\n      centerx = _e[0],\n      centery = _e[1],\n      ang1 = _e[2],\n      ang2 = _e[3]; // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n  // 1.0000000001. This causes `segments` to be greater than one, which is an\n  // unecessary split, and adds extra points to the bezier curve. To alleviate\n  // this issue, we round to 1.0 when the ratio is close to 1.0.\n\n\n  var ratio = Math.abs(ang2) / (TAU / 4);\n\n  if (Math.abs(1.0 - ratio) < 0.0000001) {\n    ratio = 1.0;\n  }\n\n  var segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2));\n    ang1 += ang2;\n  }\n\n  return curves.map(function (curve) {\n    var _a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),\n        x1 = _a.x,\n        y1 = _a.y;\n\n    var _b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),\n        x2 = _b.x,\n        y2 = _b.y;\n\n    var _c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),\n        x = _c.x,\n        y = _c.y;\n\n    return {\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      x: x,\n      y: y\n    };\n  });\n};\n\nexport function arcToCubic(x1, y1, rx, ry, angle, LAF, SF, x2, y2) {\n  var curves = arcToBezier({\n    px: x1,\n    py: y1,\n    cx: x2,\n    cy: y2,\n    rx: rx,\n    ry: ry,\n    xAxisRotation: angle,\n    largeArcFlag: LAF,\n    sweepFlag: SF\n  });\n  return curves.reduce(function (prev, cur) {\n    var x1 = cur.x1,\n        y1 = cur.y1,\n        x2 = cur.x2,\n        y2 = cur.y2,\n        x = cur.x,\n        y = cur.y;\n    prev.push(x1, y1, x2, y2, x, y);\n    return prev;\n  }, []);\n}","map":{"version":3,"sources":["../../src/process/arc-2-cubic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var TAU = Math.PI * 2;\nvar mapToEllipse = function (_a, rx, ry, cosphi, sinphi, centerx, centery) {\n    var x = _a.x, y = _a.y;\n    x *= rx;\n    y *= ry;\n    var xp = cosphi * x - sinphi * y;\n    var yp = sinphi * x + cosphi * y;\n    return {\n        x: xp + centerx,\n        y: yp + centery\n    };\n};\nvar approxUnitArc = function (ang1, ang2) {\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n    var a = ang2 === 1.5707963267948966\n        ? 0.551915024494\n        : ang2 === -1.5707963267948966\n            ? -0.551915024494\n            : 4 / 3 * Math.tan(ang2 / 4);\n    var x1 = Math.cos(ang1);\n    var y1 = Math.sin(ang1);\n    var x2 = Math.cos(ang1 + ang2);\n    var y2 = Math.sin(ang1 + ang2);\n    return [\n        {\n            x: x1 - y1 * a,\n            y: y1 + x1 * a\n        },\n        {\n            x: x2 + y2 * a,\n            y: y2 - x2 * a\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n};\nvar vectorAngle = function (ux, uy, vx, vy) {\n    var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n    var dot = ux * vx + uy * vy;\n    if (dot > 1) {\n        dot = 1;\n    }\n    if (dot < -1) {\n        dot = -1;\n    }\n    return sign * Math.acos(dot);\n};\nvar getArcCenter = function (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n    var rxsq = Math.pow(rx, 2);\n    var rysq = Math.pow(ry, 2);\n    var pxpsq = Math.pow(pxp, 2);\n    var pypsq = Math.pow(pyp, 2);\n    var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq);\n    if (radicant < 0) {\n        radicant = 0;\n    }\n    radicant /= (rxsq * pypsq) + (rysq * pxpsq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n    var centerxp = radicant * rx / ry * pyp;\n    var centeryp = radicant * -ry / rx * pxp;\n    var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n    var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n    var vx1 = (pxp - centerxp) / rx;\n    var vy1 = (pyp - centeryp) / ry;\n    var vx2 = (-pxp - centerxp) / rx;\n    var vy2 = (-pyp - centeryp) / ry;\n    var ang1 = vectorAngle(1, 0, vx1, vy1);\n    var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n    if (sweepFlag === 0 && ang2 > 0) {\n        ang2 -= TAU;\n    }\n    if (sweepFlag === 1 && ang2 < 0) {\n        ang2 += TAU;\n    }\n    return [centerx, centery, ang1, ang2];\n};\nvar arcToBezier = function (_a) {\n    var px = _a.px, py = _a.py, cx = _a.cx, cy = _a.cy, rx = _a.rx, ry = _a.ry, _b = _a.xAxisRotation, xAxisRotation = _b === void 0 ? 0 : _b, _c = _a.largeArcFlag, largeArcFlag = _c === void 0 ? 0 : _c, _d = _a.sweepFlag, sweepFlag = _d === void 0 ? 0 : _d;\n    var curves = [];\n    if (rx === 0 || ry === 0) {\n        return [{ x1: 0, y1: 0, x2: 0, y2: 0, x: cx, y: cy }];\n    }\n    var sinphi = Math.sin(xAxisRotation * TAU / 360);\n    var cosphi = Math.cos(xAxisRotation * TAU / 360);\n    var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n    var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n    if (pxp === 0 && pyp === 0) {\n        return [{ x1: 0, y1: 0, x2: 0, y2: 0, x: cx, y: cy }];\n    }\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) +\n        Math.pow(pyp, 2) / Math.pow(ry, 2);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n    var _e = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp), centerx = _e[0], centery = _e[1], ang1 = _e[2], ang2 = _e[3];\n    // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    var ratio = Math.abs(ang2) / (TAU / 4);\n    if (Math.abs(1.0 - ratio) < 0.0000001) {\n        ratio = 1.0;\n    }\n    var segments = Math.max(Math.ceil(ratio), 1);\n    ang2 /= segments;\n    for (var i = 0; i < segments; i++) {\n        curves.push(approxUnitArc(ang1, ang2));\n        ang1 += ang2;\n    }\n    return curves.map(function (curve) {\n        var _a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery), x1 = _a.x, y1 = _a.y;\n        var _b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery), x2 = _b.x, y2 = _b.y;\n        var _c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery), x = _c.x, y = _c.y;\n        return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };\n    });\n};\nexport function arcToCubic(x1, y1, rx, ry, angle, LAF, SF, x2, y2) {\n    var curves = arcToBezier({\n        px: x1,\n        py: y1,\n        cx: x2,\n        cy: y2,\n        rx: rx,\n        ry: ry,\n        xAxisRotation: angle,\n        largeArcFlag: LAF,\n        sweepFlag: SF,\n    });\n    return curves.reduce(function (prev, cur) {\n        var x1 = cur.x1, y1 = cur.y1, x2 = cur.x2, y2 = cur.y2, x = cur.x, y = cur.y;\n        prev.push(x1, y1, x2, y2, x, y);\n        return prev;\n    }, []);\n}\n//# sourceMappingURL=arc-2-cubic.js.map"]},"metadata":{},"sourceType":"module"}