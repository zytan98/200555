{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { initCanvas, drawBackground, transformMatrix, getPixelRatio } from './util';\n/**\n * linePattern 的 默认配置\n */\n\nexport var defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2\n};\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\n\nexport function drawLine(context, cfg, d) {\n  var stroke = cfg.stroke,\n      lineWidth = cfg.lineWidth,\n      strokeOpacity = cfg.strokeOpacity;\n  var path = new Path2D(d);\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n/**\n * 创建 linePattern\n */\n\nexport function createLinePattern(cfg) {\n  var lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n  var spacing = lineCfg.spacing,\n      rotation = lineCfg.rotation,\n      lineWidth = lineCfg.lineWidth; // 计算 pattern 画布的大小， path 所需的 d\n\n  var width = spacing + lineWidth || 1;\n  var height = spacing + lineWidth || 1;\n  var d = \"\\n            M 0 0 L \" + width + \" 0\\n            M 0 \" + height + \" L \" + width + \" \" + height + \"\\n            \"; // 初始化 patternCanvas\n\n  var canvas = initCanvas(width, height);\n  var ctx = canvas.getContext('2d'); // 绘制 background，line\n\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  } // 返回 Pattern 对象\n\n\n  return pattern;\n}","map":{"version":3,"sources":["../../../src/utils/pattern/line.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,aAA3B;AACA,SAAS,UAAT,EAAqB,cAArB,EAAqC,eAArC,EAAsD,aAAtD,QAA2E,QAA3E;AAEA;;AAEG;;AACH,OAAO,IAAM,qBAAqB,GAAG;AACnC,EAAA,QAAQ,EAAE,EADyB;AAEnC,EAAA,OAAO,EAAE,CAF0B;AAGnC,EAAA,OAAO,EAAE,CAH0B;AAInC,EAAA,eAAe,EAAE,aAJkB;AAKnC,EAAA,aAAa,EAAE,GALoB;AAMnC,EAAA,MAAM,EAAE,MAN2B;AAOnC,EAAA,SAAS,EAAE;AAPwB,CAA9B;AAUP;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,OAAnB,EAAsD,GAAtD,EAA2E,CAA3E,EAAoF;AAChF,MAAA,MAAM,GAA+B,GAAG,CAAlC,MAAN;AAAA,MAAQ,SAAS,GAAoB,GAAG,CAAvB,SAAjB;AAAA,MAAmB,aAAa,GAAK,GAAG,CAAR,aAAhC;AACR,MAAM,IAAI,GAAG,IAAI,MAAJ,CAAW,CAAX,CAAb;AAEA,EAAA,OAAO,CAAC,WAAR,GAAsB,aAAtB;AACA,EAAA,OAAO,CAAC,OAAR,GAAkB,QAAlB;AACA,EAAA,OAAO,CAAC,WAAR,GAAsB,SAAS,GAAG,MAAH,GAAY,aAA3C;AACA,EAAA,OAAO,CAAC,SAAR,GAAoB,SAApB;AACA,EAAA,OAAO,CAAC,MAAR,CAAe,IAAf;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAgD;AACpD,MAAM,OAAO,GAAG,UAAU,CAAC,EAAD,EAAK,qBAAL,EAA4B,GAA5B,CAA1B;AAEQ,MAAA,OAAO,GAA0B,OAAO,CAAjC,OAAP;AAAA,MAAS,QAAQ,GAAgB,OAAO,CAAvB,QAAjB;AAAA,MAAmB,SAAS,GAAK,OAAO,CAAZ,SAA5B,CAH4C,CAKpD;;AACA,MAAM,KAAK,GAAG,OAAO,GAAG,SAAV,IAAuB,CAArC;AACA,MAAM,MAAM,GAAG,OAAO,GAAG,SAAV,IAAuB,CAAtC;AACA,MAAM,CAAC,GAAG,2BACU,KADV,GACe,sBADf,GAEM,MAFN,GAEY,KAFZ,GAEkB,KAFlB,GAEuB,GAFvB,GAE2B,MAF3B,GAEiC,gBAF3C,CARoD,CAapD;;AACA,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,EAAQ,MAAR,CAAzB;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAZ,CAfoD,CAiBpD;;AACA,EAAA,cAAc,CAAC,GAAD,EAAM,OAAN,EAAe,KAAf,EAAsB,MAAtB,CAAd;AACA,EAAA,QAAQ,CAAC,GAAD,EAAM,OAAN,EAAe,CAAf,CAAR;AAEA,MAAM,OAAO,GAAG,GAAG,CAAC,aAAJ,CAAkB,MAAlB,EAA0B,QAA1B,CAAhB;;AAEA,MAAI,OAAJ,EAAa;AACX,QAAM,GAAG,GAAG,aAAa,EAAzB;AACA,QAAM,MAAM,GAAG,eAAe,CAAC,GAAD,EAAM,QAAN,CAA9B;AACA,IAAA,OAAO,CAAC,YAAR,CAAqB,MAArB;AACD,GA3BmD,CA6BpD;;;AACA,SAAO,OAAP;AACD","sourcesContent":["import { LinePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport { initCanvas, drawBackground, transformMatrix, getPixelRatio } from './util';\n\n/**\n * linePattern 的 默认配置\n */\nexport const defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2,\n};\n\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\nexport function drawLine(context: CanvasRenderingContext2D, cfg: LinePatternCfg, d: string) {\n  const { stroke, lineWidth, strokeOpacity } = cfg;\n  const path = new Path2D(d);\n\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n\n/**\n * 创建 linePattern\n */\nexport function createLinePattern(cfg?: LinePatternCfg): CanvasPattern {\n  const lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n\n  const { spacing, rotation, lineWidth } = lineCfg;\n\n  // 计算 pattern 画布的大小， path 所需的 d\n  const width = spacing + lineWidth || 1;\n  const height = spacing + lineWidth || 1;\n  const d = `\n            M 0 0 L ${width} 0\n            M 0 ${height} L ${width} ${height}\n            `;\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(width, height);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，line\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  // 返回 Pattern 对象\n  return pattern;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}