{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\n/**\n * Axis-Aligned Bounding Box\n * 为了便于后续 Frustum Culling，通过查找表定义 p-vertex 和 n-vertex\n * @see https://github.com/antvis/GWebGPUEngine/issues/3\n */\n\nexport var AABB = /*#__PURE__*/function () {\n  function AABB(center, halfExtents) {\n    _classCallCheck(this, AABB);\n\n    this.center = void 0;\n    this.halfExtents = void 0;\n    this.min = vec3.create();\n    this.max = vec3.create();\n    this.update(center, halfExtents);\n  }\n\n  _createClass(AABB, [{\n    key: \"update\",\n    value: function update(center, halfExtents) {\n      this.center = center || vec3.create();\n      this.halfExtents = halfExtents || vec3.fromValues(0.5, 0.5, 0.5);\n      this.min = vec3.sub(this.min, this.center, this.halfExtents);\n      this.max = vec3.add(this.max, this.center, this.halfExtents);\n    }\n  }, {\n    key: \"setMinMax\",\n    value: function setMinMax(min, max) {\n      vec3.add(this.center, max, min);\n      vec3.scale(this.center, this.center, 0.5);\n      vec3.sub(this.halfExtents, max, min);\n      vec3.scale(this.halfExtents, this.halfExtents, 0.5);\n      vec3.copy(this.min, min);\n      vec3.copy(this.max, max);\n    }\n  }, {\n    key: \"getMin\",\n    value: function getMin() {\n      return this.min;\n    }\n  }, {\n    key: \"getMax\",\n    value: function getMax() {\n      return this.max;\n    }\n  }, {\n    key: \"add\",\n    value: function add(aabb) {\n      var tc = this.center;\n      var tcx = tc[0];\n      var tcy = tc[1];\n      var tcz = tc[2];\n      var th = this.halfExtents;\n      var thx = th[0];\n      var thy = th[1];\n      var thz = th[2];\n      var tminx = tcx - thx;\n      var tmaxx = tcx + thx;\n      var tminy = tcy - thy;\n      var tmaxy = tcy + thy;\n      var tminz = tcz - thz;\n      var tmaxz = tcz + thz;\n      var oc = aabb.center;\n      var ocx = oc[0];\n      var ocy = oc[1];\n      var ocz = oc[2];\n      var oh = aabb.halfExtents;\n      var ohx = oh[0];\n      var ohy = oh[1];\n      var ohz = oh[2];\n      var ominx = ocx - ohx;\n      var omaxx = ocx + ohx;\n      var ominy = ocy - ohy;\n      var omaxy = ocy + ohy;\n      var ominz = ocz - ohz;\n      var omaxz = ocz + ohz;\n\n      if (ominx < tminx) {\n        tminx = ominx;\n      }\n\n      if (omaxx > tmaxx) {\n        tmaxx = omaxx;\n      }\n\n      if (ominy < tminy) {\n        tminy = ominy;\n      }\n\n      if (omaxy > tmaxy) {\n        tmaxy = omaxy;\n      }\n\n      if (ominz < tminz) {\n        tminz = ominz;\n      }\n\n      if (omaxz > tmaxz) {\n        tmaxz = omaxz;\n      }\n\n      tc[0] = (tminx + tmaxx) * 0.5;\n      tc[1] = (tminy + tmaxy) * 0.5;\n      tc[2] = (tminz + tmaxz) * 0.5;\n      th[0] = (tmaxx - tminx) * 0.5;\n      th[1] = (tmaxy - tminy) * 0.5;\n      th[2] = (tmaxz - tminz) * 0.5;\n      this.min[0] = tminx;\n      this.min[1] = tminy;\n      this.min[2] = tminz;\n      this.max[0] = tmaxx;\n      this.max[1] = tmaxy;\n      this.max[2] = tmaxz;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(aabb) {\n      var aMax = this.getMax();\n      var aMin = this.getMin();\n      var bMax = aabb.getMax();\n      var bMin = aabb.getMin();\n      return aMin[0] <= bMax[0] && aMax[0] >= bMin[0] && aMin[1] <= bMax[1] && aMax[1] >= bMin[1] && aMin[2] <= bMax[2] && aMax[2] >= bMin[2];\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      var min = this.getMin();\n      var max = this.getMax();\n      return !(point[0] < min[0] || point[0] > max[0] || point[1] < min[1] || point[1] > max[1] || point[2] < min[2] || point[2] > max[2]);\n    }\n    /**\n     * get n-vertex\n     * @param plane plane of CullingVolume\n     */\n\n  }, {\n    key: \"getNegativeFarPoint\",\n    value: function getNegativeFarPoint(plane) {\n      if (plane.pnVertexFlag === 0x111) {\n        return vec3.copy(vec3.create(), this.min);\n      } else if (plane.pnVertexFlag === 0x110) {\n        return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n      } else if (plane.pnVertexFlag === 0x101) {\n        return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n      } else if (plane.pnVertexFlag === 0x100) {\n        return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n      } else if (plane.pnVertexFlag === 0x011) {\n        return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n      } else if (plane.pnVertexFlag === 0x010) {\n        return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n      } else if (plane.pnVertexFlag === 0x001) {\n        return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n      } else {\n        return vec3.fromValues(this.max[0], this.max[1], this.max[2]);\n      }\n    }\n    /**\n     * get p-vertex\n     * @param plane plane of CullingVolume\n     */\n\n  }, {\n    key: \"getPositiveFarPoint\",\n    value: function getPositiveFarPoint(plane) {\n      if (plane.pnVertexFlag === 0x111) {\n        return vec3.copy(vec3.create(), this.max);\n      } else if (plane.pnVertexFlag === 0x110) {\n        return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n      } else if (plane.pnVertexFlag === 0x101) {\n        return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n      } else if (plane.pnVertexFlag === 0x100) {\n        return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n      } else if (plane.pnVertexFlag === 0x011) {\n        return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n      } else if (plane.pnVertexFlag === 0x010) {\n        return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n      } else if (plane.pnVertexFlag === 0x001) {\n        return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n      } else {\n        return vec3.fromValues(this.min[0], this.min[1], this.min[2]);\n      }\n    }\n  }]);\n\n  return AABB;\n}();","map":{"version":3,"sources":["../../src/shape/AABB.ts"],"names":["AABB","center","halfExtents","min","vec3","max","tc","tcx","tcy","tcz","th","thx","thy","thz","tminx","tmaxx","tminy","tmaxy","tminz","tmaxz","oc","aabb","ocx","ocy","ocz","oh","ohx","ohy","ohz","ominx","omaxx","ominy","omaxy","ominz","omaxz","aMax","aMin","bMax","bMin","point","plane"],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\n\n/**\n * Axis-Aligned Bounding Box\n * 为了便于后续 Frustum Culling，通过查找表定义 p-vertex 和 n-vertex\n * @see https://github.com/antvis/GWebGPUEngine/issues/3\n */\nexport class AABB {\n  public center: vec3;\n\n  public halfExtents: vec3;\n\n  private min: vec3 = vec3.create();\n  private max: vec3 = vec3.create();\n\n  constructor(center?: vec3, halfExtents?: vec3) {\n    this.update(center, halfExtents);\n  }\n\n  public update(center?: vec3, halfExtents?: vec3) {\n    this.center = center || vec3.create();\n    this.halfExtents = halfExtents || vec3.fromValues(0.5, 0.5, 0.5);\n    this.min = vec3.sub(this.min, this.center, this.halfExtents);\n    this.max = vec3.add(this.max, this.center, this.halfExtents);\n  }\n\n  public setMinMax(min: vec3, max: vec3) {\n    vec3.add(this.center, max, min);\n    vec3.scale(this.center, this.center, 0.5);\n\n    vec3.sub(this.halfExtents, max, min);\n    vec3.scale(this.halfExtents, this.halfExtents, 0.5);\n\n    vec3.copy(this.min, min);\n    vec3.copy(this.max, max);\n  }\n\n  public getMin() {\n    return this.min;\n  }\n\n  public getMax() {\n    return this.max;\n  }\n\n  public add(aabb: AABB) {\n    const tc = this.center;\n    const tcx = tc[0];\n    const tcy = tc[1];\n    const tcz = tc[2];\n    const th = this.halfExtents;\n    const thx = th[0];\n    const thy = th[1];\n    const thz = th[2];\n    let tminx = tcx - thx;\n    let tmaxx = tcx + thx;\n    let tminy = tcy - thy;\n    let tmaxy = tcy + thy;\n    let tminz = tcz - thz;\n    let tmaxz = tcz + thz;\n\n    const oc = aabb.center;\n    const ocx = oc[0];\n    const ocy = oc[1];\n    const ocz = oc[2];\n    const oh = aabb.halfExtents;\n    const ohx = oh[0];\n    const ohy = oh[1];\n    const ohz = oh[2];\n    const ominx = ocx - ohx;\n    const omaxx = ocx + ohx;\n    const ominy = ocy - ohy;\n    const omaxy = ocy + ohy;\n    const ominz = ocz - ohz;\n    const omaxz = ocz + ohz;\n\n    if (ominx < tminx) {\n      tminx = ominx;\n    }\n    if (omaxx > tmaxx) {\n      tmaxx = omaxx;\n    }\n    if (ominy < tminy) {\n      tminy = ominy;\n    }\n    if (omaxy > tmaxy) {\n      tmaxy = omaxy;\n    }\n    if (ominz < tminz) {\n      tminz = ominz;\n    }\n    if (omaxz > tmaxz) {\n      tmaxz = omaxz;\n    }\n\n    tc[0] = (tminx + tmaxx) * 0.5;\n    tc[1] = (tminy + tmaxy) * 0.5;\n    tc[2] = (tminz + tmaxz) * 0.5;\n    th[0] = (tmaxx - tminx) * 0.5;\n    th[1] = (tmaxy - tminy) * 0.5;\n    th[2] = (tmaxz - tminz) * 0.5;\n\n    this.min[0] = tminx;\n    this.min[1] = tminy;\n    this.min[2] = tminz;\n    this.max[0] = tmaxx;\n    this.max[1] = tmaxy;\n    this.max[2] = tmaxz;\n  }\n\n  public intersects(aabb: AABB) {\n    const aMax = this.getMax();\n    const aMin = this.getMin();\n    const bMax = aabb.getMax();\n    const bMin = aabb.getMin();\n\n    return (\n      aMin[0] <= bMax[0] &&\n      aMax[0] >= bMin[0] &&\n      aMin[1] <= bMax[1] &&\n      aMax[1] >= bMin[1] &&\n      aMin[2] <= bMax[2] &&\n      aMax[2] >= bMin[2]\n    );\n  }\n\n  public containsPoint(point: vec3) {\n    const min = this.getMin();\n    const max = this.getMax();\n\n    return !(\n      point[0] < min[0] ||\n      point[0] > max[0] ||\n      point[1] < min[1] ||\n      point[1] > max[1] ||\n      point[2] < min[2] ||\n      point[2] > max[2]\n    );\n  }\n\n  /**\n   * get n-vertex\n   * @param plane plane of CullingVolume\n   */\n  public getNegativeFarPoint(plane: Plane) {\n    if (plane.pnVertexFlag === 0x111) {\n      return vec3.copy(vec3.create(), this.min);\n    } else if (plane.pnVertexFlag === 0x110) {\n      return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n    } else if (plane.pnVertexFlag === 0x101) {\n      return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n    } else if (plane.pnVertexFlag === 0x100) {\n      return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n    } else if (plane.pnVertexFlag === 0x011) {\n      return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n    } else if (plane.pnVertexFlag === 0x010) {\n      return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n    } else if (plane.pnVertexFlag === 0x001) {\n      return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n    } else {\n      return vec3.fromValues(this.max[0], this.max[1], this.max[2]);\n    }\n  }\n\n  /**\n   * get p-vertex\n   * @param plane plane of CullingVolume\n   */\n  public getPositiveFarPoint(plane: Plane) {\n    if (plane.pnVertexFlag === 0x111) {\n      return vec3.copy(vec3.create(), this.max);\n    } else if (plane.pnVertexFlag === 0x110) {\n      return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n    } else if (plane.pnVertexFlag === 0x101) {\n      return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n    } else if (plane.pnVertexFlag === 0x100) {\n      return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n    } else if (plane.pnVertexFlag === 0x011) {\n      return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n    } else if (plane.pnVertexFlag === 0x010) {\n      return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n    } else if (plane.pnVertexFlag === 0x001) {\n      return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n    } else {\n      return vec3.fromValues(this.min[0], this.min[1], this.min[2]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}