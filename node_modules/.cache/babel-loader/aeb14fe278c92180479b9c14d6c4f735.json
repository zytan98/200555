{"ast":null,"code":"import { __assign } from \"tslib\";\nexport function getScaleMax(maxAngle, yField, data) {\n  var yData = data.map(function (item) {\n    return item[yField];\n  }).filter(function (v) {\n    return v !== undefined;\n  });\n  var maxValue = yData.length > 0 ? Math.max.apply(Math, yData) : 0;\n  var formatRadian = Math.abs(maxAngle) % 360;\n\n  if (!formatRadian) {\n    return maxValue;\n  }\n\n  return maxValue * 360 / formatRadian;\n}\n/**\n * 获取堆叠之后的数据\n */\n\nexport function getStackedData(data, xField, yField) {\n  var stackedData = [];\n  data.forEach(function (item) {\n    var valueItem = stackedData.find(function (v) {\n      return v[xField] === item[xField];\n    });\n\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push(__assign({}, item));\n    }\n  });\n  return stackedData;\n}","map":{"version":3,"sources":["../../../src/plots/radial-bar/utils.ts"],"names":[],"mappings":";AAEA,OAAM,SAAU,WAAV,CAAsB,QAAtB,EAAwC,MAAxC,EAAwD,IAAxD,EAAkE;AACtE,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,UAAC,IAAD,EAAK;AAAK,WAAA,IAAI,CAAJ,MAAI,CAAJ;AAAY,GAA/B,EAAiC,MAAjC,CAAwC,UAAC,CAAD,EAAE;AAAK,WAAA,CAAC,KAAD,SAAA;AAAe,GAA9D,CAAd;AACA,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB,IAAI,CAAC,GAAL,CAAQ,KAAR,CAAA,IAAA,EAAY,KAAZ,CAAnB,GAAwC,CAAzD;AACA,MAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,IAAqB,GAA1C;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,WAAO,QAAP;AACD;;AACD,SAAQ,QAAQ,GAAG,GAAZ,GAAmB,YAA1B;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAqC,MAArC,EAAqD,MAArD,EAAmE;AACvE,MAAM,WAAW,GAAS,EAA1B;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,UAAC,IAAD,EAAK;AAChB,QAAM,SAAS,GAAG,WAAW,CAAC,IAAZ,CAAiB,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAC,MAAD,CAAD,KAAc,IAAI,CAAlB,MAAkB,CAAlB;AAA0B,KAAlD,CAAlB;;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,MAAD,CAAT,IAAqB,IAAI,CAAC,MAAD,CAAJ,IAAgB,IAArC;AACD,KAFD,MAEO;AACL,MAAA,WAAW,CAAC,IAAZ,CAAgB,QAAA,CAAA,EAAA,EAAM,IAAN,CAAhB;AACD;AACF,GAPD;AAQA,SAAO,WAAP;AACD","sourcesContent":["import { Data } from '../../types';\n\nexport function getScaleMax(maxAngle: number, yField: string, data: Data): number {\n  const yData = data.map((item) => item[yField]).filter((v) => v !== undefined);\n  const maxValue = yData.length > 0 ? Math.max(...yData) : 0;\n  const formatRadian = Math.abs(maxAngle) % 360;\n  if (!formatRadian) {\n    return maxValue;\n  }\n  return (maxValue * 360) / formatRadian;\n}\n\n/**\n * 获取堆叠之后的数据\n */\nexport function getStackedData(data: Data, xField: string, yField: string) {\n  const stackedData: Data = [];\n  data.forEach((item) => {\n    const valueItem = stackedData.find((v) => v[xField] === item[xField]);\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push({ ...item });\n    }\n  });\n  return stackedData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}