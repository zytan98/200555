{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n/**\n * render w/ regl\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md\n */\n\n\nimport { gl } from '@antv/g-webgpu-core';\nimport { injectable } from 'inversify';\nimport regl from 'regl';\nimport ReglAttribute from './ReglAttribute';\nimport ReglBuffer from './ReglBuffer';\nimport ReglComputeModel from './ReglComputeModel';\nimport ReglElements from './ReglElements';\nimport ReglFramebuffer from './ReglFramebuffer';\nimport ReglModel from './ReglModel';\nimport ReglTexture2D from './ReglTexture2D';\n/**\n * regl renderer\n */\n\nexport var WebGLEngine = (_dec = injectable(), _dec(_class = (_temp = /*#__PURE__*/function () {\n  function WebGLEngine() {\n    var _this = this;\n\n    _classCallCheck(this, WebGLEngine);\n\n    this.supportWebGPU = false;\n    this.useWGSL = false;\n    this.$canvas = void 0;\n    this.gl = void 0;\n    this.inited = void 0;\n\n    this.createModel = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!options.uniforms) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return Promise.all(Object.keys(options.uniforms).map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n                    var texture;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(options.uniforms[name] && options.uniforms[name].load !== undefined)) {\n                              _context.next = 5;\n                              break;\n                            }\n\n                            _context.next = 3;\n                            return options.uniforms[name].load();\n\n                          case 3:\n                            texture = _context.sent; // @ts-ignore\n\n                            options.uniforms[name] = texture;\n\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                return _context2.abrupt(\"return\", new ReglModel(_this.gl, options));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.createAttribute = function (options) {\n      return new ReglAttribute(_this.gl, options);\n    };\n\n    this.createBuffer = function (options) {\n      return new ReglBuffer(_this.gl, options);\n    };\n\n    this.createElements = function (options) {\n      return new ReglElements(_this.gl, options);\n    };\n\n    this.createTexture2D = function (options) {\n      return new ReglTexture2D(_this.gl, options);\n    };\n\n    this.createFramebuffer = function (options) {\n      return new ReglFramebuffer(_this.gl, options);\n    };\n\n    this.useFramebuffer = function (framebuffer, drawCommands) {\n      _this.gl({\n        framebuffer: framebuffer ? framebuffer.get() : null\n      })(drawCommands);\n    };\n\n    this.createComputeModel = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(context) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new ReglComputeModel(_this.gl, context));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    this.clear = function (options) {\n      // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clear-the-draw-buffer\n      var color = options.color,\n          depth = options.depth,\n          stencil = options.stencil,\n          _options$framebuffer = options.framebuffer,\n          framebuffer = _options$framebuffer === void 0 ? null : _options$framebuffer;\n      var reglClearOptions = {\n        color: color,\n        depth: depth,\n        stencil: stencil\n      };\n      reglClearOptions.framebuffer = framebuffer === null ? framebuffer : framebuffer.get();\n\n      _this.gl.clear(reglClearOptions);\n    };\n\n    this.setScissor = function (scissor) {\n      if (_this.gl && _this.gl._gl) {\n        // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/scissor\n        if (scissor.enable && scissor.box) {\n          // console.log(scissor.box);\n          _this.gl._gl.enable(gl.SCISSOR_TEST);\n\n          _this.gl._gl.scissor(scissor.box.x, scissor.box.y, scissor.box.width, scissor.box.height);\n        } else {\n          _this.gl._gl.disable(gl.SCISSOR_TEST);\n        }\n\n        _this.gl._refresh();\n      }\n    };\n\n    this.viewport = function (_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y,\n          width = _ref4.width,\n          height = _ref4.height;\n\n      if (_this.gl && _this.gl._gl) {\n        // use WebGL context directly\n        // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#unsafe-escape-hatch\n        _this.gl._gl.viewport(x, y, width, height);\n\n        _this.gl._refresh();\n      }\n    };\n\n    this.readPixels = function (options) {\n      var framebuffer = options.framebuffer,\n          x = options.x,\n          y = options.y,\n          width = options.width,\n          height = options.height;\n      var readPixelsOptions = {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n\n      if (framebuffer) {\n        readPixelsOptions.framebuffer = framebuffer.get();\n      }\n\n      return _this.gl.read(readPixelsOptions);\n    };\n\n    this.getCanvas = function () {\n      return _this.$canvas;\n    };\n\n    this.getGLContext = function () {\n      return _this.gl._gl;\n    };\n\n    this.destroy = function () {\n      if (_this.gl) {\n        // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clean-up\n        _this.gl.destroy();\n\n        _this.inited = false;\n      }\n    };\n  }\n\n  _createClass(WebGLEngine, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cfg) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.inited) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                this.$canvas = cfg.canvas; // tslint:disable-next-line:typedef\n\n                _context4.next = 5;\n                return new Promise(function (resolve, reject) {\n                  regl({\n                    canvas: cfg.canvas,\n                    attributes: {\n                      alpha: true,\n                      // use TAA instead of MSAA\n                      // @see https://www.khronos.org/registry/webgl/specs/1.0/#5.2.1\n                      antialias: cfg.antialias,\n                      premultipliedAlpha: true // preserveDrawingBuffer: false,\n\n                    },\n                    pixelRatio: 1,\n                    // TODO: use extensions\n                    extensions: ['OES_element_index_uint', 'OES_texture_float', 'OES_standard_derivatives', // wireframe\n                    'angle_instanced_arrays' // VSM shadow map\n                    ],\n                    optionalExtensions: ['EXT_texture_filter_anisotropic', 'EXT_blend_minmax', 'WEBGL_depth_texture'],\n                    profile: true,\n                    onDone: function onDone(err, r) {\n                      if (err || !r) {\n                        reject(err);\n                      } // @ts-ignore\n\n\n                      resolve(r);\n                    }\n                  });\n                });\n\n              case 5:\n                this.gl = _context4.sent;\n                this.inited = true;\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function init(_x4) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"isFloatSupported\",\n    value: function isFloatSupported() {\n      // @see https://github.com/antvis/GWebGPUEngine/issues/26\n      // @ts-ignore\n      return this.gl.limits.readFloat;\n    }\n  }, {\n    key: \"beginFrame\",\n    value: function beginFrame() {//\n    }\n  }, {\n    key: \"endFrame\",\n    value: function endFrame() {//\n    }\n  }]);\n\n  return WebGLEngine;\n}(), _temp)) || _class);","map":{"version":3,"sources":["../../src/webgl/index.ts"],"names":["injectable","WebGLEngine","cfg","regl","canvas","attributes","alpha","antialias","premultipliedAlpha","pixelRatio","extensions","optionalExtensions","profile","onDone","err","reject","resolve","options","texture","framebuffer","color","depth","stencil","reglClearOptions","scissor","gl","x","y","width","height","readPixelsOptions"],"mappings":"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","sourcesContent":["/**\n * render w/ regl\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md\n */\nimport {\n  gl,\n  GLSLContext,\n  IAttribute,\n  IAttributeInitializationOptions,\n  IBuffer,\n  IBufferInitializationOptions,\n  IClearOptions,\n  IComputeModel,\n  IElements,\n  IElementsInitializationOptions,\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n  IModel,\n  IModelInitializationOptions,\n  IReadPixelsOptions,\n  IRendererConfig,\n  IRendererService,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n} from '@antv/g-webgpu-core';\nimport { injectable } from 'inversify';\nimport regl from 'regl';\nimport ReglAttribute from './ReglAttribute';\nimport ReglBuffer from './ReglBuffer';\nimport ReglComputeModel from './ReglComputeModel';\nimport ReglElements from './ReglElements';\nimport ReglFramebuffer from './ReglFramebuffer';\nimport ReglModel from './ReglModel';\nimport ReglTexture2D from './ReglTexture2D';\n\n/**\n * regl renderer\n */\n@injectable()\nexport class WebGLEngine implements IRendererService {\n  public supportWebGPU = false;\n  public useWGSL = false;\n  private $canvas: HTMLCanvasElement;\n  private gl: regl.Regl;\n  private inited: boolean;\n\n  public async init(cfg: IRendererConfig): Promise<void> {\n    if (this.inited) {\n      return;\n    }\n    this.$canvas = cfg.canvas!;\n    // tslint:disable-next-line:typedef\n    this.gl = await new Promise((resolve, reject) => {\n      regl({\n        canvas: cfg.canvas,\n        attributes: {\n          alpha: true,\n          // use TAA instead of MSAA\n          // @see https://www.khronos.org/registry/webgl/specs/1.0/#5.2.1\n          antialias: cfg.antialias,\n          premultipliedAlpha: true,\n          // preserveDrawingBuffer: false,\n        },\n        pixelRatio: 1,\n        // TODO: use extensions\n        extensions: [\n          'OES_element_index_uint',\n          'OES_texture_float',\n          'OES_standard_derivatives', // wireframe\n          'angle_instanced_arrays', // VSM shadow map\n        ],\n        optionalExtensions: [\n          'EXT_texture_filter_anisotropic',\n          'EXT_blend_minmax',\n          'WEBGL_depth_texture',\n        ],\n        profile: true,\n        onDone: (err: Error | null, r?: regl.Regl | undefined): void => {\n          if (err || !r) {\n            reject(err);\n          }\n          // @ts-ignore\n          resolve(r);\n        },\n      });\n    });\n    this.inited = true;\n  }\n\n  public isFloatSupported() {\n    // @see https://github.com/antvis/GWebGPUEngine/issues/26\n    // @ts-ignore\n    return this.gl.limits.readFloat;\n  }\n\n  public createModel = async (\n    options: IModelInitializationOptions,\n  ): Promise<IModel> => {\n    if (options.uniforms) {\n      await Promise.all(\n        Object.keys(options.uniforms).map(async (name) => {\n          // @ts-ignore\n          if (options.uniforms![name] && options.uniforms![name].load !== undefined) {\n            // @ts-ignore\n            const texture = await options.uniforms![name].load();\n            // @ts-ignore\n            options.uniforms[name] = texture;\n          }\n        }),\n      );\n    }\n    return new ReglModel(this.gl, options);\n  };\n\n  public createAttribute = (\n    options: IAttributeInitializationOptions,\n  ): IAttribute => new ReglAttribute(this.gl, options);\n\n  public createBuffer = (options: IBufferInitializationOptions): IBuffer =>\n    new ReglBuffer(this.gl, options);\n\n  public createElements = (\n    options: IElementsInitializationOptions,\n  ): IElements => new ReglElements(this.gl, options);\n\n  public createTexture2D = (\n    options: ITexture2DInitializationOptions,\n  ): ITexture2D => new ReglTexture2D(this.gl, options);\n\n  public createFramebuffer = (options: IFramebufferInitializationOptions) =>\n    new ReglFramebuffer(this.gl, options);\n\n  public useFramebuffer = (\n    framebuffer: IFramebuffer | null,\n    drawCommands: () => void,\n  ) => {\n    this.gl({\n      framebuffer: framebuffer ? (framebuffer as ReglFramebuffer).get() : null,\n    })(drawCommands);\n  };\n\n  public createComputeModel = async (\n    context: GLSLContext,\n  ): Promise<IComputeModel> => {\n    return new ReglComputeModel(this.gl, context);\n  };\n\n  public clear = (options: IClearOptions) => {\n    // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clear-the-draw-buffer\n    const { color, depth, stencil, framebuffer = null } = options;\n    const reglClearOptions: regl.ClearOptions = {\n      color,\n      depth,\n      stencil,\n    };\n\n    reglClearOptions.framebuffer =\n      framebuffer === null\n        ? framebuffer\n        : (framebuffer as ReglFramebuffer).get();\n\n    this.gl.clear(reglClearOptions);\n  };\n\n  public setScissor = (\n    scissor: Partial<{\n      enable: boolean;\n      box: { x: number; y: number; width: number; height: number };\n    }>,\n  ) => {\n    if (this.gl && this.gl._gl) {\n      // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/scissor\n      if (scissor.enable && scissor.box) {\n        // console.log(scissor.box);\n        this.gl._gl.enable(gl.SCISSOR_TEST);\n        this.gl._gl.scissor(\n          scissor.box.x,\n          scissor.box.y,\n          scissor.box.width,\n          scissor.box.height,\n        );\n      } else {\n        this.gl._gl.disable(gl.SCISSOR_TEST);\n      }\n      this.gl._refresh();\n    }\n  };\n\n  public viewport = ({\n    x,\n    y,\n    width,\n    height,\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }) => {\n    if (this.gl && this.gl._gl) {\n      // use WebGL context directly\n      // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#unsafe-escape-hatch\n      this.gl._gl.viewport(x, y, width, height);\n      this.gl._refresh();\n    }\n  };\n\n  public readPixels = (options: IReadPixelsOptions) => {\n    const { framebuffer, x, y, width, height } = options;\n    const readPixelsOptions: regl.ReadOptions = {\n      x,\n      y,\n      width,\n      height,\n    };\n    if (framebuffer) {\n      readPixelsOptions.framebuffer = (framebuffer as ReglFramebuffer).get();\n    }\n    return this.gl.read(readPixelsOptions);\n  };\n\n  public getCanvas = () => {\n    return this.$canvas;\n  };\n\n  public getGLContext = () => {\n    return this.gl._gl;\n  };\n\n  public destroy = () => {\n    if (this.gl) {\n      // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clean-up\n      this.gl.destroy();\n      this.inited = false;\n    }\n  };\n\n  public beginFrame() {\n    //\n  }\n\n  public endFrame() {\n    //\n  }\n}\n"]},"metadata":{},"sourceType":"module"}