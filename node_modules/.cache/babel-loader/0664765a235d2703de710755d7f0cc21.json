{"ast":null,"code":"var add = require('gl-vec2/add');\n\nvar set = require('gl-vec2/set');\n\nvar normalize = require('gl-vec2/normalize');\n\nvar subtract = require('gl-vec2/subtract');\n\nvar dot = require('gl-vec2/dot');\n\nvar tmp = [0, 0];\n\nmodule.exports.computeMiter = function computeMiter(tangent, miter, lineA, lineB, halfThick) {\n  //get tangent line\n  add(tangent, lineA, lineB);\n  normalize(tangent, tangent); //get miter as a unit vector\n\n  set(miter, -tangent[1], tangent[0]);\n  set(tmp, -lineA[1], lineA[0]); //get the necessary length of our miter\n\n  return halfThick / dot(miter, tmp);\n};\n\nmodule.exports.normal = function normal(out, dir) {\n  //get perpendicular\n  set(out, -dir[1], dir[0]);\n  return out;\n};\n\nmodule.exports.direction = function direction(out, a, b) {\n  //get unit dir of two lines\n  subtract(out, a, b);\n  normalize(out, out);\n  return out;\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/polyline-miter-util/index.js"],"names":["add","require","set","normalize","subtract","dot","tmp","module","exports","computeMiter","tangent","miter","lineA","lineB","halfThick","normal","out","dir","direction","a","b"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,aAAD,CAAjB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,aAAD,CAAjB;;AAEA,IAAIK,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV;;AAEAC,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,KAA7C,EAAoDC,SAApD,EAA+D;AACzF;AACAd,EAAAA,GAAG,CAACU,OAAD,EAAUE,KAAV,EAAiBC,KAAjB,CAAH;AACAV,EAAAA,SAAS,CAACO,OAAD,EAAUA,OAAV,CAAT,CAHyF,CAKzF;;AACAR,EAAAA,GAAG,CAACS,KAAD,EAAQ,CAACD,OAAO,CAAC,CAAD,CAAhB,EAAqBA,OAAO,CAAC,CAAD,CAA5B,CAAH;AACAR,EAAAA,GAAG,CAACI,GAAD,EAAM,CAACM,KAAK,CAAC,CAAD,CAAZ,EAAiBA,KAAK,CAAC,CAAD,CAAtB,CAAH,CAPyF,CASzF;;AACA,SAAOE,SAAS,GAAGT,GAAG,CAACM,KAAD,EAAQL,GAAR,CAAtB;AACH,CAXD;;AAaAC,MAAM,CAACC,OAAP,CAAeO,MAAf,GAAwB,SAASA,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAC9C;AACAf,EAAAA,GAAG,CAACc,GAAD,EAAM,CAACC,GAAG,CAAC,CAAD,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAlB,CAAH;AACA,SAAOD,GAAP;AACH,CAJD;;AAMAT,MAAM,CAACC,OAAP,CAAeU,SAAf,GAA2B,SAASA,SAAT,CAAmBF,GAAnB,EAAwBG,CAAxB,EAA2BC,CAA3B,EAA8B;AACrD;AACAhB,EAAAA,QAAQ,CAACY,GAAD,EAAMG,CAAN,EAASC,CAAT,CAAR;AACAjB,EAAAA,SAAS,CAACa,GAAD,EAAMA,GAAN,CAAT;AACA,SAAOA,GAAP;AACH,CALD","sourcesContent":["var add = require('gl-vec2/add')\nvar set = require('gl-vec2/set')\nvar normalize = require('gl-vec2/normalize')\nvar subtract = require('gl-vec2/subtract')\nvar dot = require('gl-vec2/dot')\n\nvar tmp = [0, 0]\n\nmodule.exports.computeMiter = function computeMiter(tangent, miter, lineA, lineB, halfThick) {\n    //get tangent line\n    add(tangent, lineA, lineB)\n    normalize(tangent, tangent)\n\n    //get miter as a unit vector\n    set(miter, -tangent[1], tangent[0])\n    set(tmp, -lineA[1], lineA[0])\n\n    //get the necessary length of our miter\n    return halfThick / dot(miter, tmp)\n}\n\nmodule.exports.normal = function normal(out, dir) {\n    //get perpendicular\n    set(out, -dir[1], dir[0])\n    return out\n}\n\nmodule.exports.direction = function direction(out, a, b) {\n    //get unit dir of two lines\n    subtract(out, a, b)\n    normalize(out, out)\n    return out\n}"]},"metadata":{},"sourceType":"script"}