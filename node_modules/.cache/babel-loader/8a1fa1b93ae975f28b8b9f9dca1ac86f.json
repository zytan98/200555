{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNumber, filter } from '@antv/util';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\n\nexport function adjustYMetaByZero(data, field) {\n  // 过滤出数字数据\n  var numberData = data.filter(function (datum) {\n    var v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n  var gtZero = numberData.every(function (datum) {\n    return get(datum, [field]) >= 0;\n  });\n  var ltZero = numberData.every(function (datum) {\n    return get(datum, [field]) <= 0;\n  }); // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n\n  if (gtZero) {\n    return {\n      min: 0\n    };\n  }\n\n  if (ltZero) {\n    return {\n      max: 0\n    };\n  }\n\n  return {};\n}\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\n\nexport function transformDataToNodeLinkData(data, sourceField, targetField, weightField, rawFields) {\n  if (rawFields === void 0) {\n    rawFields = [];\n  }\n\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: []\n    };\n  } //   const nodes = [];\n\n\n  var links = []; // 先使用对象方式存储\n\n  var nodesMap = {};\n  var nodesIndex = -1; // 数组变换成 chord layout 的数据结构\n\n  data.forEach(function (datum) {\n    var source = datum[sourceField];\n    var target = datum[targetField];\n    var weight = datum[weightField];\n    var rawData = pick(datum, rawFields); // source node\n\n    if (!nodesMap[source]) {\n      nodesMap[source] = __assign({\n        id: ++nodesIndex,\n        name: source\n      }, rawData);\n    }\n\n    if (!nodesMap[target]) {\n      nodesMap[target] = __assign({\n        id: ++nodesIndex,\n        name: target\n      }, rawData);\n    } // links\n\n\n    links.push(__assign({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight\n    }, rawData));\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort(function (a, b) {\n      return a.id - b.id;\n    }),\n    links: links\n  };\n}\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\n\nexport function processIllegalData(data, field) {\n  var processData = filter(data, function (d) {\n    var v = d[field];\n    return v === null || typeof v === 'number' && !isNaN(v);\n  }); // 打印异常数据情况\n\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n  return processData;\n}","map":{"version":3,"sources":["../../src/utils/data.ts"],"names":[],"mappings":"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","sourcesContent":["import { get, isNumber, filter } from '@antv/util';\nimport { Data, Datum, Meta, Options } from '../types';\nimport { Node, NodeLinkData } from '../types/relation-data';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data: Data, field: string): Meta {\n  // 过滤出数字数据\n  const numberData = data.filter((datum: Datum) => {\n    const v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n\n  const gtZero = numberData.every((datum: Datum) => get(datum, [field]) >= 0);\n  const ltZero = numberData.every((datum: Datum) => get(datum, [field]) <= 0);\n\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return { min: 0 };\n  }\n  if (ltZero) {\n    return { max: 0 };\n  }\n  return {};\n}\n\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(\n  data: Data,\n  sourceField: string,\n  targetField: string,\n  weightField: string,\n  rawFields: string[] = []\n): NodeLinkData {\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: [],\n    };\n  }\n\n  //   const nodes = [];\n  const links = [];\n  // 先使用对象方式存储\n  const nodesMap: Record<string, Node> = {};\n  let nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach((datum: Datum) => {\n    const source = datum[sourceField];\n    const target = datum[targetField];\n    const weight = datum[weightField];\n\n    const rawData = pick(datum, rawFields);\n\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = {\n        id: ++nodesIndex,\n        name: source,\n        ...rawData,\n      };\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = {\n        id: ++nodesIndex,\n        name: target,\n        ...rawData,\n      };\n    }\n    // links\n    links.push({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight,\n      ...rawData,\n    });\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort((a, b) => a.id - b.id),\n    links,\n  };\n}\n\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data: Options['data'], field: string) {\n  const processData = filter(data, (d) => {\n    const v = d[field];\n    return v === null || (typeof v === 'number' && !isNaN(v));\n  });\n\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n\n  return processData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}