{"ast":null,"code":"// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport 'reflect-metadata';\nimport { Component, ComponentManager } from './ComponentManager';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System';\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { createEntity } from './Entity';\nimport { IDENTIFIER } from './identifier';\nimport { container, createWorldContainer, lazyInject, lazyMultiInject } from './inversify.config';\nimport { generateAABBFromVertices } from './utils/aabb';\nimport { isSafari } from './utils/isSafari';\n/**\n * inspired by Entitas' Systems\n * @see https://github.com/sschmid/Entitas-CSharp/wiki/Systems\n */\n\nvar AST_TOKEN_TYPES;\n\n(function (AST_TOKEN_TYPES) {\n  AST_TOKEN_TYPES[\"Void\"] = \"Void\";\n  AST_TOKEN_TYPES[\"Boolean\"] = \"Boolean\";\n  AST_TOKEN_TYPES[\"Float\"] = \"Float\";\n  AST_TOKEN_TYPES[\"Uint32\"] = \"Uint32\";\n  AST_TOKEN_TYPES[\"Int32\"] = \"Int32\";\n  AST_TOKEN_TYPES[\"Vector\"] = \"Vector\";\n  AST_TOKEN_TYPES[\"Vector2Float\"] = \"vec2<f32>\";\n  AST_TOKEN_TYPES[\"Vector3Float\"] = \"vec3<f32>\";\n  AST_TOKEN_TYPES[\"Vector4Float\"] = \"vec4<f32>\";\n  AST_TOKEN_TYPES[\"Vector2Boolean\"] = \"vec2<bool>\";\n  AST_TOKEN_TYPES[\"Vector3Boolean\"] = \"vec3<bool>\";\n  AST_TOKEN_TYPES[\"Vector4Boolean\"] = \"vec4<bool>\";\n  AST_TOKEN_TYPES[\"Vector2Uint\"] = \"vec2<u32>\";\n  AST_TOKEN_TYPES[\"Vector3Uint\"] = \"vec3<u32>\";\n  AST_TOKEN_TYPES[\"Vector4Uint\"] = \"vec4<u32>\";\n  AST_TOKEN_TYPES[\"Vector2Int\"] = \"vec2<i32>\";\n  AST_TOKEN_TYPES[\"Vector3Int\"] = \"vec3<i32>\";\n  AST_TOKEN_TYPES[\"Vector4Int\"] = \"vec4<i32>\";\n  AST_TOKEN_TYPES[\"Matrix\"] = \"Matrix\";\n  AST_TOKEN_TYPES[\"Matrix3x3Float\"] = \"mat3x3<f32>\";\n  AST_TOKEN_TYPES[\"Matrix4x4Float\"] = \"mat4x4<i32>\";\n  AST_TOKEN_TYPES[\"Struct\"] = \"Struct\";\n  AST_TOKEN_TYPES[\"FloatArray\"] = \"Float[]\";\n  AST_TOKEN_TYPES[\"Vector4FloatArray\"] = \"vec4<f32>[]\";\n})(AST_TOKEN_TYPES || (AST_TOKEN_TYPES = {}));\n\nvar AST_NODE_TYPES;\n\n(function (AST_NODE_TYPES) {\n  AST_NODE_TYPES[\"Program\"] = \"Program\";\n  AST_NODE_TYPES[\"Identifier\"] = \"Identifier\";\n  AST_NODE_TYPES[\"VariableDeclaration\"] = \"VariableDeclaration\";\n  AST_NODE_TYPES[\"BlockStatement\"] = \"BlockStatement\";\n  AST_NODE_TYPES[\"ReturnStatement\"] = \"ReturnStatement\";\n  AST_NODE_TYPES[\"FunctionDeclaration\"] = \"FunctionDeclaration\";\n  AST_NODE_TYPES[\"VariableDeclarator\"] = \"VariableDeclarator\";\n  AST_NODE_TYPES[\"AssignmentExpression\"] = \"AssignmentExpression\";\n  AST_NODE_TYPES[\"LogicalExpression\"] = \"LogicalExpression\";\n  AST_NODE_TYPES[\"BinaryExpression\"] = \"BinaryExpression\";\n  AST_NODE_TYPES[\"ArrayExpression\"] = \"ArrayExpression\";\n  AST_NODE_TYPES[\"UnaryExpression\"] = \"UnaryExpression\";\n  AST_NODE_TYPES[\"UpdateExpression\"] = \"UpdateExpression\";\n  AST_NODE_TYPES[\"FunctionExpression\"] = \"FunctionExpression\";\n  AST_NODE_TYPES[\"MemberExpression\"] = \"MemberExpression\";\n  AST_NODE_TYPES[\"ConditionalExpression\"] = \"ConditionalExpression\";\n  AST_NODE_TYPES[\"ExpressionStatement\"] = \"ExpressionStatement\";\n  AST_NODE_TYPES[\"CallExpression\"] = \"CallExpression\";\n  AST_NODE_TYPES[\"NumThreadStatement\"] = \"NumThreadStatement\";\n  AST_NODE_TYPES[\"StorageStatement\"] = \"StorageStatement\";\n  AST_NODE_TYPES[\"DoWhileStatement\"] = \"DoWhileStatement\";\n  AST_NODE_TYPES[\"WhileStatement\"] = \"WhileStatement\";\n  AST_NODE_TYPES[\"ForStatement\"] = \"ForStatement\";\n  AST_NODE_TYPES[\"BreakStatement\"] = \"BreakStatement\";\n  AST_NODE_TYPES[\"ContinueStatement\"] = \"ContinueStatement\";\n  AST_NODE_TYPES[\"IfStatement\"] = \"IfStatement\";\n  AST_NODE_TYPES[\"ImportedFunctionStatement\"] = \"ImportedFunctionStatement\";\n})(AST_NODE_TYPES || (AST_NODE_TYPES = {}));\n\nvar STORAGE_CLASS;\n\n(function (STORAGE_CLASS) {\n  STORAGE_CLASS[\"Input\"] = \"Input\";\n  STORAGE_CLASS[\"Output\"] = \"Output\";\n  STORAGE_CLASS[\"Uniform\"] = \"Uniform\";\n  STORAGE_CLASS[\"Workgroup\"] = \"Workgroup\";\n  STORAGE_CLASS[\"UniformConstant\"] = \"UniformConstant\";\n  STORAGE_CLASS[\"Image\"] = \"Image\";\n  STORAGE_CLASS[\"StorageBuffer\"] = \"StorageBuffer\";\n  STORAGE_CLASS[\"Private\"] = \"Private\";\n  STORAGE_CLASS[\"Function\"] = \"Function\";\n})(STORAGE_CLASS || (STORAGE_CLASS = {}));\n/**\n * 根据目标平台生成 Shader 代码\n * * WebGL GLSL 1.0\n * * WebGPU Chrome/Edge GLSL 4.5 & WGSL @see https://gpuweb.github.io/gpuweb/wgsl.html\n * * Safari WHLSL (maybe deprecated)\n */\n\n\nvar Target;\n\n(function (Target) {\n  Target[\"GLSL100\"] = \"GLSL100\";\n  Target[\"GLSL450\"] = \"GLSL450\";\n  Target[\"WGSL\"] = \"WGSL\";\n})(Target || (Target = {}));\n\nvar DefineValuePlaceholder = '__DefineValuePlaceholder__';\nexport * from './ComponentManager';\nexport * from './services';\nexport * from './shape';\nexport * from './components/renderer';\nexport * from './components/material/interface';\nexport * from './components/mesh/interface';\nexport * from './components/renderer';\nexport { container, createWorldContainer, lazyInject, lazyMultiInject, createEntity, Component, ComponentManager, IDENTIFIER, FrameGraphSystem, GeometrySystem, RendererSystem // InteractionSystem,\n, MaterialSystem, MeshSystem, SceneGraphSystem, CullableComponent, MeshComponent, TransformComponent, MaterialComponent, GeometryComponent, HierarchyComponent, isSafari, generateAABBFromVertices, PixelPickingPass, AST_TOKEN_TYPES, AST_NODE_TYPES, STORAGE_CLASS, Target, DefineValuePlaceholder };","map":{"version":3,"sources":["../src/index.ts"],"names":["AST_TOKEN_TYPES","AST_NODE_TYPES","STORAGE_CLASS","Target","DefineValuePlaceholder"],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport 'reflect-metadata';\nimport { Component, ComponentManager } from './ComponentManager';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System';\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { IView } from './components/renderer';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { createEntity } from './Entity';\nimport { IDENTIFIER } from './identifier';\nimport {\n  container,\n  createWorldContainer,\n  lazyInject,\n  lazyMultiInject,\n} from './inversify.config';\nimport { generateAABBFromVertices } from './utils/aabb';\nimport { isSafari } from './utils/isSafari';\n\n/**\n * inspired by Entitas' Systems\n * @see https://github.com/sschmid/Entitas-CSharp/wiki/Systems\n */\nexport interface ISystem {\n  /**\n   * in a similar way to Unity's `Start()`, we can do some initialization works:\n   * * create global entities\n   * * init event listeners\n   */\n  initialize?(): Promise<void>;\n\n  /**\n   * in a similar way to Unity's `Update()`, run once per frame\n   */\n  execute?(views: IView[]): Promise<void>;\n\n  /**\n   * run at the end of each frame\n   */\n  cleanup?(): void;\n\n  /**\n   * run once at the end of your program\n   */\n  tearDown?(): void;\n}\n\ntype Entity = number;\n\nenum AST_TOKEN_TYPES {\n  Void = 'Void',\n  Boolean = 'Boolean',\n  Float = 'Float',\n  Uint32 = 'Uint32',\n  Int32 = 'Int32',\n  Vector = 'Vector',\n  Vector2Float = 'vec2<f32>',\n  Vector3Float = 'vec3<f32>',\n  Vector4Float = 'vec4<f32>',\n  Vector2Boolean = 'vec2<bool>',\n  Vector3Boolean = 'vec3<bool>',\n  Vector4Boolean = 'vec4<bool>',\n  Vector2Uint = 'vec2<u32>',\n  Vector3Uint = 'vec3<u32>',\n  Vector4Uint = 'vec4<u32>',\n  Vector2Int = 'vec2<i32>',\n  Vector3Int = 'vec3<i32>',\n  Vector4Int = 'vec4<i32>',\n  Matrix = 'Matrix',\n  Matrix3x3Float = 'mat3x3<f32>',\n  Matrix4x4Float = 'mat4x4<i32>',\n  Struct = 'Struct',\n  FloatArray = 'Float[]',\n  Vector4FloatArray = 'vec4<f32>[]',\n}\n\nenum AST_NODE_TYPES {\n  Program = 'Program',\n  Identifier = 'Identifier',\n  VariableDeclaration = 'VariableDeclaration',\n  BlockStatement = 'BlockStatement',\n  ReturnStatement = 'ReturnStatement',\n  FunctionDeclaration = 'FunctionDeclaration',\n  VariableDeclarator = 'VariableDeclarator',\n  AssignmentExpression = 'AssignmentExpression',\n  LogicalExpression = 'LogicalExpression',\n  BinaryExpression = 'BinaryExpression',\n  ArrayExpression = 'ArrayExpression',\n  UnaryExpression = 'UnaryExpression',\n  UpdateExpression = 'UpdateExpression',\n  FunctionExpression = 'FunctionExpression',\n  MemberExpression = 'MemberExpression',\n  ConditionalExpression = 'ConditionalExpression',\n  ExpressionStatement = 'ExpressionStatement',\n  CallExpression = 'CallExpression',\n  NumThreadStatement = 'NumThreadStatement',\n  StorageStatement = 'StorageStatement',\n  DoWhileStatement = 'DoWhileStatement',\n  WhileStatement = 'WhileStatement',\n  ForStatement = 'ForStatement',\n  BreakStatement = 'BreakStatement',\n  ContinueStatement = 'ContinueStatement',\n  IfStatement = 'IfStatement',\n  ImportedFunctionStatement = 'ImportedFunctionStatement',\n}\n\nenum STORAGE_CLASS {\n  Input = 'Input',\n  Output = 'Output',\n  Uniform = 'Uniform',\n  Workgroup = 'Workgroup',\n  UniformConstant = 'UniformConstant',\n  Image = 'Image',\n  StorageBuffer = 'StorageBuffer',\n  Private = 'Private',\n  Function = 'Function',\n}\n\ntype TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Uint8ClampedArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor;\n\ntype DataType =\n  | AST_TOKEN_TYPES.Uint32\n  | AST_TOKEN_TYPES.Int32\n  | AST_TOKEN_TYPES.Boolean\n  | AST_TOKEN_TYPES.Float\n  | AST_TOKEN_TYPES.Vector2Float\n  | AST_TOKEN_TYPES.Vector3Float\n  | AST_TOKEN_TYPES.Vector4Float\n  | AST_TOKEN_TYPES.Vector2Int\n  | AST_TOKEN_TYPES.Vector3Int\n  | AST_TOKEN_TYPES.Vector4Int\n  | AST_TOKEN_TYPES.Vector2Uint\n  | AST_TOKEN_TYPES.Vector3Uint\n  | AST_TOKEN_TYPES.Vector4Uint\n  | AST_TOKEN_TYPES.Vector2Boolean\n  | AST_TOKEN_TYPES.Vector3Boolean\n  | AST_TOKEN_TYPES.Vector4Boolean\n  | AST_TOKEN_TYPES.Matrix3x3Float\n  | AST_TOKEN_TYPES.Matrix4x4Float\n  | AST_TOKEN_TYPES.FloatArray\n  | AST_TOKEN_TYPES.Vector4FloatArray\n  | AST_TOKEN_TYPES.Void;\n\ninterface GLSLContext {\n  /**\n   * 程序名\n   */\n  name: string;\n\n  shader?: string;\n  /**\n   * size of thread grid\n   * 即 WebGL 2 Compute 中的 dispatchCompute\n   * 或者 WebGPU 中的 dispatch\n   */\n  dispatch: [number, number, number];\n  /**\n   * size of each thread group\n   * Compute Shader 中的 local_size_x/y/z\n   */\n  threadGroupSize: [number, number, number];\n  /**\n   * 迭代次数，例如布局运算中需要迭代很多次才能到达稳定\n   */\n  maxIteration: number;\n  /**\n   * 是否需要 pingpong，如果存在输入和输出为同一个的情况\n   */\n  needPingpong: boolean;\n  /**\n   * 目前仅支持单一输出，受限于 WebGL 实现\n   */\n  output: {\n    name: string;\n    size?: [number, number];\n    textureSize?: [number, number];\n    length?: number;\n    typedArrayConstructor?: TypedArrayConstructor;\n    gpuBuffer?: GPUBuffer;\n    outputElementsPerTexel?: number;\n  };\n  /**\n   * 常量，可分成编译时和运行时两类：\n   * 1. 编译时即可确定值\n   * 2. 运行时：例如循环长度需要为常量，但在编译时又无法确定\n   * TODO 支持定义函数，例如 tensorflow 中的 DIV_CEIL\n   */\n  defines: Array<{\n    name: string;\n    type: DataType;\n    value: number;\n    runtime: boolean; // 是否是运行时生成\n  }>;\n  globalDeclarations: Array<{\n    name: string;\n    type: DataType;\n    value: string;\n    shared: boolean;\n  }>;\n  uniforms: Array<{\n    name: string;\n    type: DataType;\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array;\n    size?: [number, number];\n    storageClass: STORAGE_CLASS;\n    readonly: boolean;\n    writeonly: boolean;\n    isReferer?: boolean;\n  }>;\n}\n\n/**\n * 根据目标平台生成 Shader 代码\n * * WebGL GLSL 1.0\n * * WebGPU Chrome/Edge GLSL 4.5 & WGSL @see https://gpuweb.github.io/gpuweb/wgsl.html\n * * Safari WHLSL (maybe deprecated)\n */\nenum Target {\n  GLSL100 = 'GLSL100',\n  GLSL450 = 'GLSL450',\n  WGSL = 'WGSL',\n}\n\nconst DefineValuePlaceholder = '__DefineValuePlaceholder__';\n\ninterface KernelBundle {\n  shaders: {\n    [Target.WGSL]: string;\n    [Target.GLSL450]: string;\n    [Target.GLSL100]: string;\n  };\n  context?: GLSLContext;\n  toString(): string;\n}\n\nexport * from './ComponentManager';\nexport * from './services';\nexport * from './shape';\nexport * from './components/renderer';\nexport * from './components/material/interface';\nexport * from './components/mesh/interface';\nexport * from './components/renderer';\n\nexport {\n  container,\n  createWorldContainer,\n  lazyInject,\n  lazyMultiInject,\n  createEntity,\n  Component,\n  ComponentManager,\n  Entity,\n  IDENTIFIER,\n  FrameGraphSystem,\n  GeometrySystem,\n  RendererSystem,\n  // InteractionSystem,\n  MaterialSystem,\n  MeshSystem,\n  SceneGraphSystem,\n  CullableComponent,\n  MeshComponent,\n  TransformComponent,\n  MaterialComponent,\n  GeometryComponent,\n  HierarchyComponent,\n  isSafari,\n  generateAABBFromVertices,\n  PixelPickingPass,\n  AST_TOKEN_TYPES,\n  AST_NODE_TYPES,\n  STORAGE_CLASS,\n  Target,\n  DefineValuePlaceholder,\n  GLSLContext,\n  DataType,\n  KernelBundle,\n};\n"]},"metadata":{},"sourceType":"module"}