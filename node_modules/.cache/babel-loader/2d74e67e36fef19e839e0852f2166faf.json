{"ast":null,"code":"import { __assign, __extends, __spreadArray } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport { ext } from '@antv/matrix-util';\nimport { clone, deepMix, each, isPlainObject, isString } from '@antv/util';\nimport { getDegree, getAdjMatrix as getAdjacentMatrix, Stack, floydWarshall } from '@antv/algorithm';\nimport { move } from '../util/math';\nimport Global from '../global';\nimport { ItemController, ModeController, StateController, ViewController } from './controller';\nimport { plainCombosToTrees, traverseTree, reconstructTree, traverseTreeUp } from '../util/graphic';\nimport Hull from '../item/hull';\nvar transform = ext.transform;\nvar NODE = 'node';\n\nvar AbstractGraph =\n/** @class */\nfunction (_super) {\n  __extends(AbstractGraph, _super);\n\n  function AbstractGraph(cfg) {\n    var _this = _super.call(this) || this;\n\n    _this.cfg = deepMix(_this.getDefaultCfg(), cfg);\n\n    _this.init();\n\n    _this.animating = false;\n    _this.destroyed = false; // 启用 stack 后，实例化 undoStack 和 redoStack\n\n    if (_this.cfg.enabledStack) {\n      // 实例化 undo 和 redo 栈\n      _this.undoStack = new Stack(_this.cfg.maxStep);\n      _this.redoStack = new Stack(_this.cfg.maxStep);\n    }\n\n    return _this;\n  }\n\n  AbstractGraph.prototype.init = function () {\n    this.initCanvas(); // instance controller\n\n    var viewController = new ViewController(this);\n    var modeController = new ModeController(this);\n    var itemController = new ItemController(this);\n    var stateController = new StateController(this);\n    this.set({\n      viewController: viewController,\n      modeController: modeController,\n      itemController: itemController,\n      stateController: stateController\n    }); // 初始化布局机制\n\n    this.initLayoutController(); // 初始化事件机制\n\n    this.initEventController();\n    this.initGroups();\n    /** 初始化插件 */\n\n    this.initPlugins();\n  }; // 初始化所有 Group\n\n\n  AbstractGraph.prototype.initGroups = function () {\n    var canvas = this.get('canvas');\n    var el = this.get('canvas').get('el');\n    var id = el.id;\n    var group = canvas.addGroup({\n      id: id + \"-root\",\n      className: Global.rootContainerClassName\n    });\n\n    if (this.get('groupByTypes')) {\n      var edgeGroup = group.addGroup({\n        id: id + \"-edge\",\n        className: Global.edgeContainerClassName\n      });\n      var nodeGroup = group.addGroup({\n        id: id + \"-node\",\n        className: Global.nodeContainerClassName\n      });\n      var comboGroup = group.addGroup({\n        id: id + \"-combo\",\n        className: Global.comboContainerClassName\n      }); // 用于存储自定义的群组\n\n      comboGroup.toBack();\n      this.set({\n        nodeGroup: nodeGroup,\n        edgeGroup: edgeGroup,\n        comboGroup: comboGroup\n      });\n    }\n\n    var delegateGroup = group.addGroup({\n      id: id + \"-delegate\",\n      className: Global.delegateContainerClassName\n    });\n    this.set({\n      delegateGroup: delegateGroup\n    });\n    this.set('group', group);\n  }; // eslint-disable-next-line class-methods-use-this\n\n\n  AbstractGraph.prototype.getDefaultCfg = function () {\n    return {\n      /**\n       * Container could be dom object or dom id\n       */\n      container: undefined,\n\n      /**\n       * Canvas width\n       * unit pixel if undefined force fit width\n       */\n      width: undefined,\n\n      /**\n       * Canvas height\n       * unit pixel if undefined force fit height\n       */\n      height: undefined,\n\n      /**\n       * renderer canvas or svg\n       * @type {string}\n       */\n      renderer: 'canvas',\n\n      /**\n       * control graph behaviors\n       */\n      modes: {},\n\n      /**\n       * 注册插件\n       */\n      plugins: [],\n\n      /**\n       * source data\n       */\n      data: {},\n\n      /**\n       * Fit view padding (client scale)\n       */\n      fitViewPadding: 10,\n\n      /**\n       * Minimum scale size\n       */\n      minZoom: 0.2,\n\n      /**\n       * Maxmum scale size\n       */\n      maxZoom: 10,\n\n      /**\n       *  capture events\n       */\n      event: true,\n\n      /**\n       * group node & edges into different graphic groups\n       */\n      groupByTypes: true,\n\n      /**\n       * determine if it's a directed graph\n       */\n      directed: false,\n\n      /**\n       * when data or shape changed, should canvas draw automatically\n       */\n      autoPaint: true,\n\n      /**\n       * store all the node instances\n       */\n      nodes: [],\n\n      /**\n       * store all the edge instances\n       */\n      edges: [],\n\n      /**\n       * store all the combo instances\n       */\n      combos: [],\n\n      /**\n       * store all the edge instances which are virtual edges related to collapsed combo\n       */\n      vedges: [],\n\n      /**\n       * all the instances indexed by id\n       */\n      itemMap: {},\n\n      /**\n       * 边直接连接到节点的中心，不再考虑锚点\n       */\n      linkCenter: false,\n\n      /**\n       * 默认的节点配置，data 上定义的配置会覆盖这些配置。例如：\n       * defaultNode: {\n       *  type: 'rect',\n       *  size: [60, 40],\n       *  style: {\n       *    //... 样式配置项\n       *  }\n       * }\n       * 若数据项为 { id: 'node', x: 100, y: 100 }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'rect', size: [60, 40] }\n       * 若数据项为 { id: 'node', x: 100, y: 100, type: 'circle' }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'circle', size: [60, 40] }\n       */\n      defaultNode: {},\n\n      /**\n       * 默认边配置，data 上定义的配置会覆盖这些配置。用法同 defaultNode\n       */\n      defaultEdge: {},\n\n      /**\n       * 节点默认样式，也可以添加状态样式\n       * 例如：\n       * const graph = new G6.Graph({\n       *  nodeStateStyles: {\n       *    selected: { fill: '#ccc', stroke: '#666' },\n       *    active: { lineWidth: 2 }\n       *  },\n       *  ...\n       * });\n       *\n       */\n      nodeStateStyles: {},\n\n      /**\n       * 边默认样式，用法同nodeStateStyle\n       */\n      edgeStateStyles: {},\n\n      /**\n       * graph 状态\n       */\n      states: {},\n\n      /**\n       * 是否启用全局动画\n       */\n      animate: false,\n\n      /**\n       * 动画设置,仅在 animate 为 true 时有效\n       */\n      animateCfg: {\n        /**\n         * 帧回调函数，用于自定义节点运动路径，为空时线性运动\n         */\n        onFrame: undefined,\n\n        /**\n         * 动画时长(ms)\n         */\n        duration: 500,\n\n        /**\n         * 指定动画动效\n         */\n        easing: 'easeLinear'\n      },\n      callback: undefined,\n      // 默认不启用 undo & redo 功能\n      enabledStack: false,\n      // 只有当 enabledStack 为 true 时才起作用\n      maxStep: 10,\n      // 存储图上的 tooltip dom，方便销毁\n      tooltips: []\n    };\n  };\n  /**\n   * 将值设置到 this.cfg 变量上面\n   * @param key 键 或 对象值\n   * @param val 值\n   */\n\n\n  AbstractGraph.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this.cfg = __assign(__assign({}, this.cfg), key);\n    } else {\n      this.cfg[key] = val;\n    }\n\n    return this;\n  };\n  /**\n   * 获取 this.cfg 中的值\n   * @param key 键\n   */\n\n\n  AbstractGraph.prototype.get = function (key) {\n    return this.cfg[key];\n  };\n  /**\n   * 获取 graph 的根图形分组\n   * @return 根 group\n   */\n\n\n  AbstractGraph.prototype.getGroup = function () {\n    return this.get('group');\n  };\n  /**\n   * 获取 graph 的 DOM 容器\n   * @return DOM 容器\n   */\n\n\n  AbstractGraph.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 获取 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  AbstractGraph.prototype.getMinZoom = function () {\n    return this.get('minZoom');\n  };\n  /**\n   * 设置 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  AbstractGraph.prototype.setMinZoom = function (ratio) {\n    return this.set('minZoom', ratio);\n  };\n  /**\n   * 获取 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  AbstractGraph.prototype.getMaxZoom = function () {\n    return this.get('maxZoom');\n  };\n  /**\n   * 设置 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  AbstractGraph.prototype.setMaxZoom = function (ratio) {\n    return this.set('maxZoom', ratio);\n  };\n  /**\n   * 获取 graph 的宽度\n   * @return width\n   */\n\n\n  AbstractGraph.prototype.getWidth = function () {\n    return this.get('width');\n  };\n  /**\n   * 获取 graph 的高度\n   * @return width\n   */\n\n\n  AbstractGraph.prototype.getHeight = function () {\n    return this.get('height');\n  };\n  /**\n   * 清理元素多个状态\n   * @param {string|Item} item 元素id或元素实例\n   * @param {string[]} states 状态\n   */\n\n\n  AbstractGraph.prototype.clearItemStates = function (item, states) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n\n    if (!states) {\n      states = item.get('states');\n    }\n\n    itemController.clearItemStates(item, states);\n    var stateController = this.get('stateController');\n    stateController.updateStates(item, states, false);\n  };\n  /**\n   * 设置各个节点样式，以及在各种状态下节点 keyShape 的样式。\n   * 若是自定义节点切在各种状态下\n   * graph.node(node => {\n   *  return {\n   *    type: 'rect',\n   *    label: node.id,\n   *    style: { fill: '#666' },\n   *    stateStyles: {\n   *       selected: { fill: 'blue' },\n   *       custom: { fill: 'green' }\n   *     }\n   *   }\n   * });\n   * @param {function} nodeFn 指定每个节点样式\n   */\n\n\n  AbstractGraph.prototype.node = function (nodeFn) {\n    if (typeof nodeFn === 'function') {\n      this.set('nodeMapper', nodeFn);\n    }\n  };\n  /**\n   * 设置各个边样式\n   * @param {function} edgeFn 指定每个边的样式,用法同 node\n   */\n\n\n  AbstractGraph.prototype.edge = function (edgeFn) {\n    if (typeof edgeFn === 'function') {\n      this.set('edgeMapper', edgeFn);\n    }\n  };\n  /**\n   * 设置各个 combo 的配置\n   * @param comboFn\n   */\n\n\n  AbstractGraph.prototype.combo = function (comboFn) {\n    if (typeof comboFn === 'function') {\n      this.set('comboMapper', comboFn);\n    }\n  };\n  /**\n   * 根据 ID 查询图元素实例\n   * @param id 图元素 ID\n   */\n\n\n  AbstractGraph.prototype.findById = function (id) {\n    return this.get('itemMap')[id];\n  };\n  /**\n   * 根据对应规则查找单个元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {(item: T, index: number) => T} fn 指定规则\n   * @return {T} 元素实例\n   */\n\n\n  AbstractGraph.prototype.find = function (type, fn) {\n    var result;\n    var items = this.get(type + \"s\"); // eslint-disable-next-line consistent-return\n\n    each(items, function (item, i) {\n      if (fn(item, i)) {\n        result = item;\n        return result;\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有满足规则的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} fn 指定规则\n   * @return {array} 元素实例\n   */\n\n\n  AbstractGraph.prototype.findAll = function (type, fn) {\n    var result = [];\n    each(this.get(type + \"s\"), function (item, i) {\n      if (fn(item, i)) {\n        result.push(item);\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有处于指定状态的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} state 状态\n   * @return {object} 元素实例\n   */\n\n\n  AbstractGraph.prototype.findAllByState = function (type, state) {\n    return this.findAll(type, function (item) {\n      return item.hasState(state);\n    });\n  };\n  /**\n   * 平移画布\n   * @param dx 水平方向位移\n   * @param dy 垂直方向位移\n   */\n\n\n  AbstractGraph.prototype.translate = function (dx, dy) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    matrix = transform(matrix, [['t', dx, dy]]);\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'translate',\n      matrix: group.getMatrix()\n    });\n    this.autoPaint();\n  };\n  /**\n   * 平移画布到某点\n   * @param {number} x 水平坐标\n   * @param {number} y 垂直坐标\n   */\n\n\n  AbstractGraph.prototype.moveTo = function (x, y) {\n    var group = this.get('group');\n    move(group, {\n      x: x,\n      y: y\n    });\n    this.emit('viewportchange', {\n      action: 'move',\n      matrix: group.getMatrix()\n    });\n  };\n  /**\n   * 调整视口适应视图\n   * @param {object} padding 四周围边距\n   */\n\n\n  AbstractGraph.prototype.fitView = function (padding) {\n    if (padding) {\n      this.set('fitViewPadding', padding);\n    }\n\n    var viewController = this.get('viewController');\n    viewController.fitView();\n    this.autoPaint();\n  };\n  /**\n   * 调整视口适应视图，不缩放，仅将图 bbox 中心对齐到画布中心\n   */\n\n\n  AbstractGraph.prototype.fitCenter = function () {\n    var viewController = this.get('viewController');\n    viewController.fitCenter();\n    this.autoPaint();\n  };\n  /**\n   * 新增行为\n   * @param {string | ModeOption | ModeType[]} behaviors 添加的行为\n   * @param {string | string[]} modes 添加到对应的模式\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.addBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, true);\n    return this;\n  };\n  /**\n   * 移除行为\n   * @param {string | ModeOption | ModeType[]} behaviors 移除的行为\n   * @param {string | string[]} modes 从指定的模式中移除\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.removeBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, false);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    var modeController = this.get('modeController');\n    modeController.updateBehavior(behavior, newCfg, mode);\n    return this;\n  };\n  /**\n   * 伸缩窗口\n   * @param ratio 伸缩比例\n   * @param center 以center的x, y坐标为中心缩放\n   */\n\n\n  AbstractGraph.prototype.zoom = function (ratio, center) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n    var minZoom = this.get('minZoom');\n    var maxZoom = this.get('maxZoom');\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (center) {\n      matrix = transform(matrix, [['t', -center.x, -center.y], ['s', ratio, ratio], ['t', center.x, center.y]]);\n    } else {\n      matrix = transform(matrix, [['s', ratio, ratio]]);\n    }\n\n    if (minZoom && matrix[0] < minZoom || maxZoom && matrix[0] > maxZoom) {\n      return;\n    } // matrix = [2, 0, 0, 0, 2, 0, -125, -125, 1];\n\n\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'zoom',\n      matrix: matrix\n    });\n    this.autoPaint();\n  };\n  /**\n   * 伸缩视口到一固定比例\n   * @param {number} toRatio 伸缩比例\n   * @param {Point} center 以center的x, y坐标为中心缩放\n   */\n\n\n  AbstractGraph.prototype.zoomTo = function (toRatio, center) {\n    var ratio = toRatio / this.getZoom();\n    this.zoom(ratio, center);\n  };\n  /**\n   * 将元素移动到视口中心\n   * @param {Item} item 指定元素\n   * @param {boolean} animate 是否带有动画地移动\n   * @param {GraphAnimateConfig} animateCfg 若带有动画，动画的配置项\n   */\n\n\n  AbstractGraph.prototype.focusItem = function (item, animate, animateCfg) {\n    var viewController = this.get('viewController');\n    var isAnimate = false;\n    if (animate) isAnimate = true;else if (animate === undefined) isAnimate = this.get('animate');\n    var curAniamteCfg = {};\n    if (animateCfg) curAniamteCfg = animateCfg;else if (animateCfg === undefined) curAniamteCfg = this.get('animateCfg');\n    viewController.focus(item, isAnimate, curAniamteCfg);\n    this.autoPaint();\n  };\n  /**\n   * 自动重绘\n   * @internal 仅供内部更新机制调用，外部根据需求调用 render 或 paint 接口\n   */\n\n\n  AbstractGraph.prototype.autoPaint = function () {\n    if (this.get('autoPaint')) {\n      this.paint();\n    }\n  };\n  /**\n   * 仅画布重新绘制\n   */\n\n\n  AbstractGraph.prototype.paint = function () {\n    this.emit('beforepaint');\n    this.get('canvas').draw();\n    this.emit('afterpaint');\n  };\n  /**\n   * 将屏幕坐标转换为视口坐标\n   * @param {number} clientX 屏幕x坐标\n   * @param {number} clientY 屏幕y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  AbstractGraph.prototype.getPointByClient = function (clientX, clientY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByClient(clientX, clientY);\n  };\n  /**\n   * 将绘制坐标转换为屏幕坐标\n   * @param {number} x 绘制坐标 x\n   * @param {number} y 绘制坐标 y\n   * @return {Point} 绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getClientByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getClientByPoint(x, y);\n  };\n  /**\n   * 将画布坐标转换为绘制坐标\n   * @param {number} canvasX 画布 x 坐标\n   * @param {number} canvasY 画布 y 坐标\n   * @return {object} 绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getPointByCanvas = function (canvasX, canvasY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByCanvas(canvasX, canvasY);\n  };\n  /**\n   * 将绘制坐标转换为画布坐标\n   * @param {number} x 绘制坐标 x\n   * @param {number} y 绘制坐标 y\n   * @return {object} 画布坐标\n   */\n\n\n  AbstractGraph.prototype.getCanvasByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getCanvasByPoint(x, y);\n  };\n  /**\n   * 获取图内容的中心绘制坐标\n   * @return {object} 中心绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getGraphCenterPoint = function () {\n    var bbox = this.get('group').getCanvasBBox();\n    return {\n      x: (bbox.minX + bbox.maxX) / 2,\n      y: (bbox.minY + bbox.maxY) / 2\n    };\n  };\n  /**\n   * 获取视口中心绘制坐标\n   * @return {object} 视口中心绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getViewPortCenterPoint = function () {\n    return this.getPointByCanvas(this.get('width') / 2, this.get('height') / 2);\n  };\n  /**\n   * 显示元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.showItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, true);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.nodes = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.edges = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.combos = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 隐藏元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.hideItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, false);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.nodes = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.edges = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.combos = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 刷新元素\n   * @param {string|object} item 元素id或元素实例\n   */\n\n\n  AbstractGraph.prototype.refreshItem = function (item) {\n    var itemController = this.get('itemController');\n    itemController.refreshItem(item);\n  };\n  /**\n   * 设置是否在更新/刷新后自动重绘\n   * @param {boolean} auto 自动重绘\n   */\n\n\n  AbstractGraph.prototype.setAutoPaint = function (auto) {\n    var self = this;\n    self.set('autoPaint', auto);\n    var canvas = self.get('canvas');\n    canvas.set('autoDraw', auto);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.remove = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.removeItem(item, stack);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.removeItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var nodeItem = item;\n    if (isString(item)) nodeItem = this.findById(item);\n\n    if (!nodeItem && isString(item)) {\n      console.warn('The item to be removed does not exist!');\n    } else if (nodeItem) {\n      var type = '';\n      if (nodeItem.getType) type = nodeItem.getType(); // 将删除的元素入栈\n\n      if (stack && this.get('enabledStack')) {\n        var deletedModel = __assign(__assign({}, nodeItem.getModel()), {\n          itemType: type\n        });\n\n        var before = {};\n\n        switch (type) {\n          case 'node':\n            {\n              before.nodes = [deletedModel];\n              before.edges = [];\n              var edges = nodeItem.getEdges();\n\n              for (var i = edges.length - 1; i >= 0; i--) {\n                before.edges.push(__assign(__assign({}, edges[i].getModel()), {\n                  itemType: 'edge'\n                }));\n              }\n\n              break;\n            }\n\n          case 'edge':\n            before.edges = [deletedModel];\n            break;\n\n          case 'combo':\n            before.combos = [deletedModel];\n            break;\n\n          default:\n            break;\n        }\n\n        this.pushStack('delete', {\n          before: before,\n          after: {}\n        });\n      }\n\n      if (type === 'node') {\n        var model = nodeItem.getModel(); // 如果删除的是节点，且该节点存在于某个 Combo 中，则需要先将 node 从 combo 中移除，否则删除节点后，操作 combo 会出错\n\n        if (model.comboId) {\n          this.updateComboTree(nodeItem);\n        }\n      }\n\n      var itemController = this.get('itemController');\n      itemController.removeItem(nodeItem);\n\n      if (type === 'combo') {\n        var newComboTrees = reconstructTree(this.get('comboTrees'));\n        this.set('comboTrees', newComboTrees);\n      }\n    }\n  };\n  /**\n   * 新增元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @param {boolean} sortCombo 本次操作是否需要更新 combo 层级顺序，内部参数，用户在外部使用 addItem 时始终时需要更新\n   * @return {Item} 元素实例\n   */\n\n\n  AbstractGraph.prototype.addItem = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    var currentComboSorted = this.get('comboSorted');\n    this.set('comboSorted', currentComboSorted && !sortCombo);\n    var itemController = this.get('itemController');\n\n    if (model.id && this.findById(model.id)) {\n      console.warn(\"This item exists already. Be sure the id %c\" + model.id + \"%c is unique.\", 'font-size: 20px; color: red;', '');\n      return;\n    }\n\n    var item;\n    var comboTrees = this.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n\n    if (type === 'combo') {\n      var itemMap_1 = this.get('itemMap');\n      var foundParent_1 = false;\n      comboTrees.forEach(function (ctree) {\n        if (foundParent_1) return; // terminate the forEach after the tree containing the item is done\n\n        traverseTreeUp(ctree, function (child) {\n          // find the parent\n          if (model.parentId === child.id) {\n            foundParent_1 = true;\n\n            var newCombo = __assign({\n              id: model.id,\n              depth: child.depth + 2\n            }, model);\n\n            if (child.children) child.children.push(newCombo);else child.children = [newCombo];\n            model.depth = newCombo.depth;\n            item = itemController.addItem(type, model);\n          }\n\n          var childItem = itemMap_1[child.id]; // after the parent is found, update all the ancestors\n\n          if (foundParent_1 && childItem && childItem.getType && childItem.getType() === 'combo') {\n            itemController.updateCombo(childItem, child.children);\n          }\n\n          return true;\n        });\n      }); // if the parent is not found, add it to the root\n\n      if (!foundParent_1) {\n        var newCombo = __assign({\n          id: model.id,\n          depth: 0\n        }, model);\n\n        model.depth = newCombo.depth;\n        comboTrees.push(newCombo);\n        item = itemController.addItem(type, model);\n      }\n\n      this.set('comboTrees', comboTrees);\n    } else if (type === 'node' && isString(model.comboId) && comboTrees) {\n      var parentCombo = this.findById(model.comboId);\n\n      if (parentCombo && parentCombo.getType && parentCombo.getType() !== 'combo') {\n        console.warn(\"'\" + model.comboId + \"' is not a id of a combo in the graph, the node will be added without combo.\");\n      }\n\n      item = itemController.addItem(type, model);\n      var itemMap_2 = this.get('itemMap');\n      var foundParent_2 = false,\n          foundNode_1 = false;\n      (comboTrees || []).forEach(function (ctree) {\n        if (foundNode_1 || foundParent_2) return; // terminate the forEach\n\n        traverseTreeUp(ctree, function (child) {\n          if (child.id === model.id) {\n            // if the item exists in the tree already, terminate\n            foundNode_1 = true;\n            return false;\n          }\n\n          if (model.comboId === child.id && !foundNode_1) {\n            // found the parent, add the item to the children of its parent in the tree\n            foundParent_2 = true;\n            var cloneNode = clone(model);\n            cloneNode.itemType = 'node';\n            if (child.children) child.children.push(cloneNode);else child.children = [cloneNode];\n            model.depth = child.depth + 1;\n          } // update the size of all the ancestors\n\n\n          if (foundParent_2 && itemMap_2[child.id].getType && itemMap_2[child.id].getType() === 'combo') {\n            itemController.updateCombo(itemMap_2[child.id], child.children);\n          }\n\n          return true;\n        });\n      });\n    } else {\n      item = itemController.addItem(type, model);\n    }\n\n    if (type === 'node' && model.comboId || type === 'combo' && model.parentId) {\n      // add the combo to the parent's children array\n      var parentCombo = this.findById(model.comboId || model.parentId);\n      if (parentCombo && parentCombo.getType && parentCombo.getType() === 'combo') parentCombo.addChild(item);\n    }\n\n    var combos = this.get('combos');\n\n    if (combos && combos.length > 0) {\n      this.sortCombos();\n    }\n\n    this.autoPaint();\n\n    if (stack && this.get('enabledStack')) {\n      var addedModel = __assign(__assign({}, item.getModel()), {\n        itemType: type\n      });\n\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          after.nodes = [addedModel];\n          break;\n\n        case 'edge':\n          after.edges = [addedModel];\n          break;\n\n        case 'combo':\n          after.combos = [addedModel];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('add', {\n        before: {},\n        after: after\n      });\n    }\n\n    return item;\n  };\n  /**\n   * 新增元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @return {Item} 元素实例\n   */\n\n\n  AbstractGraph.prototype.add = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    return this.addItem(type, model, stack, sortCombo);\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   */\n\n\n  AbstractGraph.prototype.updateItem = function (item, cfg, stack) {\n    var _this = this;\n\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var currentItem;\n\n    if (isString(item)) {\n      currentItem = this.findById(item);\n    } else {\n      currentItem = item;\n    }\n\n    var UnupdateModel = clone(currentItem.getModel());\n    var type = '';\n    if (currentItem.getType) type = currentItem.getType();\n\n    var states = __spreadArray([], currentItem.getStates());\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, false);\n      });\n    }\n\n    itemController.updateItem(currentItem, cfg);\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, true);\n      });\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var before = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n      var after = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n\n      var afterModel = __assign({\n        id: UnupdateModel.id\n      }, cfg);\n\n      switch (type) {\n        case 'node':\n          before.nodes.push(UnupdateModel);\n          after.nodes.push(afterModel);\n          break;\n\n        case 'edge':\n          before.edges.push(UnupdateModel);\n          after.edges.push(afterModel);\n          break;\n\n        case 'combo':\n          before.combos.push(UnupdateModel);\n          after.combos.push(afterModel);\n          break;\n\n        default:\n          break;\n      }\n\n      if (type === 'node') {\n        before.nodes.push(UnupdateModel);\n      }\n\n      this.pushStack('update', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.update = function (item, cfg, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.updateItem(item, cfg, stack);\n  };\n  /**\n   * 设置元素状态\n   * @param {Item} item 元素id或元素实例\n   * @param {string} state 状态名称\n   * @param {string | boolean} value 是否启用状态 或 状态值\n   */\n\n\n  AbstractGraph.prototype.setItemState = function (item, state, value) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n    itemController.setItemState(item, state, value);\n    var stateController = this.get('stateController');\n\n    if (isString(value)) {\n      stateController.updateState(item, state + \":\" + value, true);\n    } else {\n      stateController.updateState(item, state, value);\n    }\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  AbstractGraph.prototype.priorityState = function (item, state) {\n    var itemController = this.get('itemController');\n    itemController.priorityState(item, state);\n  };\n  /**\n   * 设置视图初始化数据\n   * @param {GraphData} data 初始化数据\n   */\n\n\n  AbstractGraph.prototype.data = function (data) {\n    this.set('data', data);\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  AbstractGraph.prototype.render = function () {\n    var self = this;\n    this.set('comboSorted', false);\n    var data = this.get('data');\n\n    if (this.get('enabledStack')) {\n      // render 之前清空 redo 和 undo 栈\n      this.clearStack();\n    }\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    var _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a,\n        _b = data.edges,\n        edges = _b === void 0 ? [] : _b,\n        _c = data.combos,\n        combos = _c === void 0 ? [] : _c;\n    this.clear(true);\n    this.emit('beforerender');\n    each(nodes, function (node) {\n      self.add('node', node, false, false);\n    }); // process the data to tree structure\n\n    if (combos && combos.length !== 0) {\n      var comboTrees = plainCombosToTrees(combos, nodes);\n      this.set('comboTrees', comboTrees); // add combos\n\n      self.addCombos(combos);\n    }\n\n    each(edges, function (edge) {\n      self.add('edge', edge, false, false);\n    });\n    var animate = self.get('animate');\n\n    if (self.get('fitView') || self.get('fitCenter')) {\n      self.set('animate', false);\n    } // layout\n\n\n    var layoutController = self.get('layoutController');\n\n    if (layoutController) {\n      layoutController.layout(success);\n      if (this.destroyed) return;\n    } else {\n      if (self.get('fitView')) {\n        self.fitView();\n      }\n\n      if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.emit('afterrender');\n      self.set('animate', animate);\n    } // 将在 onLayoutEnd 中被调用\n\n\n    function success() {\n      // fitView 与 fitCenter 共存时，fitView 优先，fitCenter 不再执行\n      if (self.get('fitView')) {\n        self.fitView();\n      } else if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.autoPaint();\n      self.emit('afterrender');\n\n      if (self.get('fitView') || self.get('fitCenter')) {\n        self.set('animate', animate);\n      }\n    }\n\n    if (!this.get('groupByTypes')) {\n      if (combos && combos.length !== 0) {\n        this.sortCombos();\n      } else {\n        // 为提升性能，选择数量少的进行操作\n        if (data.nodes && data.edges && data.nodes.length < data.edges.length) {\n          var nodesArr = this.getNodes(); // 遍历节点实例，将所有节点提前。\n\n          nodesArr.forEach(function (node) {\n            node.toFront();\n          });\n        } else {\n          var edgesArr = this.getEdges(); // 遍历节点实例，将所有节点提前。\n\n          edgesArr.forEach(function (edge) {\n            edge.toBack();\n          });\n        }\n      }\n    }\n\n    if (this.get('enabledStack')) {\n      this.pushStack('render');\n    }\n  };\n  /**\n   * 接收数据进行渲染\n   * @Param {Object} data 初始化数据\n   */\n\n\n  AbstractGraph.prototype.read = function (data) {\n    this.data(data);\n    this.render();\n  }; // 比较item\n\n\n  AbstractGraph.prototype.diffItems = function (type, items, models) {\n    var self = this;\n    var item;\n    var itemMap = this.get('itemMap');\n    each(models, function (model) {\n      item = itemMap[model.id];\n\n      if (item) {\n        if (self.get('animate') && type === NODE) {\n          var containerMatrix = item.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          item.set('originAttrs', {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          });\n        }\n\n        self.updateItem(item, model, false);\n      } else {\n        item = self.addItem(type, model, false);\n      }\n\n      if (item) items[type + \"s\"].push(item);\n    });\n  };\n  /**\n   * 更改源数据，根据新数据重新渲染视图\n   * @param {GraphData | TreeGraphData} data 源数据\n   * @param {boolean} 是否入栈，默认为true\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.changeData = function (data, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n\n    if (!data) {\n      return this;\n    }\n\n    if (stack && this.get('enabledStack')) {\n      this.pushStack('changedata', {\n        before: self.save(),\n        after: data\n      });\n    }\n\n    this.set('comboSorted', false); // 删除 hulls\n\n    this.removeHulls(); // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    var canvas = this.get('canvas');\n    var localRefresh = canvas.get('localRefresh');\n    canvas.set('localRefresh', false);\n\n    if (!self.get('data')) {\n      self.data(data);\n      self.render();\n    }\n\n    var itemMap = this.get('itemMap');\n    var items = {\n      nodes: [],\n      edges: []\n    };\n    var combosData = data.combos;\n\n    if (combosData) {\n      var comboTrees = plainCombosToTrees(combosData, data.nodes);\n      this.set('comboTrees', comboTrees);\n    }\n\n    this.diffItems('node', items, data.nodes);\n    each(itemMap, function (item, id) {\n      itemMap[id].getModel().depth = 0;\n      if (item.getType && item.getType() === 'edge') return;\n\n      if (item.getType && item.getType() === 'combo') {\n        delete itemMap[id];\n        item.destroy();\n      } else if (items.nodes.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    }); // clear the destroyed combos here to avoid removing sub nodes before removing the parent combo\n\n    var comboItems = this.getCombos();\n    var combosLength = comboItems.length;\n\n    for (var i = combosLength - 1; i >= 0; i--) {\n      if (comboItems[i].destroyed) {\n        comboItems.splice(i, 1);\n      }\n    } // process the data to tree structure\n\n\n    if (combosData) {\n      // add combos\n      self.addCombos(combosData);\n\n      if (!this.get('groupByTypes')) {\n        this.sortCombos();\n      }\n    }\n\n    this.diffItems('edge', items, data.edges);\n    each(itemMap, function (item, id) {\n      if (item.getType && (item.getType() === 'node' || item.getType() === 'combo')) return;\n\n      if (items.edges.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    });\n    this.set({\n      nodes: items.nodes,\n      edges: items.edges\n    });\n    var layoutController = this.get('layoutController');\n\n    if (layoutController) {\n      layoutController.changeData();\n\n      if (self.get('animate') && !layoutController.getLayoutType()) {\n        // 如果没有指定布局\n        self.positionsAnimate();\n      } else {\n        self.autoPaint();\n      }\n    }\n\n    setTimeout(function () {\n      canvas.set('localRefresh', localRefresh);\n    }, 16);\n    return this;\n  };\n  /**\n   * 私有方法，在 render 和 changeData 的时候批量添加数据中所有平铺的 combos\n   * @param {ComboConfig[]} combos 平铺的 combos 数据\n   */\n\n\n  AbstractGraph.prototype.addCombos = function (combos) {\n    var self = this;\n    var comboTrees = self.get('comboTrees');\n    var itemController = this.get('itemController');\n    itemController.addCombos(comboTrees, combos);\n  };\n  /**\n   * 根据已经存在的节点或 combo 创建新的 combo\n   * @param combo combo ID 或 Combo 配置\n   * @param children 添加到 Combo 中的元素，包括节点和 combo\n   */\n\n\n  AbstractGraph.prototype.createCombo = function (combo, children) {\n    var _this = this;\n\n    this.set('comboSorted', false); // step 1: 创建新的 Combo\n\n    var comboId = '';\n    var comboConfig;\n    if (!combo) return;\n\n    if (isString(combo)) {\n      comboId = combo;\n      comboConfig = {\n        id: combo\n      };\n    } else {\n      comboId = combo.id;\n\n      if (!comboId) {\n        console.warn('Create combo failed. Please assign a unique string id for the adding combo.');\n        return;\n      }\n\n      comboConfig = combo;\n    }\n\n    var trees = children.map(function (elementId) {\n      var item = _this.findById(elementId);\n\n      var type = '';\n      if (item.getType) type = item.getType();\n      var cItem = {\n        id: item.getID(),\n        itemType: type\n      };\n\n      if (type === 'combo') {\n        cItem.parentId = comboId;\n      } else if (type === 'node') {\n        cItem.comboId = comboId;\n      }\n\n      return cItem;\n    });\n    comboConfig.children = trees; // step 2: 添加 Combo，addItem 时会将子将元素添加到 Combo 中\n\n    this.addItem('combo', comboConfig, false);\n    this.set('comboSorted', false); // step3: 更新 comboTrees 结构\n\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (child.id === comboId) {\n          child.itemType = 'combo';\n          child.children = trees;\n          return false;\n        }\n\n        return true;\n      });\n    });\n\n    if (comboTrees) {\n      this.sortCombos();\n    }\n  };\n  /**\n   * 解散 combo\n   * @param {String | INode | ICombo} combo 需要被解散的 Combo item 或 id\n   */\n\n\n  AbstractGraph.prototype.uncombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item is not a combo!');\n      return;\n    }\n\n    var parentId = comboItem.getModel().parentId;\n    var comboTrees = self.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n    var itemMap = this.get('itemMap');\n    var comboId = comboItem.get('id');\n    var treeToBeUncombo;\n    var brothers = [];\n    var comboItems = this.get('combos');\n    var parentItem = this.findById(parentId);\n    comboTrees.forEach(function (ctree) {\n      if (treeToBeUncombo) return; // terminate the forEach\n\n      traverseTreeUp(ctree, function (subtree) {\n        // find the combo to be uncomboed, delete the combo from map and cache\n        if (subtree.id === comboId) {\n          treeToBeUncombo = subtree; // delete the related edges\n\n          var edges = comboItem.getEdges();\n          edges.forEach(function (edge) {\n            _this.removeItem(edge, false);\n          });\n          var index = comboItems.indexOf(combo);\n          comboItems.splice(index, 1);\n          delete itemMap[comboId];\n          comboItem.destroy();\n        } // find the parent to remove the combo from the combo's brothers array and add the combo's children to the combo's brothers array in the tree\n\n\n        if (parentId && treeToBeUncombo && subtree.id === parentId) {\n          parentItem.removeCombo(comboItem);\n          brothers = subtree.children; // the combo's brothers\n          // remove the combo from its brothers array\n\n          var index = brothers.indexOf(treeToBeUncombo);\n\n          if (index !== -1) {\n            brothers.splice(index, 1);\n          } // append the combo's children to the combo's brothers array\n\n\n          treeToBeUncombo.children.forEach(function (child) {\n            var item = _this.findById(child.id);\n\n            var childModel = item.getModel();\n\n            if (item.getType && item.getType() === 'combo') {\n              child.parentId = parentId;\n              delete child.comboId;\n              childModel.parentId = parentId; // update the parentId of the model\n\n              delete childModel.comboId;\n            } else if (item.getType && item.getType() === 'node') {\n              child.comboId = parentId;\n              childModel.comboId = parentId; // update the parentId of the model\n            }\n\n            parentItem.addChild(item);\n            brothers.push(child);\n          });\n          return false;\n        }\n\n        return true;\n      });\n    }); // if the parentId is not found, remove the combo from the roots\n\n    if (!parentId && treeToBeUncombo) {\n      var index = comboTrees.indexOf(treeToBeUncombo);\n      comboTrees.splice(index, 1); // modify the parentId of the children\n\n      treeToBeUncombo.children.forEach(function (child) {\n        child.parentId = undefined;\n\n        var childModel = _this.findById(child.id).getModel();\n\n        childModel.parentId = undefined; // update the parentId of the model\n\n        if (child.itemType !== 'node') comboTrees.push(child);\n      });\n    }\n  };\n  /**\n   * 根据节点的 bbox 更新所有 combos 的绘制，包括 combos 的位置和范围\n   */\n\n\n  AbstractGraph.prototype.updateCombos = function () {\n    var _this = this;\n\n    var self = this;\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArray([], childItem.getStates());\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, false);\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, true);\n          });\n        }\n\n        return true;\n      });\n    });\n    self.sortCombos();\n  };\n  /**\n   * 根据节点的 bbox 更新 combo 及其祖先 combos 的绘制，包括 combos 的位置和范围\n   * @param {String | ICombo} combo 需要被更新的 Combo 或 id，若指定，则该 Combo 及所有祖先 Combod 都会被更新\n   */\n\n\n  AbstractGraph.prototype.updateCombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n    var comboId;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item to be updated is not a combo!');\n      return;\n    }\n\n    comboId = comboItem.get('id');\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (comboId === child.id && childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArray([], childItem.getStates()); // || !item.getStateStyle(stateName)\n\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, false);\n            }\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, true);\n            }\n          });\n          if (comboId) comboId = child.parentId;\n        }\n\n        return true;\n      });\n    });\n  };\n  /**\n   * 更新树结构，例如移动子树等\n   * @param {String | INode | ICombo} item 需要被更新的 Combo 或 节点 id\n   * @param {string | undefined} parentId 新的父 combo id，undefined 代表没有父 combo\n   */\n\n\n  AbstractGraph.prototype.updateComboTree = function (item, parentId, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n    this.set('comboSorted', false);\n    var uItem;\n\n    if (isString(item)) {\n      uItem = self.findById(item);\n    } else {\n      uItem = item;\n    }\n\n    var model = uItem.getModel();\n    var oldParentId = model.comboId || model.parentId;\n    var type = '';\n    if (uItem.getType) type = uItem.getType(); // 若 item 是 Combo，且 parentId 是其子孙 combo 的 id，则警告并终止\n\n    if (parentId && type === 'combo') {\n      var comboTrees = this.get('comboTrees');\n      var valid_1 = true;\n      var itemSubTree_1;\n      (comboTrees || []).forEach(function (ctree) {\n        if (itemSubTree_1) return;\n        traverseTree(ctree, function (subTree) {\n          if (itemSubTree_1) return; // 找到从 item 开始的子树\n\n          if (subTree.id === uItem.getID()) {\n            itemSubTree_1 = subTree;\n          }\n\n          return true;\n        });\n      }); // 在以 item 为根的子树中寻找与 parentId 相同的后继元素\n\n      traverseTree(itemSubTree_1, function (subTree) {\n        if (subTree.id === parentId) {\n          valid_1 = false;\n          return false;\n        }\n\n        return true;\n      }); // parentId 是 item 的一个后继元素，不能进行更新\n\n      if (!valid_1) {\n        console.warn('Failed to update the combo tree! The parentId points to a descendant of the combo!');\n        return;\n      }\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var beforeData = {},\n          afterData = {};\n\n      if (type === 'combo') {\n        beforeData.combos = [{\n          id: model.id,\n          parentId: model.parentId\n        }];\n        afterData.combos = [{\n          id: model.id,\n          parentId: parentId\n        }];\n      } else if (type === 'node') {\n        beforeData.nodes = [{\n          id: model.id,\n          parentId: model.comboId\n        }];\n        afterData.nodes = [{\n          id: model.id,\n          parentId: parentId\n        }];\n      }\n\n      this.pushStack('updateComboTree', {\n        before: beforeData,\n        after: afterData\n      });\n    } // 当 combo 存在 parentId 或 comboId 时，才将其移除\n\n\n    if (model.parentId || model.comboId) {\n      var combo = this.findById(model.parentId || model.comboId);\n\n      if (combo) {\n        combo.removeChild(uItem);\n      }\n    }\n\n    if (type === 'combo') {\n      model.parentId = parentId;\n    } else if (type === 'node') {\n      model.comboId = parentId;\n    } // 只有当移入到指定 combo 时才添加\n\n\n    if (parentId) {\n      var parentCombo = this.findById(parentId);\n\n      if (parentCombo) {\n        // 将元素添加到 parentCombo 中\n        parentCombo.addChild(uItem);\n      }\n    } // 如果原先有父亲 combo，则从原父 combo 的子元素数组中删除\n\n\n    if (oldParentId) {\n      var parentCombo = this.findById(oldParentId);\n\n      if (parentCombo) {\n        // 将元素从 parentCombo 中移除\n        parentCombo.removeChild(uItem);\n      }\n    }\n\n    var newComboTrees = reconstructTree(this.get('comboTrees'), model.id, parentId);\n    this.set('comboTrees', newComboTrees);\n    this.updateCombos();\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  AbstractGraph.prototype.save = function () {\n    var nodes = [];\n    var edges = [];\n    var combos = [];\n    each(this.get('nodes'), function (node) {\n      nodes.push(node.getModel());\n    });\n    each(this.get('edges'), function (edge) {\n      edges.push(edge.getModel());\n    });\n    each(this.get('combos'), function (combo) {\n      combos.push(combo.getModel());\n    });\n    return {\n      nodes: nodes,\n      edges: edges,\n      combos: combos\n    };\n  };\n  /**\n   * 改变画布大小\n   * @param  {number} width  画布宽度\n   * @param  {number} height 画布高度\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.changeSize = function (width, height) {\n    var viewController = this.get('viewController');\n    viewController.changeSize(width, height);\n    return this;\n  };\n  /**\n   * 当源数据在外部发生变更时，根据新数据刷新视图。但是不刷新节点位置\n   */\n\n\n  AbstractGraph.prototype.refresh = function () {\n    var self = this;\n    self.emit('beforegraphrefresh');\n\n    if (self.get('animate')) {\n      self.positionsAnimate();\n    } else {\n      var nodes = self.get('nodes');\n      var edges = self.get('edges');\n      var vedges = self.get('edges');\n      each(nodes, function (node) {\n        node.refresh();\n      });\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n      each(vedges, function (vedge) {\n        vedge.refresh();\n      });\n    }\n\n    self.emit('aftergraphrefresh');\n    self.autoPaint();\n  };\n  /**\n   * 获取当前图中所有节点的item实例\n   * @return {INode} item数组\n   */\n\n\n  AbstractGraph.prototype.getNodes = function () {\n    return this.get('nodes');\n  };\n  /**\n   * 获取当前图中所有边的item实例\n   * @return {IEdge} item数组\n   */\n\n\n  AbstractGraph.prototype.getEdges = function () {\n    return this.get('edges');\n  };\n  /**\n   * 获取图中所有的 combo 实例\n   */\n\n\n  AbstractGraph.prototype.getCombos = function () {\n    return this.get('combos');\n  };\n  /**\n   * 获取指定 Combo 中所有的节点\n   * @param comboId combo ID\n   */\n\n\n  AbstractGraph.prototype.getComboChildren = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo does not exist!');\n      return;\n    }\n\n    return combo.getChildren();\n  };\n  /**\n   * 根据 graph 上的 animateCfg 进行视图中节点位置动画接口\n   */\n\n\n  AbstractGraph.prototype.positionsAnimate = function () {\n    var self = this;\n    self.emit('beforeanimate');\n    var animateCfg = self.get('animateCfg');\n    var onFrame = animateCfg.onFrame;\n    var nodes = self.getNodes();\n    var toNodes = nodes.map(function (node) {\n      var model = node.getModel();\n      return {\n        id: model.id,\n        x: model.x,\n        y: model.y\n      };\n    });\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    canvas.animate(function (ratio) {\n      each(toNodes, function (data) {\n        var node = self.findById(data.id);\n\n        if (!node || node.destroyed) {\n          return;\n        }\n\n        var originAttrs = node.get('originAttrs');\n        var model = node.get('model');\n\n        if (!originAttrs) {\n          var containerMatrix = node.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          originAttrs = {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          };\n          node.set('originAttrs', originAttrs);\n        }\n\n        if (onFrame) {\n          var attrs = onFrame(node, ratio, data, originAttrs);\n          node.set('model', Object.assign(model, attrs));\n        } else {\n          model.x = originAttrs.x + (data.x - originAttrs.x) * ratio;\n          model.y = originAttrs.y + (data.y - originAttrs.y) * ratio;\n        }\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.easing,\n      callback: function callback() {\n        each(nodes, function (node) {\n          node.set('originAttrs', null);\n        });\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate');\n        self.animating = false;\n      }\n    });\n  };\n  /**\n   * 当节点位置在外部发生改变时，刷新所有节点位置，重计算边\n   */\n\n\n  AbstractGraph.prototype.refreshPositions = function () {\n    var self = this;\n    self.emit('beforegraphrefreshposition');\n    var nodes = self.get('nodes');\n    var edges = self.get('edges');\n    var vedges = self.get('vedges');\n    var combos = self.get('combos');\n    var model;\n    var updatedNodes = {};\n    var nodeChangeMap = {};\n    each(nodes, function (node) {\n      model = node.getModel();\n      var originAttrs = node.get('originAttrs');\n\n      if (originAttrs && model.x === originAttrs.x && model.y === originAttrs.y) {\n        return;\n      }\n\n      var changed = node.updatePosition({\n        x: model.x,\n        y: model.y\n      });\n      updatedNodes[model.id] = changed;\n      if (model.comboId) updatedNodes[model.comboId] = updatedNodes[model.comboId] || changed;\n    });\n\n    if (combos && combos.length !== 0) {\n      self.updateCombos();\n    }\n\n    each(edges, function (edge) {\n      var sourceModel = edge.getSource().getModel();\n      var targetModel = edge.getTarget().getModel();\n\n      if (updatedNodes[sourceModel.id] || updatedNodes[targetModel.id] || edge.getModel().isComboEdge) {\n        edge.refresh();\n      }\n    });\n    each(vedges, function (vedge) {\n      vedge.refresh();\n    });\n    self.emit('aftergraphrefreshposition');\n    self.autoPaint();\n  };\n\n  AbstractGraph.prototype.stopAnimate = function () {\n    this.get('canvas').stopAnimate();\n  };\n\n  AbstractGraph.prototype.isAnimating = function () {\n    return this.animating;\n  };\n  /**\n   * 获取当前视口伸缩比例\n   * @return {number} 比例\n   */\n\n\n  AbstractGraph.prototype.getZoom = function () {\n    var matrix = this.get('group').getMatrix();\n    return matrix ? matrix[0] : 1;\n  };\n  /**\n   * 获取当前的行为模式\n   * @return {string} 当前行为模式\n   */\n\n\n  AbstractGraph.prototype.getCurrentMode = function () {\n    var modeController = this.get('modeController');\n    return modeController.getMode();\n  };\n  /**\n   * 切换行为模式\n   * @param {string} mode 指定模式\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.setMode = function (mode) {\n    var modeController = this.get('modeController');\n    modeController.setMode(mode);\n    return this;\n  };\n  /**\n   * 清除画布元素\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.clear = function (avoidEmit) {\n    if (avoidEmit === void 0) {\n      avoidEmit = false;\n    }\n\n    var canvas = this.get('canvas');\n    canvas.clear();\n    this.initGroups(); // 清空画布时同时清除数据\n\n    this.set({\n      itemMap: {},\n      nodes: [],\n      edges: [],\n      groups: [],\n      combos: [],\n      comboTrees: []\n    });\n    if (!avoidEmit) this.emit('afterrender');\n    return this;\n  };\n  /**\n   * 更换布局配置项\n   * @param {object} cfg 新布局配置项\n   * 若 cfg 含有 type 字段或为 String 类型，且与现有布局方法不同，则更换布局\n   * 若 cfg 不包括 type ，则保持原有布局方法，仅更新布局配置项\n   */\n\n\n  AbstractGraph.prototype.updateLayout = function (cfg) {\n    var layoutController = this.get('layoutController');\n\n    if (isString(cfg)) {\n      cfg = {\n        type: cfg\n      };\n    }\n\n    var oriLayoutCfg = this.get('layout');\n    var layoutCfg = {};\n    Object.assign(layoutCfg, oriLayoutCfg, cfg);\n    this.set('layout', layoutCfg);\n\n    if (layoutController.isLayoutTypeSame(layoutCfg) && layoutCfg.gpuEnabled === oriLayoutCfg.gpuEnabled) {\n      // no type or same type, or switch the gpu and cpu, update layout\n      layoutController.updateLayoutCfg(layoutCfg);\n    } else {\n      // has different type, change layout\n      layoutController.changeLayout(layoutCfg);\n    }\n  };\n  /**\n   * 销毁布局，changeData 时不会再使用原来的布局方法对新数据进行布局\n   */\n\n\n  AbstractGraph.prototype.destroyLayout = function () {\n    var layoutController = this.get('layoutController');\n    layoutController.destroyLayout();\n  };\n  /**\n   * 重新以当前示例中配置的属性进行一次布局\n   */\n\n\n  AbstractGraph.prototype.layout = function () {\n    var layoutController = this.get('layoutController');\n    var layoutCfg = this.get('layout');\n    if (!layoutCfg || !layoutController) return;\n\n    if (layoutCfg.workerEnabled) {\n      // 如果使用web worker布局\n      layoutController.layout();\n      return;\n    }\n\n    if (layoutController.layoutMethod) {\n      layoutController.relayout(true);\n    } else {\n      layoutController.layout();\n    }\n  };\n  /**\n   * 收起指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  AbstractGraph.prototype.collapseCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo) {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    this.emit('beforecollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.collapseCombo(combo);\n    comboModel.collapsed = true; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate the forEach\n\n      traverseTree(ctree, function (subTree) {\n        // if the combo is found and the it is traversing the other brothers, terminate\n        if (found && brothers[subTree.id]) return false;\n\n        if (comboModel.parentId === subTree.id) {\n          // if the parent is found, store the brothers\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          // if the combo is found\n          found = true;\n        }\n\n        if (found) {\n          // if the combo is found, concat the descendant nodes and combos\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = [];\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || source.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel();\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.parentId || targetModel.comboId);\n          if (!target || !targetModel.parentId && !targetModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          targetModel = target.getModel();\n        }\n\n        var targetId = targetModel.id;\n\n        if (edgeWeightMap[comboModel.id + \"-\" + targetId]) {\n          edgeWeightMap[comboModel.id + \"-\" + targetId] += edgeModel.size || 1;\n          return;\n        } // the source is in the combo, the target is not\n\n\n        var vedge = _this.addItem('vedge', {\n          source: comboModel.id,\n          target: targetId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[comboModel.id + \"-\" + targetId] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || target.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel();\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.parentId || sourceModel.comboId);\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          sourceModel = source.getModel();\n        }\n\n        var sourceId = sourceModel.id;\n\n        if (edgeWeightMap[sourceId + \"-\" + comboModel.id]) {\n          edgeWeightMap[sourceId + \"-\" + comboModel.id] += edgeModel.size || 1;\n          return;\n        } // the target is in the combo, the source is not\n\n\n        var vedge = _this.addItem('vedge', {\n          target: comboModel.id,\n          source: sourceId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[sourceId + \"-\" + comboModel.id] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      }\n    }); // update the width of the virtual edges, which is the sum of merged actual edges\n    // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n    addedVEdges.forEach(function (vedge) {\n      var vedgeModel = vedge.getModel();\n\n      _this.updateItem(vedge, {\n        size: edgeWeightMap[vedgeModel.source + \"-\" + vedgeModel.target]\n      }, false);\n    });\n    this.emit('aftercollapseexpandcombo', {\n      action: 'collapse',\n      item: combo\n    });\n  };\n  /**\n   * 展开指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  AbstractGraph.prototype.expandCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    this.emit('beforecollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.expandCombo(combo);\n    comboModel.collapsed = false; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate\n\n      traverseTree(ctree, function (subTree) {\n        if (found && brothers[subTree.id]) {\n          return false;\n        }\n\n        if (comboModel.parentId === subTree.id) {\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          found = true;\n        }\n\n        if (found) {\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = {};\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n      var sourceId = source.get('id');\n      var targetId = target.get('id');\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || sourceId === comboModel.id) {\n        // the source is in the combo, the target is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (sourceModel.comboId === comboModel.id || sourceModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n\n        if (targetId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            source: sourceId,\n            target: targetId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || targetId === comboModel.id) {\n        // the target is in the combo, the source is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (targetModel.comboId === comboModel.id || targetModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n\n        if (sourceId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            target: targetId,\n            source: sourceId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if ((cnodes.includes(source) || ccombos.includes(source)) && (cnodes.includes(target) || ccombos.includes(target))) {\n        // both source and target are in the combo, if the target and source are both visible, show the edge\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      }\n    });\n    this.emit('aftercollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n  };\n\n  AbstractGraph.prototype.collapseExpandCombo = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (combo.getType && combo.getType() !== 'combo') return;\n    var comboModel = combo.getModel(); // if one ancestor combo of the combo is collapsed, it should not be collapsed or expanded\n\n    var parentItem = this.findById(comboModel.parentId);\n\n    while (parentItem) {\n      var parentModel = parentItem.getModel();\n\n      if (parentModel.collapsed) {\n        console.warn(\"Fail to expand the combo since it's ancestor combo is collapsed.\");\n        parentItem = undefined;\n        return;\n      }\n\n      parentItem = this.findById(parentModel.parentId);\n    }\n\n    var collapsed = comboModel.collapsed; // 该群组已经处于收起状态，需要展开\n\n    if (collapsed) {\n      this.expandCombo(combo);\n    } else {\n      this.collapseCombo(combo);\n    }\n\n    this.updateCombo(combo);\n  };\n  /**\n   * 根据 comboTree 结构整理 Combo 相关的图形绘制层级，包括 Combo 本身、节点、边\n   * @param {GraphData} data 数据\n   */\n\n\n  AbstractGraph.prototype.sortCombos = function () {\n    var _this = this;\n\n    var comboSorted = this.get('comboSorted');\n    if (comboSorted) return;\n    this.set('comboSorted', true);\n    var depthMap = [];\n    var dataDepthMap = {};\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (cTree) {\n      traverseTree(cTree, function (child) {\n        if (depthMap[child.depth]) depthMap[child.depth].push(child.id);else depthMap[child.depth] = [child.id];\n        dataDepthMap[child.id] = child.depth;\n        return true;\n      });\n    });\n    var edges = this.getEdges().concat(this.get('vedges'));\n    (edges || []).forEach(function (edgeItem) {\n      var edge = edgeItem.getModel();\n      var sourceDepth = dataDepthMap[edge.source] || 0;\n      var targetDepth = dataDepthMap[edge.target] || 0;\n      var depth = Math.max(sourceDepth, targetDepth);\n      if (depthMap[depth]) depthMap[depth].push(edge.id);else depthMap[depth] = [edge.id];\n    });\n    depthMap.forEach(function (array) {\n      if (!array || !array.length) return;\n\n      for (var i = array.length - 1; i >= 0; i--) {\n        var item = _this.findById(array[i]);\n\n        if (item) item.toFront();\n      }\n    });\n  };\n  /**\n   * 获取节点所有的邻居节点\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @returns {INode[]}\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getNeighbors = function (node, type) {\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    return item.getNeighbors(type);\n  };\n  /**\n   * 获取 node 的度数\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @param {('in' | 'out' | 'total' | 'all' | undefined)} 度数类型，in 入度，out 出度，total 总度数，all 返回三种类型度数的对象\n   * @returns {Number | Object} 该节点的度数\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getNodeDegree = function (node, type, refresh) {\n    if (type === void 0) {\n      type = undefined;\n    }\n\n    if (refresh === void 0) {\n      refresh = false;\n    }\n\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    var degrees = this.get('degrees');\n\n    if (!degrees || refresh) {\n      degrees = getDegree(this.save());\n      this.set('degrees', degrees);\n    }\n\n    var nodeDegrees = degrees[item.getID()];\n    var res = 0; // 如果是通过 addItem 后面新增加的节点，此时它的所有度数都为 0\n\n    if (!nodeDegrees) {\n      return 0;\n    }\n\n    switch (type) {\n      case 'in':\n        res = nodeDegrees.inDegree;\n        break;\n\n      case 'out':\n        res = nodeDegrees.outDegree;\n        break;\n\n      case 'all':\n        res = nodeDegrees;\n        break;\n\n      default:\n        res = nodeDegrees.degree;\n        break;\n    }\n\n    return res;\n  };\n\n  AbstractGraph.prototype.getUndoStack = function () {\n    return this.undoStack;\n  };\n\n  AbstractGraph.prototype.getRedoStack = function () {\n    return this.redoStack;\n  };\n  /**\n   * 获取 undo 和 redo 栈的数据\n   */\n\n\n  AbstractGraph.prototype.getStackData = function () {\n    if (!this.get('enabledStack')) {\n      return null;\n    }\n\n    return {\n      undoStack: this.undoStack.toArray(),\n      redoStack: this.redoStack.toArray()\n    };\n  };\n  /**\n   * 清空 undo stack & redo stack\n   */\n\n\n  AbstractGraph.prototype.clearStack = function () {\n    if (this.get('enabledStack')) {\n      this.undoStack.clear();\n      this.redoStack.clear();\n    }\n  };\n  /**\n   * 将操作类型和操作数据入栈\n   * @param action 操作类型\n   * @param data 入栈的数据\n   * @param stackType 栈的类型\n   */\n\n\n  AbstractGraph.prototype.pushStack = function (action, data, stackType) {\n    if (action === void 0) {\n      action = 'update';\n    }\n\n    if (stackType === void 0) {\n      stackType = 'undo';\n    }\n\n    if (!this.get('enabledStack')) {\n      console.warn('请先启用 undo & redo 功能，在实例化 Graph 时候配置 enabledStack: true !');\n      return;\n    }\n\n    var stackData = data ? clone(data) : {\n      before: {},\n      after: clone(this.save())\n    };\n\n    if (stackType === 'redo') {\n      this.redoStack.push({\n        action: action,\n        data: stackData\n      });\n    } else {\n      this.undoStack.push({\n        action: action,\n        data: stackData\n      });\n    }\n\n    this.emit('stackchange', {\n      undoStack: this.undoStack,\n      redoStack: this.redoStack\n    });\n  };\n  /**\n   * 获取邻接矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 邻接矩阵\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getAdjMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = getAdjacentMatrix(this.save(), directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    return currentAdjMatrix;\n  };\n  /**\n   * 获取最短路径矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 最短路径矩阵\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getShortestPathMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n    var currentShourtestPathMatrix = this.get('shortestPathMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = getAdjacentMatrix(this.save(), directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    if (!currentShourtestPathMatrix || !cache) {\n      currentShourtestPathMatrix = floydWarshall(this.save(), directed);\n      this.set('shortestPathMatrix', currentShourtestPathMatrix);\n    }\n\n    return currentShourtestPathMatrix;\n  };\n  /**\n   * 重新定义监听函数，复写参数类型\n   */\n\n\n  AbstractGraph.prototype.on = function (eventName, callback, once) {\n    return _super.prototype.on.call(this, eventName, callback, once);\n  };\n  /**\n   * 销毁画布\n   */\n\n\n  AbstractGraph.prototype.destroy = function () {\n    this.clear(); // 清空栈数据\n\n    this.clearStack();\n    this.get('itemController').destroy();\n    this.get('modeController').destroy();\n    this.get('viewController').destroy();\n    this.get('stateController').destroy();\n    this.get('canvas').destroy();\n    this.cfg = null;\n    this.destroyed = true;\n    this.redoStack = null;\n    this.undoStack = null;\n  };\n  /**\n   * 创建凸包或凹包轮廓\n   * @param cfg HullCfg 轮廓配置项\n   */\n\n\n  AbstractGraph.prototype.createHull = function (cfg) {\n    if (!cfg.members || cfg.members.length < 1) {\n      console.warn('Create hull failed! The members is empty.');\n      return;\n    }\n\n    var parent = this.get('hullGroup');\n    var hullMap = this.get('hullMap');\n\n    if (!hullMap) {\n      hullMap = {};\n      this.set('hullMap', hullMap);\n    }\n\n    if (!parent || parent.get('destroyed')) {\n      parent = this.get('group').addGroup({\n        id: 'hullGroup'\n      });\n      parent.toBack();\n      this.set('hullGroup', parent);\n    }\n\n    if (hullMap[cfg.id]) {\n      console.warn('Existed hull id.');\n      return hullMap[cfg.id];\n    }\n\n    var group = parent.addGroup({\n      id: cfg.id + \"-container\"\n    });\n    var hull = new Hull(this, __assign(__assign({}, cfg), {\n      group: group\n    }));\n    var hullId = hull.id;\n    hullMap[hullId] = hull;\n    return hull;\n  };\n  /**\n   * 获取当前 graph 中存在的包裹轮廓\n   * @return {[key: string]: Hull} Hull 的 map，hullId 对应的 hull 实例\n   */\n\n\n  AbstractGraph.prototype.getHulls = function () {\n    return this.get('hullMap');\n  };\n  /**\n   * 根据 hullId 获取对应的 hull\n   * @return Hull\n   */\n\n\n  AbstractGraph.prototype.getHullById = function (hullId) {\n    return this.get('hullMap')[hullId];\n  };\n\n  AbstractGraph.prototype.removeHull = function (hull) {\n    var hullInstance;\n\n    if (isString(hull)) {\n      hullInstance = this.getHullById(hull);\n    } else {\n      hullInstance = hull;\n    }\n\n    var hullMap = this.get('hullMap');\n    delete hullMap[hullInstance.id];\n    hullInstance.destroy();\n  };\n\n  AbstractGraph.prototype.removeHulls = function () {\n    var hulls = this.getHulls();\n    if (!hulls || !Object.keys(hulls).length) return;\n    Object.keys(hulls).forEach(function (key) {\n      var hull = hulls[key];\n      hull.destroy();\n    });\n    this.set('hullMap', {});\n  };\n\n  return AbstractGraph;\n}(EventEmitter);\n\nexport default AbstractGraph;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-core/es/graph/graph.js"],"names":["__assign","__extends","__spreadArray","EventEmitter","ext","clone","deepMix","each","isPlainObject","isString","getDegree","getAdjMatrix","getAdjacentMatrix","Stack","floydWarshall","move","Global","ItemController","ModeController","StateController","ViewController","plainCombosToTrees","traverseTree","reconstructTree","traverseTreeUp","Hull","transform","NODE","AbstractGraph","_super","cfg","_this","call","getDefaultCfg","init","animating","destroyed","enabledStack","undoStack","maxStep","redoStack","prototype","initCanvas","viewController","modeController","itemController","stateController","set","initLayoutController","initEventController","initGroups","initPlugins","canvas","get","el","id","group","addGroup","className","rootContainerClassName","edgeGroup","edgeContainerClassName","nodeGroup","nodeContainerClassName","comboGroup","comboContainerClassName","toBack","delegateGroup","delegateContainerClassName","container","undefined","width","height","renderer","modes","plugins","data","fitViewPadding","minZoom","maxZoom","event","groupByTypes","directed","autoPaint","nodes","edges","combos","vedges","itemMap","linkCenter","defaultNode","defaultEdge","nodeStateStyles","edgeStateStyles","states","animate","animateCfg","onFrame","duration","easing","callback","tooltips","key","val","getGroup","getContainer","getMinZoom","setMinZoom","ratio","getMaxZoom","setMaxZoom","getWidth","getHeight","clearItemStates","item","findById","updateStates","node","nodeFn","edge","edgeFn","combo","comboFn","find","type","fn","result","items","i","findAll","push","findAllByState","state","hasState","translate","dx","dy","matrix","getMatrix","setMatrix","emit","action","moveTo","x","y","fitView","padding","fitCenter","addBehaviors","behaviors","manipulateBehaviors","removeBehaviors","updateBehavior","behavior","newCfg","mode","zoom","center","zoomTo","toRatio","getZoom","focusItem","isAnimate","curAniamteCfg","focus","paint","draw","getPointByClient","clientX","clientY","getClientByPoint","getPointByCanvas","canvasX","canvasY","getCanvasByPoint","getGraphCenterPoint","bbox","getCanvasBBox","minX","maxX","minY","maxY","getViewPortCenterPoint","showItem","stack","object","changeItemVisibility","getID","getType","before","after","visible","pushStack","hideItem","refreshItem","setAutoPaint","auto","self","remove","removeItem","nodeItem","console","warn","deletedModel","getModel","itemType","getEdges","length","model","comboId","updateComboTree","newComboTrees","addItem","sortCombo","currentComboSorted","comboTrees","itemMap_1","foundParent_1","forEach","ctree","child","parentId","newCombo","depth","children","childItem","updateCombo","parentCombo","itemMap_2","foundParent_2","foundNode_1","cloneNode","addChild","sortCombos","addedModel","add","updateItem","currentItem","UnupdateModel","getStates","setItemState","afterModel","update","value","updateState","priorityState","render","clearStack","Error","_a","_b","_c","clear","addCombos","layoutController","layout","success","nodesArr","getNodes","toFront","edgesArr","read","diffItems","models","containerMatrix","changeData","save","removeHulls","map","localRefresh","combosData","destroy","indexOf","comboItems","getCombos","combosLength","splice","getLayoutType","positionsAnimate","setTimeout","createCombo","comboConfig","trees","elementId","cItem","uncombo","comboItem","treeToBeUncombo","brothers","parentItem","subtree","index","removeCombo","childModel","updateCombos","getStateStyle","uItem","oldParentId","valid_1","itemSubTree_1","subTree","beforeData","afterData","removeChild","changeSize","refresh","vedge","getComboChildren","getChildren","toNodes","isAnimating","stopAnimate","originAttrs","attrs","Object","assign","refreshPositions","updatedNodes","nodeChangeMap","changed","updatePosition","sourceModel","getSource","targetModel","getTarget","isComboEdge","getCurrentMode","getMode","setMode","avoidEmit","groups","updateLayout","oriLayoutCfg","layoutCfg","isLayoutTypeSame","gpuEnabled","updateLayoutCfg","changeLayout","destroyLayout","workerEnabled","layoutMethod","relayout","collapseCombo","comboModel","collapsed","concat","cnodes","ccombos","found","edgeWeightMap","addedVEdges","isVisible","isVEdge","source","target","includes","edgeModel","targetId","size","sourceId","vedgeModel","expandCombo","vedgeId","show","collapseExpandCombo","parentModel","comboSorted","depthMap","dataDepthMap","cTree","edgeItem","sourceDepth","targetDepth","Math","max","array","getNeighbors","getNodeDegree","degrees","nodeDegrees","res","inDegree","outDegree","degree","getUndoStack","getRedoStack","getStackData","toArray","stackType","stackData","cache","currentAdjMatrix","getShortestPathMatrix","currentShourtestPathMatrix","on","eventName","once","createHull","members","parent","hullMap","hull","hullId","getHulls","getHullById","removeHull","hullInstance","hulls","keys"],"mappings":"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","sourcesContent":["import { __assign, __extends, __spreadArray } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport { ext } from '@antv/matrix-util';\nimport { clone, deepMix, each, isPlainObject, isString } from '@antv/util';\nimport { getDegree, getAdjMatrix as getAdjacentMatrix, Stack, floydWarshall } from '@antv/algorithm';\nimport { move } from '../util/math';\nimport Global from '../global';\nimport { ItemController, ModeController, StateController, ViewController } from './controller';\nimport { plainCombosToTrees, traverseTree, reconstructTree, traverseTreeUp } from '../util/graphic';\nimport Hull from '../item/hull';\nvar transform = ext.transform;\nvar NODE = 'node';\n\nvar AbstractGraph =\n/** @class */\nfunction (_super) {\n  __extends(AbstractGraph, _super);\n\n  function AbstractGraph(cfg) {\n    var _this = _super.call(this) || this;\n\n    _this.cfg = deepMix(_this.getDefaultCfg(), cfg);\n\n    _this.init();\n\n    _this.animating = false;\n    _this.destroyed = false; // 启用 stack 后，实例化 undoStack 和 redoStack\n\n    if (_this.cfg.enabledStack) {\n      // 实例化 undo 和 redo 栈\n      _this.undoStack = new Stack(_this.cfg.maxStep);\n      _this.redoStack = new Stack(_this.cfg.maxStep);\n    }\n\n    return _this;\n  }\n\n  AbstractGraph.prototype.init = function () {\n    this.initCanvas(); // instance controller\n\n    var viewController = new ViewController(this);\n    var modeController = new ModeController(this);\n    var itemController = new ItemController(this);\n    var stateController = new StateController(this);\n    this.set({\n      viewController: viewController,\n      modeController: modeController,\n      itemController: itemController,\n      stateController: stateController\n    }); // 初始化布局机制\n\n    this.initLayoutController(); // 初始化事件机制\n\n    this.initEventController();\n    this.initGroups();\n    /** 初始化插件 */\n\n    this.initPlugins();\n  }; // 初始化所有 Group\n\n\n  AbstractGraph.prototype.initGroups = function () {\n    var canvas = this.get('canvas');\n    var el = this.get('canvas').get('el');\n    var id = el.id;\n    var group = canvas.addGroup({\n      id: id + \"-root\",\n      className: Global.rootContainerClassName\n    });\n\n    if (this.get('groupByTypes')) {\n      var edgeGroup = group.addGroup({\n        id: id + \"-edge\",\n        className: Global.edgeContainerClassName\n      });\n      var nodeGroup = group.addGroup({\n        id: id + \"-node\",\n        className: Global.nodeContainerClassName\n      });\n      var comboGroup = group.addGroup({\n        id: id + \"-combo\",\n        className: Global.comboContainerClassName\n      }); // 用于存储自定义的群组\n\n      comboGroup.toBack();\n      this.set({\n        nodeGroup: nodeGroup,\n        edgeGroup: edgeGroup,\n        comboGroup: comboGroup\n      });\n    }\n\n    var delegateGroup = group.addGroup({\n      id: id + \"-delegate\",\n      className: Global.delegateContainerClassName\n    });\n    this.set({\n      delegateGroup: delegateGroup\n    });\n    this.set('group', group);\n  }; // eslint-disable-next-line class-methods-use-this\n\n\n  AbstractGraph.prototype.getDefaultCfg = function () {\n    return {\n      /**\n       * Container could be dom object or dom id\n       */\n      container: undefined,\n\n      /**\n       * Canvas width\n       * unit pixel if undefined force fit width\n       */\n      width: undefined,\n\n      /**\n       * Canvas height\n       * unit pixel if undefined force fit height\n       */\n      height: undefined,\n\n      /**\n       * renderer canvas or svg\n       * @type {string}\n       */\n      renderer: 'canvas',\n\n      /**\n       * control graph behaviors\n       */\n      modes: {},\n\n      /**\n       * 注册插件\n       */\n      plugins: [],\n\n      /**\n       * source data\n       */\n      data: {},\n\n      /**\n       * Fit view padding (client scale)\n       */\n      fitViewPadding: 10,\n\n      /**\n       * Minimum scale size\n       */\n      minZoom: 0.2,\n\n      /**\n       * Maxmum scale size\n       */\n      maxZoom: 10,\n\n      /**\n       *  capture events\n       */\n      event: true,\n\n      /**\n       * group node & edges into different graphic groups\n       */\n      groupByTypes: true,\n\n      /**\n       * determine if it's a directed graph\n       */\n      directed: false,\n\n      /**\n       * when data or shape changed, should canvas draw automatically\n       */\n      autoPaint: true,\n\n      /**\n       * store all the node instances\n       */\n      nodes: [],\n\n      /**\n       * store all the edge instances\n       */\n      edges: [],\n\n      /**\n       * store all the combo instances\n       */\n      combos: [],\n\n      /**\n       * store all the edge instances which are virtual edges related to collapsed combo\n       */\n      vedges: [],\n\n      /**\n       * all the instances indexed by id\n       */\n      itemMap: {},\n\n      /**\n       * 边直接连接到节点的中心，不再考虑锚点\n       */\n      linkCenter: false,\n\n      /**\n       * 默认的节点配置，data 上定义的配置会覆盖这些配置。例如：\n       * defaultNode: {\n       *  type: 'rect',\n       *  size: [60, 40],\n       *  style: {\n       *    //... 样式配置项\n       *  }\n       * }\n       * 若数据项为 { id: 'node', x: 100, y: 100 }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'rect', size: [60, 40] }\n       * 若数据项为 { id: 'node', x: 100, y: 100, type: 'circle' }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'circle', size: [60, 40] }\n       */\n      defaultNode: {},\n\n      /**\n       * 默认边配置，data 上定义的配置会覆盖这些配置。用法同 defaultNode\n       */\n      defaultEdge: {},\n\n      /**\n       * 节点默认样式，也可以添加状态样式\n       * 例如：\n       * const graph = new G6.Graph({\n       *  nodeStateStyles: {\n       *    selected: { fill: '#ccc', stroke: '#666' },\n       *    active: { lineWidth: 2 }\n       *  },\n       *  ...\n       * });\n       *\n       */\n      nodeStateStyles: {},\n\n      /**\n       * 边默认样式，用法同nodeStateStyle\n       */\n      edgeStateStyles: {},\n\n      /**\n       * graph 状态\n       */\n      states: {},\n\n      /**\n       * 是否启用全局动画\n       */\n      animate: false,\n\n      /**\n       * 动画设置,仅在 animate 为 true 时有效\n       */\n      animateCfg: {\n        /**\n         * 帧回调函数，用于自定义节点运动路径，为空时线性运动\n         */\n        onFrame: undefined,\n\n        /**\n         * 动画时长(ms)\n         */\n        duration: 500,\n\n        /**\n         * 指定动画动效\n         */\n        easing: 'easeLinear'\n      },\n      callback: undefined,\n      // 默认不启用 undo & redo 功能\n      enabledStack: false,\n      // 只有当 enabledStack 为 true 时才起作用\n      maxStep: 10,\n      // 存储图上的 tooltip dom，方便销毁\n      tooltips: []\n    };\n  };\n  /**\n   * 将值设置到 this.cfg 变量上面\n   * @param key 键 或 对象值\n   * @param val 值\n   */\n\n\n  AbstractGraph.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this.cfg = __assign(__assign({}, this.cfg), key);\n    } else {\n      this.cfg[key] = val;\n    }\n\n    return this;\n  };\n  /**\n   * 获取 this.cfg 中的值\n   * @param key 键\n   */\n\n\n  AbstractGraph.prototype.get = function (key) {\n    return this.cfg[key];\n  };\n  /**\n   * 获取 graph 的根图形分组\n   * @return 根 group\n   */\n\n\n  AbstractGraph.prototype.getGroup = function () {\n    return this.get('group');\n  };\n  /**\n   * 获取 graph 的 DOM 容器\n   * @return DOM 容器\n   */\n\n\n  AbstractGraph.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 获取 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  AbstractGraph.prototype.getMinZoom = function () {\n    return this.get('minZoom');\n  };\n  /**\n   * 设置 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  AbstractGraph.prototype.setMinZoom = function (ratio) {\n    return this.set('minZoom', ratio);\n  };\n  /**\n   * 获取 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  AbstractGraph.prototype.getMaxZoom = function () {\n    return this.get('maxZoom');\n  };\n  /**\n   * 设置 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  AbstractGraph.prototype.setMaxZoom = function (ratio) {\n    return this.set('maxZoom', ratio);\n  };\n  /**\n   * 获取 graph 的宽度\n   * @return width\n   */\n\n\n  AbstractGraph.prototype.getWidth = function () {\n    return this.get('width');\n  };\n  /**\n   * 获取 graph 的高度\n   * @return width\n   */\n\n\n  AbstractGraph.prototype.getHeight = function () {\n    return this.get('height');\n  };\n  /**\n   * 清理元素多个状态\n   * @param {string|Item} item 元素id或元素实例\n   * @param {string[]} states 状态\n   */\n\n\n  AbstractGraph.prototype.clearItemStates = function (item, states) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n\n    if (!states) {\n      states = item.get('states');\n    }\n\n    itemController.clearItemStates(item, states);\n    var stateController = this.get('stateController');\n    stateController.updateStates(item, states, false);\n  };\n  /**\n   * 设置各个节点样式，以及在各种状态下节点 keyShape 的样式。\n   * 若是自定义节点切在各种状态下\n   * graph.node(node => {\n   *  return {\n   *    type: 'rect',\n   *    label: node.id,\n   *    style: { fill: '#666' },\n   *    stateStyles: {\n   *       selected: { fill: 'blue' },\n   *       custom: { fill: 'green' }\n   *     }\n   *   }\n   * });\n   * @param {function} nodeFn 指定每个节点样式\n   */\n\n\n  AbstractGraph.prototype.node = function (nodeFn) {\n    if (typeof nodeFn === 'function') {\n      this.set('nodeMapper', nodeFn);\n    }\n  };\n  /**\n   * 设置各个边样式\n   * @param {function} edgeFn 指定每个边的样式,用法同 node\n   */\n\n\n  AbstractGraph.prototype.edge = function (edgeFn) {\n    if (typeof edgeFn === 'function') {\n      this.set('edgeMapper', edgeFn);\n    }\n  };\n  /**\n   * 设置各个 combo 的配置\n   * @param comboFn\n   */\n\n\n  AbstractGraph.prototype.combo = function (comboFn) {\n    if (typeof comboFn === 'function') {\n      this.set('comboMapper', comboFn);\n    }\n  };\n  /**\n   * 根据 ID 查询图元素实例\n   * @param id 图元素 ID\n   */\n\n\n  AbstractGraph.prototype.findById = function (id) {\n    return this.get('itemMap')[id];\n  };\n  /**\n   * 根据对应规则查找单个元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {(item: T, index: number) => T} fn 指定规则\n   * @return {T} 元素实例\n   */\n\n\n  AbstractGraph.prototype.find = function (type, fn) {\n    var result;\n    var items = this.get(type + \"s\"); // eslint-disable-next-line consistent-return\n\n    each(items, function (item, i) {\n      if (fn(item, i)) {\n        result = item;\n        return result;\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有满足规则的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} fn 指定规则\n   * @return {array} 元素实例\n   */\n\n\n  AbstractGraph.prototype.findAll = function (type, fn) {\n    var result = [];\n    each(this.get(type + \"s\"), function (item, i) {\n      if (fn(item, i)) {\n        result.push(item);\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有处于指定状态的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} state 状态\n   * @return {object} 元素实例\n   */\n\n\n  AbstractGraph.prototype.findAllByState = function (type, state) {\n    return this.findAll(type, function (item) {\n      return item.hasState(state);\n    });\n  };\n  /**\n   * 平移画布\n   * @param dx 水平方向位移\n   * @param dy 垂直方向位移\n   */\n\n\n  AbstractGraph.prototype.translate = function (dx, dy) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    matrix = transform(matrix, [['t', dx, dy]]);\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'translate',\n      matrix: group.getMatrix()\n    });\n    this.autoPaint();\n  };\n  /**\n   * 平移画布到某点\n   * @param {number} x 水平坐标\n   * @param {number} y 垂直坐标\n   */\n\n\n  AbstractGraph.prototype.moveTo = function (x, y) {\n    var group = this.get('group');\n    move(group, {\n      x: x,\n      y: y\n    });\n    this.emit('viewportchange', {\n      action: 'move',\n      matrix: group.getMatrix()\n    });\n  };\n  /**\n   * 调整视口适应视图\n   * @param {object} padding 四周围边距\n   */\n\n\n  AbstractGraph.prototype.fitView = function (padding) {\n    if (padding) {\n      this.set('fitViewPadding', padding);\n    }\n\n    var viewController = this.get('viewController');\n    viewController.fitView();\n    this.autoPaint();\n  };\n  /**\n   * 调整视口适应视图，不缩放，仅将图 bbox 中心对齐到画布中心\n   */\n\n\n  AbstractGraph.prototype.fitCenter = function () {\n    var viewController = this.get('viewController');\n    viewController.fitCenter();\n    this.autoPaint();\n  };\n  /**\n   * 新增行为\n   * @param {string | ModeOption | ModeType[]} behaviors 添加的行为\n   * @param {string | string[]} modes 添加到对应的模式\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.addBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, true);\n    return this;\n  };\n  /**\n   * 移除行为\n   * @param {string | ModeOption | ModeType[]} behaviors 移除的行为\n   * @param {string | string[]} modes 从指定的模式中移除\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.removeBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, false);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  AbstractGraph.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    var modeController = this.get('modeController');\n    modeController.updateBehavior(behavior, newCfg, mode);\n    return this;\n  };\n  /**\n   * 伸缩窗口\n   * @param ratio 伸缩比例\n   * @param center 以center的x, y坐标为中心缩放\n   */\n\n\n  AbstractGraph.prototype.zoom = function (ratio, center) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n    var minZoom = this.get('minZoom');\n    var maxZoom = this.get('maxZoom');\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (center) {\n      matrix = transform(matrix, [['t', -center.x, -center.y], ['s', ratio, ratio], ['t', center.x, center.y]]);\n    } else {\n      matrix = transform(matrix, [['s', ratio, ratio]]);\n    }\n\n    if (minZoom && matrix[0] < minZoom || maxZoom && matrix[0] > maxZoom) {\n      return;\n    } // matrix = [2, 0, 0, 0, 2, 0, -125, -125, 1];\n\n\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'zoom',\n      matrix: matrix\n    });\n    this.autoPaint();\n  };\n  /**\n   * 伸缩视口到一固定比例\n   * @param {number} toRatio 伸缩比例\n   * @param {Point} center 以center的x, y坐标为中心缩放\n   */\n\n\n  AbstractGraph.prototype.zoomTo = function (toRatio, center) {\n    var ratio = toRatio / this.getZoom();\n    this.zoom(ratio, center);\n  };\n  /**\n   * 将元素移动到视口中心\n   * @param {Item} item 指定元素\n   * @param {boolean} animate 是否带有动画地移动\n   * @param {GraphAnimateConfig} animateCfg 若带有动画，动画的配置项\n   */\n\n\n  AbstractGraph.prototype.focusItem = function (item, animate, animateCfg) {\n    var viewController = this.get('viewController');\n    var isAnimate = false;\n    if (animate) isAnimate = true;else if (animate === undefined) isAnimate = this.get('animate');\n    var curAniamteCfg = {};\n    if (animateCfg) curAniamteCfg = animateCfg;else if (animateCfg === undefined) curAniamteCfg = this.get('animateCfg');\n    viewController.focus(item, isAnimate, curAniamteCfg);\n    this.autoPaint();\n  };\n  /**\n   * 自动重绘\n   * @internal 仅供内部更新机制调用，外部根据需求调用 render 或 paint 接口\n   */\n\n\n  AbstractGraph.prototype.autoPaint = function () {\n    if (this.get('autoPaint')) {\n      this.paint();\n    }\n  };\n  /**\n   * 仅画布重新绘制\n   */\n\n\n  AbstractGraph.prototype.paint = function () {\n    this.emit('beforepaint');\n    this.get('canvas').draw();\n    this.emit('afterpaint');\n  };\n  /**\n   * 将屏幕坐标转换为视口坐标\n   * @param {number} clientX 屏幕x坐标\n   * @param {number} clientY 屏幕y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  AbstractGraph.prototype.getPointByClient = function (clientX, clientY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByClient(clientX, clientY);\n  };\n  /**\n   * 将绘制坐标转换为屏幕坐标\n   * @param {number} x 绘制坐标 x\n   * @param {number} y 绘制坐标 y\n   * @return {Point} 绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getClientByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getClientByPoint(x, y);\n  };\n  /**\n   * 将画布坐标转换为绘制坐标\n   * @param {number} canvasX 画布 x 坐标\n   * @param {number} canvasY 画布 y 坐标\n   * @return {object} 绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getPointByCanvas = function (canvasX, canvasY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByCanvas(canvasX, canvasY);\n  };\n  /**\n   * 将绘制坐标转换为画布坐标\n   * @param {number} x 绘制坐标 x\n   * @param {number} y 绘制坐标 y\n   * @return {object} 画布坐标\n   */\n\n\n  AbstractGraph.prototype.getCanvasByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getCanvasByPoint(x, y);\n  };\n  /**\n   * 获取图内容的中心绘制坐标\n   * @return {object} 中心绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getGraphCenterPoint = function () {\n    var bbox = this.get('group').getCanvasBBox();\n    return {\n      x: (bbox.minX + bbox.maxX) / 2,\n      y: (bbox.minY + bbox.maxY) / 2\n    };\n  };\n  /**\n   * 获取视口中心绘制坐标\n   * @return {object} 视口中心绘制坐标\n   */\n\n\n  AbstractGraph.prototype.getViewPortCenterPoint = function () {\n    return this.getPointByCanvas(this.get('width') / 2, this.get('height') / 2);\n  };\n  /**\n   * 显示元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.showItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, true);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.nodes = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.edges = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.combos = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 隐藏元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.hideItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, false);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.nodes = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.edges = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.combos = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 刷新元素\n   * @param {string|object} item 元素id或元素实例\n   */\n\n\n  AbstractGraph.prototype.refreshItem = function (item) {\n    var itemController = this.get('itemController');\n    itemController.refreshItem(item);\n  };\n  /**\n   * 设置是否在更新/刷新后自动重绘\n   * @param {boolean} auto 自动重绘\n   */\n\n\n  AbstractGraph.prototype.setAutoPaint = function (auto) {\n    var self = this;\n    self.set('autoPaint', auto);\n    var canvas = self.get('canvas');\n    canvas.set('autoDraw', auto);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.remove = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.removeItem(item, stack);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.removeItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var nodeItem = item;\n    if (isString(item)) nodeItem = this.findById(item);\n\n    if (!nodeItem && isString(item)) {\n      console.warn('The item to be removed does not exist!');\n    } else if (nodeItem) {\n      var type = '';\n      if (nodeItem.getType) type = nodeItem.getType(); // 将删除的元素入栈\n\n      if (stack && this.get('enabledStack')) {\n        var deletedModel = __assign(__assign({}, nodeItem.getModel()), {\n          itemType: type\n        });\n\n        var before = {};\n\n        switch (type) {\n          case 'node':\n            {\n              before.nodes = [deletedModel];\n              before.edges = [];\n              var edges = nodeItem.getEdges();\n\n              for (var i = edges.length - 1; i >= 0; i--) {\n                before.edges.push(__assign(__assign({}, edges[i].getModel()), {\n                  itemType: 'edge'\n                }));\n              }\n\n              break;\n            }\n\n          case 'edge':\n            before.edges = [deletedModel];\n            break;\n\n          case 'combo':\n            before.combos = [deletedModel];\n            break;\n\n          default:\n            break;\n        }\n\n        this.pushStack('delete', {\n          before: before,\n          after: {}\n        });\n      }\n\n      if (type === 'node') {\n        var model = nodeItem.getModel(); // 如果删除的是节点，且该节点存在于某个 Combo 中，则需要先将 node 从 combo 中移除，否则删除节点后，操作 combo 会出错\n\n        if (model.comboId) {\n          this.updateComboTree(nodeItem);\n        }\n      }\n\n      var itemController = this.get('itemController');\n      itemController.removeItem(nodeItem);\n\n      if (type === 'combo') {\n        var newComboTrees = reconstructTree(this.get('comboTrees'));\n        this.set('comboTrees', newComboTrees);\n      }\n    }\n  };\n  /**\n   * 新增元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @param {boolean} sortCombo 本次操作是否需要更新 combo 层级顺序，内部参数，用户在外部使用 addItem 时始终时需要更新\n   * @return {Item} 元素实例\n   */\n\n\n  AbstractGraph.prototype.addItem = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    var currentComboSorted = this.get('comboSorted');\n    this.set('comboSorted', currentComboSorted && !sortCombo);\n    var itemController = this.get('itemController');\n\n    if (model.id && this.findById(model.id)) {\n      console.warn(\"This item exists already. Be sure the id %c\" + model.id + \"%c is unique.\", 'font-size: 20px; color: red;', '');\n      return;\n    }\n\n    var item;\n    var comboTrees = this.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n\n    if (type === 'combo') {\n      var itemMap_1 = this.get('itemMap');\n      var foundParent_1 = false;\n      comboTrees.forEach(function (ctree) {\n        if (foundParent_1) return; // terminate the forEach after the tree containing the item is done\n\n        traverseTreeUp(ctree, function (child) {\n          // find the parent\n          if (model.parentId === child.id) {\n            foundParent_1 = true;\n\n            var newCombo = __assign({\n              id: model.id,\n              depth: child.depth + 2\n            }, model);\n\n            if (child.children) child.children.push(newCombo);else child.children = [newCombo];\n            model.depth = newCombo.depth;\n            item = itemController.addItem(type, model);\n          }\n\n          var childItem = itemMap_1[child.id]; // after the parent is found, update all the ancestors\n\n          if (foundParent_1 && childItem && childItem.getType && childItem.getType() === 'combo') {\n            itemController.updateCombo(childItem, child.children);\n          }\n\n          return true;\n        });\n      }); // if the parent is not found, add it to the root\n\n      if (!foundParent_1) {\n        var newCombo = __assign({\n          id: model.id,\n          depth: 0\n        }, model);\n\n        model.depth = newCombo.depth;\n        comboTrees.push(newCombo);\n        item = itemController.addItem(type, model);\n      }\n\n      this.set('comboTrees', comboTrees);\n    } else if (type === 'node' && isString(model.comboId) && comboTrees) {\n      var parentCombo = this.findById(model.comboId);\n\n      if (parentCombo && parentCombo.getType && parentCombo.getType() !== 'combo') {\n        console.warn(\"'\" + model.comboId + \"' is not a id of a combo in the graph, the node will be added without combo.\");\n      }\n\n      item = itemController.addItem(type, model);\n      var itemMap_2 = this.get('itemMap');\n      var foundParent_2 = false,\n          foundNode_1 = false;\n      (comboTrees || []).forEach(function (ctree) {\n        if (foundNode_1 || foundParent_2) return; // terminate the forEach\n\n        traverseTreeUp(ctree, function (child) {\n          if (child.id === model.id) {\n            // if the item exists in the tree already, terminate\n            foundNode_1 = true;\n            return false;\n          }\n\n          if (model.comboId === child.id && !foundNode_1) {\n            // found the parent, add the item to the children of its parent in the tree\n            foundParent_2 = true;\n            var cloneNode = clone(model);\n            cloneNode.itemType = 'node';\n            if (child.children) child.children.push(cloneNode);else child.children = [cloneNode];\n            model.depth = child.depth + 1;\n          } // update the size of all the ancestors\n\n\n          if (foundParent_2 && itemMap_2[child.id].getType && itemMap_2[child.id].getType() === 'combo') {\n            itemController.updateCombo(itemMap_2[child.id], child.children);\n          }\n\n          return true;\n        });\n      });\n    } else {\n      item = itemController.addItem(type, model);\n    }\n\n    if (type === 'node' && model.comboId || type === 'combo' && model.parentId) {\n      // add the combo to the parent's children array\n      var parentCombo = this.findById(model.comboId || model.parentId);\n      if (parentCombo && parentCombo.getType && parentCombo.getType() === 'combo') parentCombo.addChild(item);\n    }\n\n    var combos = this.get('combos');\n\n    if (combos && combos.length > 0) {\n      this.sortCombos();\n    }\n\n    this.autoPaint();\n\n    if (stack && this.get('enabledStack')) {\n      var addedModel = __assign(__assign({}, item.getModel()), {\n        itemType: type\n      });\n\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          after.nodes = [addedModel];\n          break;\n\n        case 'edge':\n          after.edges = [addedModel];\n          break;\n\n        case 'combo':\n          after.combos = [addedModel];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('add', {\n        before: {},\n        after: after\n      });\n    }\n\n    return item;\n  };\n  /**\n   * 新增元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @return {Item} 元素实例\n   */\n\n\n  AbstractGraph.prototype.add = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    return this.addItem(type, model, stack, sortCombo);\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   */\n\n\n  AbstractGraph.prototype.updateItem = function (item, cfg, stack) {\n    var _this = this;\n\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var currentItem;\n\n    if (isString(item)) {\n      currentItem = this.findById(item);\n    } else {\n      currentItem = item;\n    }\n\n    var UnupdateModel = clone(currentItem.getModel());\n    var type = '';\n    if (currentItem.getType) type = currentItem.getType();\n\n    var states = __spreadArray([], currentItem.getStates());\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, false);\n      });\n    }\n\n    itemController.updateItem(currentItem, cfg);\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, true);\n      });\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var before = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n      var after = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n\n      var afterModel = __assign({\n        id: UnupdateModel.id\n      }, cfg);\n\n      switch (type) {\n        case 'node':\n          before.nodes.push(UnupdateModel);\n          after.nodes.push(afterModel);\n          break;\n\n        case 'edge':\n          before.edges.push(UnupdateModel);\n          after.edges.push(afterModel);\n          break;\n\n        case 'combo':\n          before.combos.push(UnupdateModel);\n          after.combos.push(afterModel);\n          break;\n\n        default:\n          break;\n      }\n\n      if (type === 'node') {\n        before.nodes.push(UnupdateModel);\n      }\n\n      this.pushStack('update', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  AbstractGraph.prototype.update = function (item, cfg, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.updateItem(item, cfg, stack);\n  };\n  /**\n   * 设置元素状态\n   * @param {Item} item 元素id或元素实例\n   * @param {string} state 状态名称\n   * @param {string | boolean} value 是否启用状态 或 状态值\n   */\n\n\n  AbstractGraph.prototype.setItemState = function (item, state, value) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n    itemController.setItemState(item, state, value);\n    var stateController = this.get('stateController');\n\n    if (isString(value)) {\n      stateController.updateState(item, state + \":\" + value, true);\n    } else {\n      stateController.updateState(item, state, value);\n    }\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  AbstractGraph.prototype.priorityState = function (item, state) {\n    var itemController = this.get('itemController');\n    itemController.priorityState(item, state);\n  };\n  /**\n   * 设置视图初始化数据\n   * @param {GraphData} data 初始化数据\n   */\n\n\n  AbstractGraph.prototype.data = function (data) {\n    this.set('data', data);\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  AbstractGraph.prototype.render = function () {\n    var self = this;\n    this.set('comboSorted', false);\n    var data = this.get('data');\n\n    if (this.get('enabledStack')) {\n      // render 之前清空 redo 和 undo 栈\n      this.clearStack();\n    }\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    var _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a,\n        _b = data.edges,\n        edges = _b === void 0 ? [] : _b,\n        _c = data.combos,\n        combos = _c === void 0 ? [] : _c;\n    this.clear(true);\n    this.emit('beforerender');\n    each(nodes, function (node) {\n      self.add('node', node, false, false);\n    }); // process the data to tree structure\n\n    if (combos && combos.length !== 0) {\n      var comboTrees = plainCombosToTrees(combos, nodes);\n      this.set('comboTrees', comboTrees); // add combos\n\n      self.addCombos(combos);\n    }\n\n    each(edges, function (edge) {\n      self.add('edge', edge, false, false);\n    });\n    var animate = self.get('animate');\n\n    if (self.get('fitView') || self.get('fitCenter')) {\n      self.set('animate', false);\n    } // layout\n\n\n    var layoutController = self.get('layoutController');\n\n    if (layoutController) {\n      layoutController.layout(success);\n      if (this.destroyed) return;\n    } else {\n      if (self.get('fitView')) {\n        self.fitView();\n      }\n\n      if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.emit('afterrender');\n      self.set('animate', animate);\n    } // 将在 onLayoutEnd 中被调用\n\n\n    function success() {\n      // fitView 与 fitCenter 共存时，fitView 优先，fitCenter 不再执行\n      if (self.get('fitView')) {\n        self.fitView();\n      } else if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.autoPaint();\n      self.emit('afterrender');\n\n      if (self.get('fitView') || self.get('fitCenter')) {\n        self.set('animate', animate);\n      }\n    }\n\n    if (!this.get('groupByTypes')) {\n      if (combos && combos.length !== 0) {\n        this.sortCombos();\n      } else {\n        // 为提升性能，选择数量少的进行操作\n        if (data.nodes && data.edges && data.nodes.length < data.edges.length) {\n          var nodesArr = this.getNodes(); // 遍历节点实例，将所有节点提前。\n\n          nodesArr.forEach(function (node) {\n            node.toFront();\n          });\n        } else {\n          var edgesArr = this.getEdges(); // 遍历节点实例，将所有节点提前。\n\n          edgesArr.forEach(function (edge) {\n            edge.toBack();\n          });\n        }\n      }\n    }\n\n    if (this.get('enabledStack')) {\n      this.pushStack('render');\n    }\n  };\n  /**\n   * 接收数据进行渲染\n   * @Param {Object} data 初始化数据\n   */\n\n\n  AbstractGraph.prototype.read = function (data) {\n    this.data(data);\n    this.render();\n  }; // 比较item\n\n\n  AbstractGraph.prototype.diffItems = function (type, items, models) {\n    var self = this;\n    var item;\n    var itemMap = this.get('itemMap');\n    each(models, function (model) {\n      item = itemMap[model.id];\n\n      if (item) {\n        if (self.get('animate') && type === NODE) {\n          var containerMatrix = item.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          item.set('originAttrs', {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          });\n        }\n\n        self.updateItem(item, model, false);\n      } else {\n        item = self.addItem(type, model, false);\n      }\n\n      if (item) items[type + \"s\"].push(item);\n    });\n  };\n  /**\n   * 更改源数据，根据新数据重新渲染视图\n   * @param {GraphData | TreeGraphData} data 源数据\n   * @param {boolean} 是否入栈，默认为true\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.changeData = function (data, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n\n    if (!data) {\n      return this;\n    }\n\n    if (stack && this.get('enabledStack')) {\n      this.pushStack('changedata', {\n        before: self.save(),\n        after: data\n      });\n    }\n\n    this.set('comboSorted', false); // 删除 hulls\n\n    this.removeHulls(); // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    var canvas = this.get('canvas');\n    var localRefresh = canvas.get('localRefresh');\n    canvas.set('localRefresh', false);\n\n    if (!self.get('data')) {\n      self.data(data);\n      self.render();\n    }\n\n    var itemMap = this.get('itemMap');\n    var items = {\n      nodes: [],\n      edges: []\n    };\n    var combosData = data.combos;\n\n    if (combosData) {\n      var comboTrees = plainCombosToTrees(combosData, data.nodes);\n      this.set('comboTrees', comboTrees);\n    }\n\n    this.diffItems('node', items, data.nodes);\n    each(itemMap, function (item, id) {\n      itemMap[id].getModel().depth = 0;\n      if (item.getType && item.getType() === 'edge') return;\n\n      if (item.getType && item.getType() === 'combo') {\n        delete itemMap[id];\n        item.destroy();\n      } else if (items.nodes.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    }); // clear the destroyed combos here to avoid removing sub nodes before removing the parent combo\n\n    var comboItems = this.getCombos();\n    var combosLength = comboItems.length;\n\n    for (var i = combosLength - 1; i >= 0; i--) {\n      if (comboItems[i].destroyed) {\n        comboItems.splice(i, 1);\n      }\n    } // process the data to tree structure\n\n\n    if (combosData) {\n      // add combos\n      self.addCombos(combosData);\n\n      if (!this.get('groupByTypes')) {\n        this.sortCombos();\n      }\n    }\n\n    this.diffItems('edge', items, data.edges);\n    each(itemMap, function (item, id) {\n      if (item.getType && (item.getType() === 'node' || item.getType() === 'combo')) return;\n\n      if (items.edges.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    });\n    this.set({\n      nodes: items.nodes,\n      edges: items.edges\n    });\n    var layoutController = this.get('layoutController');\n\n    if (layoutController) {\n      layoutController.changeData();\n\n      if (self.get('animate') && !layoutController.getLayoutType()) {\n        // 如果没有指定布局\n        self.positionsAnimate();\n      } else {\n        self.autoPaint();\n      }\n    }\n\n    setTimeout(function () {\n      canvas.set('localRefresh', localRefresh);\n    }, 16);\n    return this;\n  };\n  /**\n   * 私有方法，在 render 和 changeData 的时候批量添加数据中所有平铺的 combos\n   * @param {ComboConfig[]} combos 平铺的 combos 数据\n   */\n\n\n  AbstractGraph.prototype.addCombos = function (combos) {\n    var self = this;\n    var comboTrees = self.get('comboTrees');\n    var itemController = this.get('itemController');\n    itemController.addCombos(comboTrees, combos);\n  };\n  /**\n   * 根据已经存在的节点或 combo 创建新的 combo\n   * @param combo combo ID 或 Combo 配置\n   * @param children 添加到 Combo 中的元素，包括节点和 combo\n   */\n\n\n  AbstractGraph.prototype.createCombo = function (combo, children) {\n    var _this = this;\n\n    this.set('comboSorted', false); // step 1: 创建新的 Combo\n\n    var comboId = '';\n    var comboConfig;\n    if (!combo) return;\n\n    if (isString(combo)) {\n      comboId = combo;\n      comboConfig = {\n        id: combo\n      };\n    } else {\n      comboId = combo.id;\n\n      if (!comboId) {\n        console.warn('Create combo failed. Please assign a unique string id for the adding combo.');\n        return;\n      }\n\n      comboConfig = combo;\n    }\n\n    var trees = children.map(function (elementId) {\n      var item = _this.findById(elementId);\n\n      var type = '';\n      if (item.getType) type = item.getType();\n      var cItem = {\n        id: item.getID(),\n        itemType: type\n      };\n\n      if (type === 'combo') {\n        cItem.parentId = comboId;\n      } else if (type === 'node') {\n        cItem.comboId = comboId;\n      }\n\n      return cItem;\n    });\n    comboConfig.children = trees; // step 2: 添加 Combo，addItem 时会将子将元素添加到 Combo 中\n\n    this.addItem('combo', comboConfig, false);\n    this.set('comboSorted', false); // step3: 更新 comboTrees 结构\n\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (child.id === comboId) {\n          child.itemType = 'combo';\n          child.children = trees;\n          return false;\n        }\n\n        return true;\n      });\n    });\n\n    if (comboTrees) {\n      this.sortCombos();\n    }\n  };\n  /**\n   * 解散 combo\n   * @param {String | INode | ICombo} combo 需要被解散的 Combo item 或 id\n   */\n\n\n  AbstractGraph.prototype.uncombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item is not a combo!');\n      return;\n    }\n\n    var parentId = comboItem.getModel().parentId;\n    var comboTrees = self.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n    var itemMap = this.get('itemMap');\n    var comboId = comboItem.get('id');\n    var treeToBeUncombo;\n    var brothers = [];\n    var comboItems = this.get('combos');\n    var parentItem = this.findById(parentId);\n    comboTrees.forEach(function (ctree) {\n      if (treeToBeUncombo) return; // terminate the forEach\n\n      traverseTreeUp(ctree, function (subtree) {\n        // find the combo to be uncomboed, delete the combo from map and cache\n        if (subtree.id === comboId) {\n          treeToBeUncombo = subtree; // delete the related edges\n\n          var edges = comboItem.getEdges();\n          edges.forEach(function (edge) {\n            _this.removeItem(edge, false);\n          });\n          var index = comboItems.indexOf(combo);\n          comboItems.splice(index, 1);\n          delete itemMap[comboId];\n          comboItem.destroy();\n        } // find the parent to remove the combo from the combo's brothers array and add the combo's children to the combo's brothers array in the tree\n\n\n        if (parentId && treeToBeUncombo && subtree.id === parentId) {\n          parentItem.removeCombo(comboItem);\n          brothers = subtree.children; // the combo's brothers\n          // remove the combo from its brothers array\n\n          var index = brothers.indexOf(treeToBeUncombo);\n\n          if (index !== -1) {\n            brothers.splice(index, 1);\n          } // append the combo's children to the combo's brothers array\n\n\n          treeToBeUncombo.children.forEach(function (child) {\n            var item = _this.findById(child.id);\n\n            var childModel = item.getModel();\n\n            if (item.getType && item.getType() === 'combo') {\n              child.parentId = parentId;\n              delete child.comboId;\n              childModel.parentId = parentId; // update the parentId of the model\n\n              delete childModel.comboId;\n            } else if (item.getType && item.getType() === 'node') {\n              child.comboId = parentId;\n              childModel.comboId = parentId; // update the parentId of the model\n            }\n\n            parentItem.addChild(item);\n            brothers.push(child);\n          });\n          return false;\n        }\n\n        return true;\n      });\n    }); // if the parentId is not found, remove the combo from the roots\n\n    if (!parentId && treeToBeUncombo) {\n      var index = comboTrees.indexOf(treeToBeUncombo);\n      comboTrees.splice(index, 1); // modify the parentId of the children\n\n      treeToBeUncombo.children.forEach(function (child) {\n        child.parentId = undefined;\n\n        var childModel = _this.findById(child.id).getModel();\n\n        childModel.parentId = undefined; // update the parentId of the model\n\n        if (child.itemType !== 'node') comboTrees.push(child);\n      });\n    }\n  };\n  /**\n   * 根据节点的 bbox 更新所有 combos 的绘制，包括 combos 的位置和范围\n   */\n\n\n  AbstractGraph.prototype.updateCombos = function () {\n    var _this = this;\n\n    var self = this;\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArray([], childItem.getStates());\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, false);\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, true);\n          });\n        }\n\n        return true;\n      });\n    });\n    self.sortCombos();\n  };\n  /**\n   * 根据节点的 bbox 更新 combo 及其祖先 combos 的绘制，包括 combos 的位置和范围\n   * @param {String | ICombo} combo 需要被更新的 Combo 或 id，若指定，则该 Combo 及所有祖先 Combod 都会被更新\n   */\n\n\n  AbstractGraph.prototype.updateCombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n    var comboId;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item to be updated is not a combo!');\n      return;\n    }\n\n    comboId = comboItem.get('id');\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (comboId === child.id && childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArray([], childItem.getStates()); // || !item.getStateStyle(stateName)\n\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, false);\n            }\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, true);\n            }\n          });\n          if (comboId) comboId = child.parentId;\n        }\n\n        return true;\n      });\n    });\n  };\n  /**\n   * 更新树结构，例如移动子树等\n   * @param {String | INode | ICombo} item 需要被更新的 Combo 或 节点 id\n   * @param {string | undefined} parentId 新的父 combo id，undefined 代表没有父 combo\n   */\n\n\n  AbstractGraph.prototype.updateComboTree = function (item, parentId, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n    this.set('comboSorted', false);\n    var uItem;\n\n    if (isString(item)) {\n      uItem = self.findById(item);\n    } else {\n      uItem = item;\n    }\n\n    var model = uItem.getModel();\n    var oldParentId = model.comboId || model.parentId;\n    var type = '';\n    if (uItem.getType) type = uItem.getType(); // 若 item 是 Combo，且 parentId 是其子孙 combo 的 id，则警告并终止\n\n    if (parentId && type === 'combo') {\n      var comboTrees = this.get('comboTrees');\n      var valid_1 = true;\n      var itemSubTree_1;\n      (comboTrees || []).forEach(function (ctree) {\n        if (itemSubTree_1) return;\n        traverseTree(ctree, function (subTree) {\n          if (itemSubTree_1) return; // 找到从 item 开始的子树\n\n          if (subTree.id === uItem.getID()) {\n            itemSubTree_1 = subTree;\n          }\n\n          return true;\n        });\n      }); // 在以 item 为根的子树中寻找与 parentId 相同的后继元素\n\n      traverseTree(itemSubTree_1, function (subTree) {\n        if (subTree.id === parentId) {\n          valid_1 = false;\n          return false;\n        }\n\n        return true;\n      }); // parentId 是 item 的一个后继元素，不能进行更新\n\n      if (!valid_1) {\n        console.warn('Failed to update the combo tree! The parentId points to a descendant of the combo!');\n        return;\n      }\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var beforeData = {},\n          afterData = {};\n\n      if (type === 'combo') {\n        beforeData.combos = [{\n          id: model.id,\n          parentId: model.parentId\n        }];\n        afterData.combos = [{\n          id: model.id,\n          parentId: parentId\n        }];\n      } else if (type === 'node') {\n        beforeData.nodes = [{\n          id: model.id,\n          parentId: model.comboId\n        }];\n        afterData.nodes = [{\n          id: model.id,\n          parentId: parentId\n        }];\n      }\n\n      this.pushStack('updateComboTree', {\n        before: beforeData,\n        after: afterData\n      });\n    } // 当 combo 存在 parentId 或 comboId 时，才将其移除\n\n\n    if (model.parentId || model.comboId) {\n      var combo = this.findById(model.parentId || model.comboId);\n\n      if (combo) {\n        combo.removeChild(uItem);\n      }\n    }\n\n    if (type === 'combo') {\n      model.parentId = parentId;\n    } else if (type === 'node') {\n      model.comboId = parentId;\n    } // 只有当移入到指定 combo 时才添加\n\n\n    if (parentId) {\n      var parentCombo = this.findById(parentId);\n\n      if (parentCombo) {\n        // 将元素添加到 parentCombo 中\n        parentCombo.addChild(uItem);\n      }\n    } // 如果原先有父亲 combo，则从原父 combo 的子元素数组中删除\n\n\n    if (oldParentId) {\n      var parentCombo = this.findById(oldParentId);\n\n      if (parentCombo) {\n        // 将元素从 parentCombo 中移除\n        parentCombo.removeChild(uItem);\n      }\n    }\n\n    var newComboTrees = reconstructTree(this.get('comboTrees'), model.id, parentId);\n    this.set('comboTrees', newComboTrees);\n    this.updateCombos();\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  AbstractGraph.prototype.save = function () {\n    var nodes = [];\n    var edges = [];\n    var combos = [];\n    each(this.get('nodes'), function (node) {\n      nodes.push(node.getModel());\n    });\n    each(this.get('edges'), function (edge) {\n      edges.push(edge.getModel());\n    });\n    each(this.get('combos'), function (combo) {\n      combos.push(combo.getModel());\n    });\n    return {\n      nodes: nodes,\n      edges: edges,\n      combos: combos\n    };\n  };\n  /**\n   * 改变画布大小\n   * @param  {number} width  画布宽度\n   * @param  {number} height 画布高度\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.changeSize = function (width, height) {\n    var viewController = this.get('viewController');\n    viewController.changeSize(width, height);\n    return this;\n  };\n  /**\n   * 当源数据在外部发生变更时，根据新数据刷新视图。但是不刷新节点位置\n   */\n\n\n  AbstractGraph.prototype.refresh = function () {\n    var self = this;\n    self.emit('beforegraphrefresh');\n\n    if (self.get('animate')) {\n      self.positionsAnimate();\n    } else {\n      var nodes = self.get('nodes');\n      var edges = self.get('edges');\n      var vedges = self.get('edges');\n      each(nodes, function (node) {\n        node.refresh();\n      });\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n      each(vedges, function (vedge) {\n        vedge.refresh();\n      });\n    }\n\n    self.emit('aftergraphrefresh');\n    self.autoPaint();\n  };\n  /**\n   * 获取当前图中所有节点的item实例\n   * @return {INode} item数组\n   */\n\n\n  AbstractGraph.prototype.getNodes = function () {\n    return this.get('nodes');\n  };\n  /**\n   * 获取当前图中所有边的item实例\n   * @return {IEdge} item数组\n   */\n\n\n  AbstractGraph.prototype.getEdges = function () {\n    return this.get('edges');\n  };\n  /**\n   * 获取图中所有的 combo 实例\n   */\n\n\n  AbstractGraph.prototype.getCombos = function () {\n    return this.get('combos');\n  };\n  /**\n   * 获取指定 Combo 中所有的节点\n   * @param comboId combo ID\n   */\n\n\n  AbstractGraph.prototype.getComboChildren = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo does not exist!');\n      return;\n    }\n\n    return combo.getChildren();\n  };\n  /**\n   * 根据 graph 上的 animateCfg 进行视图中节点位置动画接口\n   */\n\n\n  AbstractGraph.prototype.positionsAnimate = function () {\n    var self = this;\n    self.emit('beforeanimate');\n    var animateCfg = self.get('animateCfg');\n    var onFrame = animateCfg.onFrame;\n    var nodes = self.getNodes();\n    var toNodes = nodes.map(function (node) {\n      var model = node.getModel();\n      return {\n        id: model.id,\n        x: model.x,\n        y: model.y\n      };\n    });\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    canvas.animate(function (ratio) {\n      each(toNodes, function (data) {\n        var node = self.findById(data.id);\n\n        if (!node || node.destroyed) {\n          return;\n        }\n\n        var originAttrs = node.get('originAttrs');\n        var model = node.get('model');\n\n        if (!originAttrs) {\n          var containerMatrix = node.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          originAttrs = {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          };\n          node.set('originAttrs', originAttrs);\n        }\n\n        if (onFrame) {\n          var attrs = onFrame(node, ratio, data, originAttrs);\n          node.set('model', Object.assign(model, attrs));\n        } else {\n          model.x = originAttrs.x + (data.x - originAttrs.x) * ratio;\n          model.y = originAttrs.y + (data.y - originAttrs.y) * ratio;\n        }\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.easing,\n      callback: function callback() {\n        each(nodes, function (node) {\n          node.set('originAttrs', null);\n        });\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate');\n        self.animating = false;\n      }\n    });\n  };\n  /**\n   * 当节点位置在外部发生改变时，刷新所有节点位置，重计算边\n   */\n\n\n  AbstractGraph.prototype.refreshPositions = function () {\n    var self = this;\n    self.emit('beforegraphrefreshposition');\n    var nodes = self.get('nodes');\n    var edges = self.get('edges');\n    var vedges = self.get('vedges');\n    var combos = self.get('combos');\n    var model;\n    var updatedNodes = {};\n    var nodeChangeMap = {};\n    each(nodes, function (node) {\n      model = node.getModel();\n      var originAttrs = node.get('originAttrs');\n\n      if (originAttrs && model.x === originAttrs.x && model.y === originAttrs.y) {\n        return;\n      }\n\n      var changed = node.updatePosition({\n        x: model.x,\n        y: model.y\n      });\n      updatedNodes[model.id] = changed;\n      if (model.comboId) updatedNodes[model.comboId] = updatedNodes[model.comboId] || changed;\n    });\n\n    if (combos && combos.length !== 0) {\n      self.updateCombos();\n    }\n\n    each(edges, function (edge) {\n      var sourceModel = edge.getSource().getModel();\n      var targetModel = edge.getTarget().getModel();\n\n      if (updatedNodes[sourceModel.id] || updatedNodes[targetModel.id] || edge.getModel().isComboEdge) {\n        edge.refresh();\n      }\n    });\n    each(vedges, function (vedge) {\n      vedge.refresh();\n    });\n    self.emit('aftergraphrefreshposition');\n    self.autoPaint();\n  };\n\n  AbstractGraph.prototype.stopAnimate = function () {\n    this.get('canvas').stopAnimate();\n  };\n\n  AbstractGraph.prototype.isAnimating = function () {\n    return this.animating;\n  };\n  /**\n   * 获取当前视口伸缩比例\n   * @return {number} 比例\n   */\n\n\n  AbstractGraph.prototype.getZoom = function () {\n    var matrix = this.get('group').getMatrix();\n    return matrix ? matrix[0] : 1;\n  };\n  /**\n   * 获取当前的行为模式\n   * @return {string} 当前行为模式\n   */\n\n\n  AbstractGraph.prototype.getCurrentMode = function () {\n    var modeController = this.get('modeController');\n    return modeController.getMode();\n  };\n  /**\n   * 切换行为模式\n   * @param {string} mode 指定模式\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.setMode = function (mode) {\n    var modeController = this.get('modeController');\n    modeController.setMode(mode);\n    return this;\n  };\n  /**\n   * 清除画布元素\n   * @return {object} this\n   */\n\n\n  AbstractGraph.prototype.clear = function (avoidEmit) {\n    if (avoidEmit === void 0) {\n      avoidEmit = false;\n    }\n\n    var canvas = this.get('canvas');\n    canvas.clear();\n    this.initGroups(); // 清空画布时同时清除数据\n\n    this.set({\n      itemMap: {},\n      nodes: [],\n      edges: [],\n      groups: [],\n      combos: [],\n      comboTrees: []\n    });\n    if (!avoidEmit) this.emit('afterrender');\n    return this;\n  };\n  /**\n   * 更换布局配置项\n   * @param {object} cfg 新布局配置项\n   * 若 cfg 含有 type 字段或为 String 类型，且与现有布局方法不同，则更换布局\n   * 若 cfg 不包括 type ，则保持原有布局方法，仅更新布局配置项\n   */\n\n\n  AbstractGraph.prototype.updateLayout = function (cfg) {\n    var layoutController = this.get('layoutController');\n\n    if (isString(cfg)) {\n      cfg = {\n        type: cfg\n      };\n    }\n\n    var oriLayoutCfg = this.get('layout');\n    var layoutCfg = {};\n    Object.assign(layoutCfg, oriLayoutCfg, cfg);\n    this.set('layout', layoutCfg);\n\n    if (layoutController.isLayoutTypeSame(layoutCfg) && layoutCfg.gpuEnabled === oriLayoutCfg.gpuEnabled) {\n      // no type or same type, or switch the gpu and cpu, update layout\n      layoutController.updateLayoutCfg(layoutCfg);\n    } else {\n      // has different type, change layout\n      layoutController.changeLayout(layoutCfg);\n    }\n  };\n  /**\n   * 销毁布局，changeData 时不会再使用原来的布局方法对新数据进行布局\n   */\n\n\n  AbstractGraph.prototype.destroyLayout = function () {\n    var layoutController = this.get('layoutController');\n    layoutController.destroyLayout();\n  };\n  /**\n   * 重新以当前示例中配置的属性进行一次布局\n   */\n\n\n  AbstractGraph.prototype.layout = function () {\n    var layoutController = this.get('layoutController');\n    var layoutCfg = this.get('layout');\n    if (!layoutCfg || !layoutController) return;\n\n    if (layoutCfg.workerEnabled) {\n      // 如果使用web worker布局\n      layoutController.layout();\n      return;\n    }\n\n    if (layoutController.layoutMethod) {\n      layoutController.relayout(true);\n    } else {\n      layoutController.layout();\n    }\n  };\n  /**\n   * 收起指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  AbstractGraph.prototype.collapseCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo) {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    this.emit('beforecollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.collapseCombo(combo);\n    comboModel.collapsed = true; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate the forEach\n\n      traverseTree(ctree, function (subTree) {\n        // if the combo is found and the it is traversing the other brothers, terminate\n        if (found && brothers[subTree.id]) return false;\n\n        if (comboModel.parentId === subTree.id) {\n          // if the parent is found, store the brothers\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          // if the combo is found\n          found = true;\n        }\n\n        if (found) {\n          // if the combo is found, concat the descendant nodes and combos\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = [];\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || source.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel();\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.parentId || targetModel.comboId);\n          if (!target || !targetModel.parentId && !targetModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          targetModel = target.getModel();\n        }\n\n        var targetId = targetModel.id;\n\n        if (edgeWeightMap[comboModel.id + \"-\" + targetId]) {\n          edgeWeightMap[comboModel.id + \"-\" + targetId] += edgeModel.size || 1;\n          return;\n        } // the source is in the combo, the target is not\n\n\n        var vedge = _this.addItem('vedge', {\n          source: comboModel.id,\n          target: targetId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[comboModel.id + \"-\" + targetId] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || target.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel();\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.parentId || sourceModel.comboId);\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          sourceModel = source.getModel();\n        }\n\n        var sourceId = sourceModel.id;\n\n        if (edgeWeightMap[sourceId + \"-\" + comboModel.id]) {\n          edgeWeightMap[sourceId + \"-\" + comboModel.id] += edgeModel.size || 1;\n          return;\n        } // the target is in the combo, the source is not\n\n\n        var vedge = _this.addItem('vedge', {\n          target: comboModel.id,\n          source: sourceId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[sourceId + \"-\" + comboModel.id] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      }\n    }); // update the width of the virtual edges, which is the sum of merged actual edges\n    // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n    addedVEdges.forEach(function (vedge) {\n      var vedgeModel = vedge.getModel();\n\n      _this.updateItem(vedge, {\n        size: edgeWeightMap[vedgeModel.source + \"-\" + vedgeModel.target]\n      }, false);\n    });\n    this.emit('aftercollapseexpandcombo', {\n      action: 'collapse',\n      item: combo\n    });\n  };\n  /**\n   * 展开指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  AbstractGraph.prototype.expandCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    this.emit('beforecollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.expandCombo(combo);\n    comboModel.collapsed = false; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate\n\n      traverseTree(ctree, function (subTree) {\n        if (found && brothers[subTree.id]) {\n          return false;\n        }\n\n        if (comboModel.parentId === subTree.id) {\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          found = true;\n        }\n\n        if (found) {\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = {};\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n      var sourceId = source.get('id');\n      var targetId = target.get('id');\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || sourceId === comboModel.id) {\n        // the source is in the combo, the target is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (sourceModel.comboId === comboModel.id || sourceModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n\n        if (targetId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            source: sourceId,\n            target: targetId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || targetId === comboModel.id) {\n        // the target is in the combo, the source is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (targetModel.comboId === comboModel.id || targetModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n\n        if (sourceId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            target: targetId,\n            source: sourceId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if ((cnodes.includes(source) || ccombos.includes(source)) && (cnodes.includes(target) || ccombos.includes(target))) {\n        // both source and target are in the combo, if the target and source are both visible, show the edge\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      }\n    });\n    this.emit('aftercollapseexpandcombo', {\n      action: 'expand',\n      item: combo\n    });\n  };\n\n  AbstractGraph.prototype.collapseExpandCombo = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (combo.getType && combo.getType() !== 'combo') return;\n    var comboModel = combo.getModel(); // if one ancestor combo of the combo is collapsed, it should not be collapsed or expanded\n\n    var parentItem = this.findById(comboModel.parentId);\n\n    while (parentItem) {\n      var parentModel = parentItem.getModel();\n\n      if (parentModel.collapsed) {\n        console.warn(\"Fail to expand the combo since it's ancestor combo is collapsed.\");\n        parentItem = undefined;\n        return;\n      }\n\n      parentItem = this.findById(parentModel.parentId);\n    }\n\n    var collapsed = comboModel.collapsed; // 该群组已经处于收起状态，需要展开\n\n    if (collapsed) {\n      this.expandCombo(combo);\n    } else {\n      this.collapseCombo(combo);\n    }\n\n    this.updateCombo(combo);\n  };\n  /**\n   * 根据 comboTree 结构整理 Combo 相关的图形绘制层级，包括 Combo 本身、节点、边\n   * @param {GraphData} data 数据\n   */\n\n\n  AbstractGraph.prototype.sortCombos = function () {\n    var _this = this;\n\n    var comboSorted = this.get('comboSorted');\n    if (comboSorted) return;\n    this.set('comboSorted', true);\n    var depthMap = [];\n    var dataDepthMap = {};\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (cTree) {\n      traverseTree(cTree, function (child) {\n        if (depthMap[child.depth]) depthMap[child.depth].push(child.id);else depthMap[child.depth] = [child.id];\n        dataDepthMap[child.id] = child.depth;\n        return true;\n      });\n    });\n    var edges = this.getEdges().concat(this.get('vedges'));\n    (edges || []).forEach(function (edgeItem) {\n      var edge = edgeItem.getModel();\n      var sourceDepth = dataDepthMap[edge.source] || 0;\n      var targetDepth = dataDepthMap[edge.target] || 0;\n      var depth = Math.max(sourceDepth, targetDepth);\n      if (depthMap[depth]) depthMap[depth].push(edge.id);else depthMap[depth] = [edge.id];\n    });\n    depthMap.forEach(function (array) {\n      if (!array || !array.length) return;\n\n      for (var i = array.length - 1; i >= 0; i--) {\n        var item = _this.findById(array[i]);\n\n        if (item) item.toFront();\n      }\n    });\n  };\n  /**\n   * 获取节点所有的邻居节点\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @returns {INode[]}\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getNeighbors = function (node, type) {\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    return item.getNeighbors(type);\n  };\n  /**\n   * 获取 node 的度数\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @param {('in' | 'out' | 'total' | 'all' | undefined)} 度数类型，in 入度，out 出度，total 总度数，all 返回三种类型度数的对象\n   * @returns {Number | Object} 该节点的度数\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getNodeDegree = function (node, type, refresh) {\n    if (type === void 0) {\n      type = undefined;\n    }\n\n    if (refresh === void 0) {\n      refresh = false;\n    }\n\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    var degrees = this.get('degrees');\n\n    if (!degrees || refresh) {\n      degrees = getDegree(this.save());\n      this.set('degrees', degrees);\n    }\n\n    var nodeDegrees = degrees[item.getID()];\n    var res = 0; // 如果是通过 addItem 后面新增加的节点，此时它的所有度数都为 0\n\n    if (!nodeDegrees) {\n      return 0;\n    }\n\n    switch (type) {\n      case 'in':\n        res = nodeDegrees.inDegree;\n        break;\n\n      case 'out':\n        res = nodeDegrees.outDegree;\n        break;\n\n      case 'all':\n        res = nodeDegrees;\n        break;\n\n      default:\n        res = nodeDegrees.degree;\n        break;\n    }\n\n    return res;\n  };\n\n  AbstractGraph.prototype.getUndoStack = function () {\n    return this.undoStack;\n  };\n\n  AbstractGraph.prototype.getRedoStack = function () {\n    return this.redoStack;\n  };\n  /**\n   * 获取 undo 和 redo 栈的数据\n   */\n\n\n  AbstractGraph.prototype.getStackData = function () {\n    if (!this.get('enabledStack')) {\n      return null;\n    }\n\n    return {\n      undoStack: this.undoStack.toArray(),\n      redoStack: this.redoStack.toArray()\n    };\n  };\n  /**\n   * 清空 undo stack & redo stack\n   */\n\n\n  AbstractGraph.prototype.clearStack = function () {\n    if (this.get('enabledStack')) {\n      this.undoStack.clear();\n      this.redoStack.clear();\n    }\n  };\n  /**\n   * 将操作类型和操作数据入栈\n   * @param action 操作类型\n   * @param data 入栈的数据\n   * @param stackType 栈的类型\n   */\n\n\n  AbstractGraph.prototype.pushStack = function (action, data, stackType) {\n    if (action === void 0) {\n      action = 'update';\n    }\n\n    if (stackType === void 0) {\n      stackType = 'undo';\n    }\n\n    if (!this.get('enabledStack')) {\n      console.warn('请先启用 undo & redo 功能，在实例化 Graph 时候配置 enabledStack: true !');\n      return;\n    }\n\n    var stackData = data ? clone(data) : {\n      before: {},\n      after: clone(this.save())\n    };\n\n    if (stackType === 'redo') {\n      this.redoStack.push({\n        action: action,\n        data: stackData\n      });\n    } else {\n      this.undoStack.push({\n        action: action,\n        data: stackData\n      });\n    }\n\n    this.emit('stackchange', {\n      undoStack: this.undoStack,\n      redoStack: this.redoStack\n    });\n  };\n  /**\n   * 获取邻接矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 邻接矩阵\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getAdjMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = getAdjacentMatrix(this.save(), directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    return currentAdjMatrix;\n  };\n  /**\n   * 获取最短路径矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 最短路径矩阵\n   * @memberof IAbstractGraph\n   */\n\n\n  AbstractGraph.prototype.getShortestPathMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n    var currentShourtestPathMatrix = this.get('shortestPathMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = getAdjacentMatrix(this.save(), directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    if (!currentShourtestPathMatrix || !cache) {\n      currentShourtestPathMatrix = floydWarshall(this.save(), directed);\n      this.set('shortestPathMatrix', currentShourtestPathMatrix);\n    }\n\n    return currentShourtestPathMatrix;\n  };\n  /**\n   * 重新定义监听函数，复写参数类型\n   */\n\n\n  AbstractGraph.prototype.on = function (eventName, callback, once) {\n    return _super.prototype.on.call(this, eventName, callback, once);\n  };\n  /**\n   * 销毁画布\n   */\n\n\n  AbstractGraph.prototype.destroy = function () {\n    this.clear(); // 清空栈数据\n\n    this.clearStack();\n    this.get('itemController').destroy();\n    this.get('modeController').destroy();\n    this.get('viewController').destroy();\n    this.get('stateController').destroy();\n    this.get('canvas').destroy();\n    this.cfg = null;\n    this.destroyed = true;\n    this.redoStack = null;\n    this.undoStack = null;\n  };\n  /**\n   * 创建凸包或凹包轮廓\n   * @param cfg HullCfg 轮廓配置项\n   */\n\n\n  AbstractGraph.prototype.createHull = function (cfg) {\n    if (!cfg.members || cfg.members.length < 1) {\n      console.warn('Create hull failed! The members is empty.');\n      return;\n    }\n\n    var parent = this.get('hullGroup');\n    var hullMap = this.get('hullMap');\n\n    if (!hullMap) {\n      hullMap = {};\n      this.set('hullMap', hullMap);\n    }\n\n    if (!parent || parent.get('destroyed')) {\n      parent = this.get('group').addGroup({\n        id: 'hullGroup'\n      });\n      parent.toBack();\n      this.set('hullGroup', parent);\n    }\n\n    if (hullMap[cfg.id]) {\n      console.warn('Existed hull id.');\n      return hullMap[cfg.id];\n    }\n\n    var group = parent.addGroup({\n      id: cfg.id + \"-container\"\n    });\n    var hull = new Hull(this, __assign(__assign({}, cfg), {\n      group: group\n    }));\n    var hullId = hull.id;\n    hullMap[hullId] = hull;\n    return hull;\n  };\n  /**\n   * 获取当前 graph 中存在的包裹轮廓\n   * @return {[key: string]: Hull} Hull 的 map，hullId 对应的 hull 实例\n   */\n\n\n  AbstractGraph.prototype.getHulls = function () {\n    return this.get('hullMap');\n  };\n  /**\n   * 根据 hullId 获取对应的 hull\n   * @return Hull\n   */\n\n\n  AbstractGraph.prototype.getHullById = function (hullId) {\n    return this.get('hullMap')[hullId];\n  };\n\n  AbstractGraph.prototype.removeHull = function (hull) {\n    var hullInstance;\n\n    if (isString(hull)) {\n      hullInstance = this.getHullById(hull);\n    } else {\n      hullInstance = hull;\n    }\n\n    var hullMap = this.get('hullMap');\n    delete hullMap[hullInstance.id];\n    hullInstance.destroy();\n  };\n\n  AbstractGraph.prototype.removeHulls = function () {\n    var hulls = this.getHulls();\n    if (!hulls || !Object.keys(hulls).length) return;\n    Object.keys(hulls).forEach(function (key) {\n      var hull = hulls[key];\n      hull.destroy();\n    });\n    this.set('hullMap', {});\n  };\n\n  return AbstractGraph;\n}(EventEmitter);\n\nexport default AbstractGraph;"]},"metadata":{},"sourceType":"module"}