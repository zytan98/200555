{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { FrameGraphHandle } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n\nexport var FrameGraphSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function FrameGraphSystem() {\n    _classCallCheck(this, FrameGraphSystem);\n\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n  }\n\n  _createClass(FrameGraphSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // this.engine.beginFrame();\n                this.compile();\n                _context.next = 3;\n                return this.executePassNodes(views);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.frameGraphPasses.forEach(function (pass) {\n        if (pass.tearDown) {\n          pass.tearDown();\n        }\n      });\n      this.reset();\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(name, setup, execute, tearDown) {\n      var frameGraphPass = new FrameGraphPass();\n      frameGraphPass.execute = execute;\n\n      if (tearDown) {\n        frameGraphPass.tearDown = tearDown;\n      }\n\n      frameGraphPass.name = name;\n      var passNode = new PassNode();\n      passNode.name = name;\n      this.passNodes.push(passNode);\n      this.frameGraphPasses.push(frameGraphPass);\n      setup(this, passNode, frameGraphPass);\n      return frameGraphPass;\n    }\n  }, {\n    key: \"getPass\",\n    value: function getPass(name) {\n      return this.frameGraphPasses.find(function (p) {\n        return p.name === name;\n      });\n    }\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(this.passNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _pass = _step.value;\n          _pass.refCount = _pass.writes.length + (_pass.hasSideEffect ? 1 : 0);\n\n          _pass.reads.forEach(function (handle) {\n            _this.resourceNodes[handle.index].readerCount++;\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var stack = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.resourceNodes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n\n          if (node.readerCount === 0) {\n            stack.push(node);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      while (stack.length) {\n        var pNode = stack.pop();\n        var writer = pNode && pNode.writer;\n\n        if (writer) {\n          if (--writer.refCount === 0) {\n            // this pass is culled\n            // assert(!writer->hasSideEffect);\n            var _iterator3 = _createForOfIteratorHelper(writer.reads),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var resource = _step3.value;\n                var r = this.resourceNodes[resource.index];\n\n                if (--r.readerCount === 0) {\n                  stack.push(r);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } // update the final reference counts\n\n\n      this.resourceNodes.forEach(function (node) {\n        node.resource.refs += node.readerCount;\n      });\n\n      var _iterator4 = _createForOfIteratorHelper(this.passNodes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _pass2 = _step4.value;\n\n          if (!_pass2.refCount) {\n            continue;\n          }\n\n          var _iterator6 = _createForOfIteratorHelper(_pass2.reads),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _resource2 = _step6.value;\n              var pResource = this.resourceNodes[_resource2.index].resource;\n              pResource.first = pResource.first ? pResource.first : _pass2;\n              pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          var _iterator7 = _createForOfIteratorHelper(_pass2.writes),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _resource3 = _step7.value;\n              var _pResource = this.resourceNodes[_resource3.index].resource;\n              _pResource.first = _pResource.first ? _pResource.first : _pass2;\n              _pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      for (var priority = 0; priority < 2; priority++) {\n        var _iterator5 = _createForOfIteratorHelper(this.resourceNodes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var resoureNode = _step5.value;\n            var _resource = resoureNode.resource;\n\n            if (_resource.priority === priority && _resource.refs) {\n              var pFirst = _resource.first;\n              var pLast = _resource.last;\n\n              if (pFirst && pLast) {\n                pFirst.devirtualize.push(_resource);\n                pLast.destroy.push(_resource);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"executePassNodes\",\n    value: function () {\n      var _executePassNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(views) {\n        var _iterator8, _step8, _step8$value, index, node, _iterator9, _step9, resource, _iterator10, _step10, _resource4, _iterator11, _step11, _resource5, _iterator12, _step12, _resource6;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator8 = _createForOfIteratorHelper(this.passNodes.entries());\n                _context2.prev = 1;\n\n                _iterator8.s();\n\n              case 3:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _step8$value = _slicedToArray(_step8.value, 2), index = _step8$value[0], node = _step8$value[1];\n\n                if (!node.refCount) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _iterator9 = _createForOfIteratorHelper(node.devirtualize);\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    resource = _step9.value;\n                    resource.preExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _iterator10 = _createForOfIteratorHelper(node.destroy);\n\n                try {\n                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                    _resource4 = _step10.value;\n\n                    _resource4.preExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator10.e(err);\n                } finally {\n                  _iterator10.f();\n                }\n\n                _context2.next = 12;\n                return this.frameGraphPasses[index].execute(this, this.frameGraphPasses[index], views);\n\n              case 12:\n                _iterator11 = _createForOfIteratorHelper(node.devirtualize);\n\n                try {\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    _resource5 = _step11.value;\n\n                    _resource5.postExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n\n                _iterator12 = _createForOfIteratorHelper(node.destroy);\n\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    _resource6 = _step12.value;\n\n                    _resource6.postExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n\n              case 16:\n                _context2.next = 3;\n                break;\n\n              case 18:\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator8.e(_context2.t0);\n\n              case 23:\n                _context2.prev = 23;\n\n                _iterator8.f();\n\n                return _context2.finish(23);\n\n              case 26:\n                this.reset();\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 20, 23, 26]]);\n      }));\n\n      function executePassNodes(_x2) {\n        return _executePassNodes.apply(this, arguments);\n      }\n\n      return executePassNodes;\n    }()\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.passNodes = [];\n      this.resourceNodes = [];\n      this.frameGraphPasses = [];\n    }\n  }, {\n    key: \"getResourceNode\",\n    value: function getResourceNode(r) {\n      return this.resourceNodes[r.index];\n    }\n  }, {\n    key: \"createResourceNode\",\n    value: function createResourceNode(resourceEntry) {\n      var resourceNode = new ResourceNode();\n      resourceNode.resource = resourceEntry;\n      resourceNode.version = resourceEntry.version;\n      this.resourceNodes.push(resourceNode);\n      var fgh = new FrameGraphHandle();\n      fgh.index = this.resourceNodes.length - 1;\n      return fgh;\n    }\n  }, {\n    key: \"createTexture\",\n    value: function createTexture(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"createRenderTarget\",\n    value: function createRenderTarget(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"present\",\n    value: function present(input) {\n      this.addPass('Present', function (fg, passNode) {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n  }]);\n\n  return FrameGraphSystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"sources":["../../../src/components/framegraph/System.ts"],"names":["injectable","FrameGraphSystem","inject","IDENTIFIER","pass","frameGraphPass","passNode","setup","p","handle","stack","node","pNode","writer","resource","r","pResource","priority","resoureNode","pFirst","pLast","index","resourceNode","resourceEntry","fgh"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { ISystem, IView } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { FrameGraphHandle, TextureDescriptor } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n@injectable()\nexport class FrameGraphSystem implements ISystem {\n  public passNodes: PassNode[] = [];\n\n  public resourceNodes: ResourceNode[] = [];\n\n  public frameGraphPasses: Array<FrameGraphPass<any>> = [];\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute(views: IView[]) {\n    // this.engine.beginFrame();\n    this.compile();\n    await this.executePassNodes(views);\n    // this.engine.endFrame();\n  }\n\n  public tearDown() {\n    this.frameGraphPasses.forEach((pass) => {\n      if (pass.tearDown) {\n        pass.tearDown();\n      }\n    });\n    this.reset();\n  }\n\n  public addPass<PassData>(\n    name: string,\n    setup: (\n      fg: FrameGraphSystem,\n      passNode: PassNode,\n      pass: FrameGraphPass<PassData>,\n    ) => void,\n    execute: (\n      fg: FrameGraphSystem,\n      pass: FrameGraphPass<PassData>,\n      views: IView[],\n    ) => Promise<void>,\n    tearDown?: () => void,\n  ) {\n    const frameGraphPass = new FrameGraphPass<PassData>();\n    frameGraphPass.execute = execute;\n    if (tearDown) {\n      frameGraphPass.tearDown = tearDown;\n    }\n    frameGraphPass.name = name;\n\n    const passNode = new PassNode();\n    passNode.name = name;\n    this.passNodes.push(passNode);\n\n    this.frameGraphPasses.push(frameGraphPass);\n\n    setup(this, passNode, frameGraphPass);\n\n    return frameGraphPass;\n  }\n\n  public getPass<T>(name: string): FrameGraphPass<T> | undefined {\n    return this.frameGraphPasses.find((p) => p.name === name);\n  }\n\n  public compile() {\n    for (const pass of this.passNodes) {\n      pass.refCount = pass.writes.length + (pass.hasSideEffect ? 1 : 0);\n\n      pass.reads.forEach((handle) => {\n        this.resourceNodes[handle.index].readerCount++;\n      });\n    }\n\n    const stack: ResourceNode[] = [];\n    for (const node of this.resourceNodes) {\n      if (node.readerCount === 0) {\n        stack.push(node);\n      }\n    }\n    while (stack.length) {\n      const pNode = stack.pop();\n      const writer = pNode && pNode.writer;\n      if (writer) {\n        if (--writer.refCount === 0) {\n          // this pass is culled\n          // assert(!writer->hasSideEffect);\n          for (const resource of writer.reads) {\n            const r = this.resourceNodes[resource.index];\n            if (--r.readerCount === 0) {\n              stack.push(r);\n            }\n          }\n        }\n      }\n    }\n\n    // update the final reference counts\n    this.resourceNodes.forEach((node) => {\n      node.resource.refs += node.readerCount;\n    });\n\n    for (const pass of this.passNodes) {\n      if (!pass.refCount) {\n        continue;\n      }\n      for (const resource of pass.reads) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n      for (const resource of pass.writes) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n    }\n\n    for (let priority = 0; priority < 2; priority++) {\n      for (const resoureNode of this.resourceNodes) {\n        const resource = resoureNode.resource;\n        if (resource.priority === priority && resource.refs) {\n          const pFirst = resource.first;\n          const pLast = resource.last;\n          if (pFirst && pLast) {\n            pFirst.devirtualize.push(resource);\n            pLast.destroy.push(resource);\n          }\n        }\n      }\n    }\n  }\n\n  public async executePassNodes(views: IView[]) {\n    for (const [index, node] of this.passNodes.entries()) {\n      if (node.refCount) {\n        for (const resource of node.devirtualize) {\n          resource.preExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.preExecuteDestroy(this.engine);\n        }\n\n        await this.frameGraphPasses[index].execute(\n          this,\n          this.frameGraphPasses[index],\n          views,\n        );\n\n        for (const resource of node.devirtualize) {\n          resource.postExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.postExecuteDestroy(this.engine);\n        }\n      }\n    }\n    this.reset();\n  }\n\n  public reset() {\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n  }\n\n  public getResourceNode(r: FrameGraphHandle) {\n    return this.resourceNodes[r.index];\n  }\n\n  public createResourceNode(resourceEntry: ResourceEntry) {\n    const resourceNode = new ResourceNode();\n    resourceNode.resource = resourceEntry;\n    resourceNode.version = resourceEntry.version;\n\n    this.resourceNodes.push(resourceNode);\n\n    const fgh = new FrameGraphHandle();\n    fgh.index = this.resourceNodes.length - 1;\n\n    return fgh;\n  }\n\n  public createTexture(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public createRenderTarget(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public present(input: FrameGraphHandle) {\n    this.addPass<{}>(\n      'Present',\n      (fg, passNode) => {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      },\n      async () => {\n        // 不需要执行\n      },\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}