{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils'; // 注册 shape\n\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n/**\n * 仪表盘\n */\n\nvar Gauge =\n/** @class */\nfunction (_super) {\n  __extends(Gauge, _super);\n\n  function Gauge() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'gauge';\n    return _this;\n  }\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n\n\n  Gauge.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  Gauge.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    var indicatorView = this.chart.views.find(function (v) {\n      return v.id === INDICATEOR_VIEW_ID;\n    });\n\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    var rangeView = this.chart.views.find(function (v) {\n      return v.id === RANGE_VIEW_ID;\n    });\n\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    } // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n\n\n  Gauge.prototype.getDefaultOptions = function () {\n    return Gauge.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  Gauge.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Gauge;\n}(Plot);\n\nexport { Gauge };","map":{"version":3,"sources":["../../../src/plots/gauge/index.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,EAA2B,KAA3B,QAAwC,UAAxC;AACA,SAAS,IAAT,QAAqB,iBAArB;AAGA,SAAS,OAAT,EAAkB,SAAlB,QAAmC,WAAnC;AACA,SAAS,kBAAT,EAA6B,aAA7B,EAA4C,eAA5C,QAAmE,aAAnE;AACA,SAAS,gBAAT,EAA2B,YAA3B,QAA+C,SAA/C,C,CAEA;;AACA,OAAO,oBAAP;AACA,OAAO,sBAAP;AAIA;;AAEG;;AACH,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAA3B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AASE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;;AA6CR;AAtDC;;;AAGG;;;AACI,EAAA,KAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAOP;;;AAGG;;;AACI,EAAA,KAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAiC;AAC/B,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,kBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,kBAA5C,EAAgE,IAAhE,CAFF;AAKA,SAAK,YAAL,CAAkB;AAAE,MAAA,OAAO,EAAA;AAAT,KAAlB;AACA,QAAM,aAAa,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAAsB,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAC,EAAF,KAAA,kBAAA;AAA2B,KAAxD,CAAtB;;AACA,QAAI,aAAJ,EAAmB;AACjB,MAAA,aAAa,CAAC,IAAd,CAAmB,gBAAgB,CAAC,OAAD,CAAnC;AACD;;AAED,QAAM,SAAS,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAAsB,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAC,EAAF,KAAA,aAAA;AAAsB,KAAnD,CAAlB;;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,IAAV,CAAe,YAAY,CAAC,OAAD,EAAU,KAAK,OAAL,CAAa,KAAvB,CAA3B;AACD,KAf8B,CAgB/B;;;AACA,IAAA,SAAS,CAAC;AAAE,MAAA,KAAK,EAAE,KAAK,KAAd;AAAqB,MAAA,OAAO,EAAE,KAAK;AAAnC,KAAD,EAA+C,IAA/C,CAAT;AAEA,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,iBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,iBAA5C,EAA+D,IAA/D,CAFF;AAID,GAvBM;AAyBP;;;AAGG;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,KAAK,CAAC,iBAAN,EAAP;AACD,GAFS;AAIV;;AAEG;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,KAAA;AAAC,CAvDD,CAA2B,IAA3B,CAAA","sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { GaugeOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n\n// 注册 shape\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n\nexport type { GaugeOptions };\n\n/**\n * 仪表盘\n */\nexport class Gauge extends Plot<GaugeOptions> {\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<GaugeOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'gauge';\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    this.updateOption({ percent });\n    const indicatorView = this.chart.views.find((v) => v.id === INDICATEOR_VIEW_ID);\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    const rangeView = this.chart.views.find((v) => v.id === RANGE_VIEW_ID);\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    }\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({ chart: this.chart, options: this.options }, true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n  protected getDefaultOptions() {\n    return Gauge.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<GaugeOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}