{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../util/createLoading';\nimport { ErrorBoundary } from '../../base';\nimport useGraph from '../hooks/useGraph';\nimport { defaultNodeSize, defaultLabelCfg, defaultStateStyles } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, renderGraph, bindEvents, useProps } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeStyle = {\n  stroke: '#40a9ff'\n};\nvar defaultNodeAnchorPoints = [[0, 0.5], [1, 0.5]];\nvar defaultEdgeStyle = {\n  stroke: '#ccc',\n  endArrow: {\n    path: G6.Arrow.vee(10, 10),\n    fill: '#ccc'\n  }\n};\nvar defaultLayout = {\n  type: 'indented',\n  direction: 'LR',\n  dropCap: false,\n  indent: 250,\n  getHeight: function () {\n    return 60;\n  },\n  getWidth: function () {\n    return 100;\n  }\n};\nvar defaultProps = {\n  nodeType: 'card-node',\n  edgeType: 'cubic-horizontal',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeSize: defaultNodeSize,\n  nodeLabelCfg: defaultLabelCfg,\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  layout: defaultLayout,\n  nodeStyle: defaultNodeStyle,\n  edgeStyle: defaultEdgeStyle,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  collapseExpand: true,\n  autoFit: true\n};\nvar graphs = {};\n\nvar IndentedTree = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'card-node' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'cubic-horizontal' : _b,\n      _c = uProps.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = uProps.nodeSize,\n      nodeSize = _d === void 0 ? defaultNodeSize : _d,\n      _e = uProps.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _f === void 0 ? defaultNodeAnchorPoints : _f,\n      _g = uProps.layout,\n      layout = _g === void 0 ? defaultLayout : _g,\n      minimapCfg = uProps.minimapCfg,\n      _h = uProps.nodeStyle,\n      nodeStyle = _h === void 0 ? defaultNodeStyle : _h,\n      _j = uProps.edgeStyle,\n      edgeStyle = _j === void 0 ? defaultEdgeStyle : _j,\n      _k = uProps.nodeStateStyles,\n      nodeStateStyles = _k === void 0 ? defaultStateStyles : _k,\n      _l = uProps.edgeStateStyles,\n      edgeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = uProps.collapseExpand,\n      collapseExpand = _m === void 0 ? true : _m,\n      _o = uProps.autoFit,\n      autoFit = _o === void 0 ? true : _o,\n      handleNodeClick = uProps.handleNodeClick,\n      graphRef = uProps.graphRef,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  var container = React.useRef(null);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.TreeGraph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    renderGraph(graph, data);\n\n    if (onReady) {\n      onReady(graph);\n    }\n\n    if (collapseExpand) {\n      var onClick_1 = function (e) {\n        var item = e.item;\n\n        if (e.target.get('name') === 'collapse-icon') {\n          graph.updateItem(item, {\n            collapsed: !item.getModel().collapsed\n          });\n          graph.layout();\n        } else if (handleNodeClick) {\n          handleNodeClick(item, graph);\n        }\n      };\n\n      graph.on('node:click', function (e) {\n        onClick_1(e);\n      });\n      graph.on('node:touchstart', function (e) {\n        onClick_1(e);\n      });\n    }\n\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default IndentedTree;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@ant-design/charts/es/obsolescent/graph/indented.js"],"names":["React","useEffect","G6","ChartLoading","ErrorBoundary","useGraph","defaultNodeSize","defaultLabelCfg","defaultStateStyles","processMinimap","getGraphSize","getGraphId","renderGraph","bindEvents","useProps","registerCustomItems","defaultNodeStyle","stroke","defaultNodeAnchorPoints","defaultEdgeStyle","endArrow","path","Arrow","vee","fill","defaultLayout","type","direction","dropCap","indent","getHeight","getWidth","defaultProps","nodeType","edgeType","behaviors","nodeSize","nodeLabelCfg","nodeAnchorPoints","layout","nodeStyle","edgeStyle","nodeStateStyles","edgeStateStyles","collapseExpand","autoFit","graphs","IndentedTree","props","uProps","data","className","style","width","height","_a","_b","_c","_d","_e","_f","_g","minimapCfg","_h","_j","_k","_l","_m","_o","handleNodeClick","graphRef","onReady","loading","loadingTemplate","errorTemplate","graph","useRef","graphId","container","graphSize","TreeGraph","current","modes","default","defaultNode","size","anchorPoints","labelCfg","defaultEdge","fitView","onClick_1","e","item","target","get","updateItem","collapsed","getModel","on","destroy","createElement","ref"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,UAAf;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,kBAA3C,QAAqE,aAArE;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,UAAvC,EAAmDC,WAAnD,EAAgEC,UAAhE,EAA4EC,QAA5E,QAA6F,SAA7F;AACA,SAASC,mBAAT,QAAoC,eAApC;AACAA,mBAAmB;AACnB,IAAIC,gBAAgB,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAAvB;AAGA,IAAIC,uBAAuB,GAAG,CAC1B,CAAC,CAAD,EAAI,GAAJ,CAD0B,EAE1B,CAAC,CAAD,EAAI,GAAJ,CAF0B,CAA9B;AAIA,IAAIC,gBAAgB,GAAG;AACnBF,EAAAA,MAAM,EAAE,MADW;AAEnBG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEnB,EAAE,CAACoB,KAAH,CAASC,GAAT,CAAa,EAAb,EAAiB,EAAjB,CADA;AAENC,IAAAA,IAAI,EAAE;AAFA;AAFS,CAAvB;AAOA,IAAIC,aAAa,GAAG;AAChBC,EAAAA,IAAI,EAAE,UADU;AAEhBC,EAAAA,SAAS,EAAE,IAFK;AAGhBC,EAAAA,OAAO,EAAE,KAHO;AAIhBC,EAAAA,MAAM,EAAE,GAJQ;AAKhBC,EAAAA,SAAS,EAAE,YAAY;AACnB,WAAO,EAAP;AACH,GAPe;AAQhBC,EAAAA,QAAQ,EAAE,YAAY;AAClB,WAAO,GAAP;AACH;AAVe,CAApB;AAYA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,WADK;AAEfC,EAAAA,QAAQ,EAAE,kBAFK;AAGfC,EAAAA,SAAS,EAAE,CAAC,aAAD,EAAgB,aAAhB,CAHI;AAIfC,EAAAA,QAAQ,EAAE9B,eAJK;AAKf+B,EAAAA,YAAY,EAAE9B,eALC;AAMf+B,EAAAA,gBAAgB,EAAEpB,uBANH;AAOfqB,EAAAA,MAAM,EAAEd,aAPO;AAQfe,EAAAA,SAAS,EAAExB,gBARI;AASfyB,EAAAA,SAAS,EAAEtB,gBATI;AAUfuB,EAAAA,eAAe,EAAElC,kBAVF;AAWfmC,EAAAA,eAAe,EAAEnC,kBAXF;AAYfoC,EAAAA,cAAc,EAAE,IAZD;AAafC,EAAAA,OAAO,EAAE;AAbM,CAAnB;AAeA,IAAIC,MAAM,GAAG,EAAb;;AACA,IAAIC,YAAY,GAAG,UAAUC,KAAV,EAAiB;AAChC,MAAIC,MAAM,GAAGnC,QAAQ,CAACkC,KAAD,EAAQhB,YAAR,CAArB;AACA,MAAIkB,IAAI,GAAGD,MAAM,CAACC,IAAlB;AAAA,MAAwBC,SAAS,GAAGF,MAAM,CAACE,SAA3C;AAAA,MAAsDC,KAAK,GAAGH,MAAM,CAACG,KAArE;AAAA,MAA4EC,KAAK,GAAGJ,MAAM,CAACI,KAA3F;AAAA,MAAkGC,MAAM,GAAGL,MAAM,CAACK,MAAlH;AAAA,MAA0HC,EAAE,GAAGN,MAAM,CAAChB,QAAtI;AAAA,MAAgJA,QAAQ,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgB,WAAhB,GAA8BA,EAAzL;AAAA,MAA6LC,EAAE,GAAGP,MAAM,CAACf,QAAzM;AAAA,MAAmNA,QAAQ,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgB,kBAAhB,GAAqCA,EAAnQ;AAAA,MAAuQC,EAAE,GAAGR,MAAM,CAACd,SAAnR;AAAA,MAA8RA,SAAS,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAC,aAAD,EAAgB,aAAhB,CAAhB,GAAiDA,EAA3V;AAAA,MAA+VC,EAAE,GAAGT,MAAM,CAACb,QAA3W;AAAA,MAAqXA,QAAQ,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgBpD,eAAhB,GAAkCoD,EAAla;AAAA,MAAsaC,EAAE,GAAGV,MAAM,CAACZ,YAAlb;AAAA,MAAgcA,YAAY,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgBpD,eAAhB,GAAkCoD,EAAjf;AAAA,MAAqfC,EAAE,GAAGX,MAAM,CAACX,gBAAjgB;AAAA,MAAmhBA,gBAAgB,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgB1C,uBAAhB,GAA0C0C,EAAhlB;AAAA,MAAolBC,EAAE,GAAGZ,MAAM,CAACV,MAAhmB;AAAA,MAAwmBA,MAAM,GAAGsB,EAAE,KAAK,KAAK,CAAZ,GAAgBpC,aAAhB,GAAgCoC,EAAjpB;AAAA,MAAqpBC,UAAU,GAAGb,MAAM,CAACa,UAAzqB;AAAA,MAAqrBC,EAAE,GAAGd,MAAM,CAACT,SAAjsB;AAAA,MAA4sBA,SAAS,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgB/C,gBAAhB,GAAmC+C,EAA3vB;AAAA,MAA+vBC,EAAE,GAAGf,MAAM,CAACR,SAA3wB;AAAA,MAAsxBA,SAAS,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgB7C,gBAAhB,GAAmC6C,EAAr0B;AAAA,MAAy0BC,EAAE,GAAGhB,MAAM,CAACP,eAAr1B;AAAA,MAAs2BA,eAAe,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgBzD,kBAAhB,GAAqCyD,EAA75B;AAAA,MAAi6BC,EAAE,GAAGjB,MAAM,CAACN,eAA76B;AAAA,MAA87BA,eAAe,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgB1D,kBAAhB,GAAqC0D,EAAr/B;AAAA,MAAy/BC,EAAE,GAAGlB,MAAM,CAACL,cAArgC;AAAA,MAAqhCA,cAAc,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAA7jC;AAAA,MAAikCC,EAAE,GAAGnB,MAAM,CAACJ,OAA7kC;AAAA,MAAslCA,OAAO,GAAGuB,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAvnC;AAAA,MAA2nCC,eAAe,GAAGpB,MAAM,CAACoB,eAAppC;AAAA,MAAqqCC,QAAQ,GAAGrB,MAAM,CAACqB,QAAvrC;AAAA,MAAisCC,OAAO,GAAGtB,MAAM,CAACsB,OAAltC;AAAA,MAA2tCC,OAAO,GAAGvB,MAAM,CAACuB,OAA5uC;AAAA,MAAqvCC,eAAe,GAAGxB,MAAM,CAACwB,eAA9wC;AAAA,MAA+xCC,aAAa,GAAGzB,MAAM,CAACyB,aAAtzC;AACA,MAAIC,KAAK,GAAG3E,KAAK,CAAC4E,MAAN,CAAa,IAAb,CAAZ;AACA,MAAIC,OAAO,GAAGlE,UAAU,CAACgE,KAAD,CAAxB;AACA,MAAIG,SAAS,GAAG9E,KAAK,CAAC4E,MAAN,CAAa,IAAb,CAAhB;AACAvE,EAAAA,QAAQ,CAACyC,MAAM,CAAC+B,OAAD,CAAP,EAAkB5B,MAAlB,EAA0B6B,SAA1B,CAAR;AACA7E,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI8E,SAAS,GAAGrE,YAAY,CAAC2C,KAAD,EAAQC,MAAR,EAAgBwB,SAAhB,CAA5B;AACA,QAAIH,KAAK,GAAG7B,MAAM,CAAC+B,OAAD,CAAlB;;AACA,QAAI,CAACF,KAAL,EAAY;AACRA,MAAAA,KAAK,GAAG,IAAIzE,EAAE,CAAC8E,SAAP,CAAiB;AACrBF,QAAAA,SAAS,EAAEA,SAAS,CAACG,OADA;AAErB5B,QAAAA,KAAK,EAAE0B,SAAS,CAAC,CAAD,CAFK;AAGrBzB,QAAAA,MAAM,EAAEyB,SAAS,CAAC,CAAD,CAHI;AAIrBG,QAAAA,KAAK,EAAE;AACHC,UAAAA,OAAO,EAAEhD;AADN,SAJc;AAOrBiD,QAAAA,WAAW,EAAE;AACT1D,UAAAA,IAAI,EAAEO,QADG;AAEToD,UAAAA,IAAI,EAAEjD,QAFG;AAGTgB,UAAAA,KAAK,EAAEZ,SAHE;AAIT8C,UAAAA,YAAY,EAAEhD,gBAJL;AAKTiD,UAAAA,QAAQ,EAAElD;AALD,SAPQ;AAcrBmD,QAAAA,WAAW,EAAE;AACT9D,UAAAA,IAAI,EAAEQ,QADG;AAETkB,UAAAA,KAAK,EAAEX;AAFE,SAdQ;AAkBrBC,QAAAA,eAAe,EAAEA,eAlBI;AAmBrBC,QAAAA,eAAe,EAAEA,eAnBI;AAoBrBJ,QAAAA,MAAM,EAAEA,MApBa;AAqBrBkD,QAAAA,OAAO,EAAE5C;AArBY,OAAjB,CAAR;AAuBAC,MAAAA,MAAM,CAAC+B,OAAD,CAAN,GAAkBF,KAAlB;AACH;;AACD,QAAIL,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACW,OAAT,GAAmBN,KAAnB;AACH;;AACDlE,IAAAA,cAAc,CAACqD,UAAD,EAAaa,KAAb,CAAd;AACA/D,IAAAA,WAAW,CAAC+D,KAAD,EAAQzB,IAAR,CAAX;;AACA,QAAIqB,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACI,KAAD,CAAP;AACH;;AACD,QAAI/B,cAAJ,EAAoB;AAChB,UAAI8C,SAAS,GAAG,UAAUC,CAAV,EAAa;AACzB,YAAIC,IAAI,GAAGD,CAAC,CAACC,IAAb;;AACA,YAAID,CAAC,CAACE,MAAF,CAASC,GAAT,CAAa,MAAb,MAAyB,eAA7B,EAA8C;AAC1CnB,UAAAA,KAAK,CAACoB,UAAN,CAAiBH,IAAjB,EAAuB;AACnBI,YAAAA,SAAS,EAAE,CAACJ,IAAI,CAACK,QAAL,GAAgBD;AADT,WAAvB;AAGArB,UAAAA,KAAK,CAACpC,MAAN;AACH,SALD,MAMK,IAAI8B,eAAJ,EAAqB;AACtBA,UAAAA,eAAe,CAACuB,IAAD,EAAOjB,KAAP,CAAf;AACH;AACJ,OAXD;;AAYAA,MAAAA,KAAK,CAACuB,EAAN,CAAS,YAAT,EAAuB,UAAUP,CAAV,EAAa;AAChCD,QAAAA,SAAS,CAACC,CAAD,CAAT;AACH,OAFD;AAGAhB,MAAAA,KAAK,CAACuB,EAAN,CAAS,iBAAT,EAA4B,UAAUP,CAAV,EAAa;AACrCD,QAAAA,SAAS,CAACC,CAAD,CAAT;AACH,OAFD;AAGH;;AACD9E,IAAAA,UAAU,CAAC8D,KAAD,EAAQ3B,KAAR,CAAV;AACA,WAAO,YAAY;AACf,UAAIF,MAAM,CAAC+B,OAAD,CAAV,EAAqB;AACjB/B,QAAAA,MAAM,CAAC+B,OAAD,CAAN,CAAgBsB,OAAhB;AACA,eAAOrD,MAAM,CAAC+B,OAAD,CAAb;AACH;AACJ,KALD;AAMH,GAhEQ,EAgEN,EAhEM,CAAT;AAiEA,SAAQ7E,KAAK,CAACoG,aAAN,CAAoBhG,aAApB,EAAmC;AAAEsE,IAAAA,aAAa,EAAEA;AAAjB,GAAnC,EACJF,OAAO,IAAIxE,KAAK,CAACoG,aAAN,CAAoBjG,YAApB,EAAkC;AAAEsE,IAAAA,eAAe,EAAEA;AAAnB,GAAlC,CADP,EAEJzE,KAAK,CAACoG,aAAN,CAAoB,KAApB,EAA2B;AAAEjD,IAAAA,SAAS,EAAEA,SAAb;AAAwBC,IAAAA,KAAK,EAAEA,KAA/B;AAAsCiD,IAAAA,GAAG,EAAEvB;AAA3C,GAA3B,CAFI,CAAR;AAGH,CA3ED;;AA4EA,eAAe/B,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../util/createLoading';\nimport { ErrorBoundary } from '../../base';\nimport useGraph from '../hooks/useGraph';\nimport { defaultNodeSize, defaultLabelCfg, defaultStateStyles } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, renderGraph, bindEvents, useProps, } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeStyle = {\n    stroke: '#40a9ff',\n};\nvar defaultNodeAnchorPoints = [\n    [0, 0.5],\n    [1, 0.5],\n];\nvar defaultEdgeStyle = {\n    stroke: '#ccc',\n    endArrow: {\n        path: G6.Arrow.vee(10, 10),\n        fill: '#ccc',\n    },\n};\nvar defaultLayout = {\n    type: 'indented',\n    direction: 'LR',\n    dropCap: false,\n    indent: 250,\n    getHeight: function () {\n        return 60;\n    },\n    getWidth: function () {\n        return 100;\n    },\n};\nvar defaultProps = {\n    nodeType: 'card-node',\n    edgeType: 'cubic-horizontal',\n    behaviors: ['zoom-canvas', 'drag-canvas'],\n    nodeSize: defaultNodeSize,\n    nodeLabelCfg: defaultLabelCfg,\n    nodeAnchorPoints: defaultNodeAnchorPoints,\n    layout: defaultLayout,\n    nodeStyle: defaultNodeStyle,\n    edgeStyle: defaultEdgeStyle,\n    nodeStateStyles: defaultStateStyles,\n    edgeStateStyles: defaultStateStyles,\n    collapseExpand: true,\n    autoFit: true,\n};\nvar graphs = {};\nvar IndentedTree = function (props) {\n    var uProps = useProps(props, defaultProps);\n    var data = uProps.data, className = uProps.className, style = uProps.style, width = uProps.width, height = uProps.height, _a = uProps.nodeType, nodeType = _a === void 0 ? 'card-node' : _a, _b = uProps.edgeType, edgeType = _b === void 0 ? 'cubic-horizontal' : _b, _c = uProps.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = uProps.nodeSize, nodeSize = _d === void 0 ? defaultNodeSize : _d, _e = uProps.nodeLabelCfg, nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e, _f = uProps.nodeAnchorPoints, nodeAnchorPoints = _f === void 0 ? defaultNodeAnchorPoints : _f, _g = uProps.layout, layout = _g === void 0 ? defaultLayout : _g, minimapCfg = uProps.minimapCfg, _h = uProps.nodeStyle, nodeStyle = _h === void 0 ? defaultNodeStyle : _h, _j = uProps.edgeStyle, edgeStyle = _j === void 0 ? defaultEdgeStyle : _j, _k = uProps.nodeStateStyles, nodeStateStyles = _k === void 0 ? defaultStateStyles : _k, _l = uProps.edgeStateStyles, edgeStateStyles = _l === void 0 ? defaultStateStyles : _l, _m = uProps.collapseExpand, collapseExpand = _m === void 0 ? true : _m, _o = uProps.autoFit, autoFit = _o === void 0 ? true : _o, handleNodeClick = uProps.handleNodeClick, graphRef = uProps.graphRef, onReady = uProps.onReady, loading = uProps.loading, loadingTemplate = uProps.loadingTemplate, errorTemplate = uProps.errorTemplate;\n    var graph = React.useRef(null);\n    var graphId = getGraphId(graph);\n    var container = React.useRef(null);\n    useGraph(graphs[graphId], uProps, container);\n    useEffect(function () {\n        var graphSize = getGraphSize(width, height, container);\n        var graph = graphs[graphId];\n        if (!graph) {\n            graph = new G6.TreeGraph({\n                container: container.current,\n                width: graphSize[0],\n                height: graphSize[1],\n                modes: {\n                    default: behaviors,\n                },\n                defaultNode: {\n                    type: nodeType,\n                    size: nodeSize,\n                    style: nodeStyle,\n                    anchorPoints: nodeAnchorPoints,\n                    labelCfg: nodeLabelCfg,\n                },\n                defaultEdge: {\n                    type: edgeType,\n                    style: edgeStyle,\n                },\n                nodeStateStyles: nodeStateStyles,\n                edgeStateStyles: edgeStateStyles,\n                layout: layout,\n                fitView: autoFit,\n            });\n            graphs[graphId] = graph;\n        }\n        if (graphRef) {\n            graphRef.current = graph;\n        }\n        processMinimap(minimapCfg, graph);\n        renderGraph(graph, data);\n        if (onReady) {\n            onReady(graph);\n        }\n        if (collapseExpand) {\n            var onClick_1 = function (e) {\n                var item = e.item;\n                if (e.target.get('name') === 'collapse-icon') {\n                    graph.updateItem(item, {\n                        collapsed: !item.getModel().collapsed,\n                    });\n                    graph.layout();\n                }\n                else if (handleNodeClick) {\n                    handleNodeClick(item, graph);\n                }\n            };\n            graph.on('node:click', function (e) {\n                onClick_1(e);\n            });\n            graph.on('node:touchstart', function (e) {\n                onClick_1(e);\n            });\n        }\n        bindEvents(graph, props);\n        return function () {\n            if (graphs[graphId]) {\n                graphs[graphId].destroy();\n                delete graphs[graphId];\n            }\n        };\n    }, []);\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n};\nexport default IndentedTree;\n"]},"metadata":{},"sourceType":"module"}