{"ast":null,"code":"import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n  if (needZCommandIndexes === void 0) {\n    needZCommandIndexes = false;\n  }\n\n  var pathArray = path2Absolute(path);\n  var params = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x: 0,\n    y: 0,\n    qx: null,\n    qy: null\n  };\n  var allPathCommands = [];\n  var pathCommand = '';\n  var ii = pathArray.length;\n  var segment;\n  var seglen;\n  var zCommandIndexes = [];\n\n  for (var i = 0; i < ii; i += 1) {\n    if (pathArray[i]) pathCommand = pathArray[i][0];\n    allPathCommands[i] = pathCommand;\n    pathArray[i] = segmentToCubic(pathArray[i], params);\n    fixArc(pathArray, allPathCommands, i);\n    ii = pathArray.length; // solves curveArrays ending in Z\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n\n    segment = pathArray[i];\n    seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n\n  if (needZCommandIndexes) {\n    return [pathArray, zCommandIndexes];\n  } else {\n    return pathArray;\n  }\n}\n\nfunction fixArc(pathArray, allPathCommands, i) {\n  if (pathArray[i].length > 7) {\n    pathArray[i].shift();\n    var pi = pathArray[i]; // const ni = i + 1;\n\n    var ni = i;\n\n    while (pi.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A'; // @ts-ignore\n\n      pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n    }\n\n    pathArray.splice(i, 1);\n  }\n}","map":{"version":3,"sources":["../src/path-2-curve.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n    if (needZCommandIndexes === void 0) { needZCommandIndexes = false; }\n    var pathArray = path2Absolute(path);\n    var params = {\n        x1: 0, y1: 0, x2: 0, y2: 0, x: 0, y: 0, qx: null, qy: null,\n    };\n    var allPathCommands = [];\n    var pathCommand = '';\n    var ii = pathArray.length;\n    var segment;\n    var seglen;\n    var zCommandIndexes = [];\n    for (var i = 0; i < ii; i += 1) {\n        if (pathArray[i])\n            pathCommand = pathArray[i][0];\n        allPathCommands[i] = pathCommand;\n        pathArray[i] = segmentToCubic(pathArray[i], params);\n        fixArc(pathArray, allPathCommands, i);\n        ii = pathArray.length; // solves curveArrays ending in Z\n        // keep Z command account for lineJoin\n        // @see https://github.com/antvis/util/issues/68\n        if (pathCommand === 'Z') {\n            zCommandIndexes.push(i);\n        }\n        segment = pathArray[i];\n        seglen = segment.length;\n        params.x1 = +segment[seglen - 2];\n        params.y1 = +segment[seglen - 1];\n        params.x2 = +(segment[seglen - 4]) || params.x1;\n        params.y2 = +(segment[seglen - 3]) || params.y1;\n    }\n    if (needZCommandIndexes) {\n        return [pathArray, zCommandIndexes];\n    }\n    else {\n        return pathArray;\n    }\n}\nfunction fixArc(pathArray, allPathCommands, i) {\n    if (pathArray[i].length > 7) {\n        pathArray[i].shift();\n        var pi = pathArray[i];\n        // const ni = i + 1;\n        var ni = i;\n        while (pi.length) {\n            // if created multiple C:s, their original seg is saved\n            allPathCommands[i] = 'A';\n            // @ts-ignore\n            pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n        }\n        pathArray.splice(i, 1);\n    }\n}\n//# sourceMappingURL=path-2-curve.js.map"]},"metadata":{},"sourceType":"module"}