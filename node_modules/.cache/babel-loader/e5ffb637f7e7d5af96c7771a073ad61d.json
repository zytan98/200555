{"ast":null,"code":"/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\nimport { Container } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { ComponentManager } from './ComponentManager';\nimport { ResourcePool } from './components/framegraph/ResourcePool';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System'; // import { InteractionSystem } from './components/interaction/System';\n\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { CopyPass } from './components/renderer/passes/CopyPass';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RenderPass } from './components/renderer/passes/RenderPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { NameComponent } from './components/scenegraph/NameComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { IDENTIFIER } from './identifier';\nimport { ConfigService } from './services/config/ConfigService';\nimport { InteractorService } from './services/interactor/IteractorService';\nimport ShaderModuleService from './services/shader-module/ShaderModuleService'; // @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\n\nexport var container = new Container(); // @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\n// decorate(injectable(), EventEmitter);\n// container.bind(IDENTIFIER.IEventEmitter).to(EventEmitter);\n// 支持使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\n\nvar DECORATORS = getDecorators(container, false); // Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\n\nexport var lazyInject = function lazyInject(serviceIdentifier) {\n  var original = DECORATORS.lazyInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key); // return link to proto, so own value wont be 'undefined' after component's creation\n\n    if (descriptor) {\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\nexport var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {\n  var original = DECORATORS.lazyMultiInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key);\n\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\n/** global services */\n\ncontainer.bind(IDENTIFIER.ShaderModuleService).to(ShaderModuleService).inSingletonScope();\n/**\n * bind global component managers in root container\n */\n\ncontainer.bind(IDENTIFIER.NameComponentManager).toConstantValue(new ComponentManager(NameComponent));\ncontainer.bind(IDENTIFIER.HierarchyComponentManager).toConstantValue(new ComponentManager(HierarchyComponent));\ncontainer.bind(IDENTIFIER.TransformComponentManager).toConstantValue(new ComponentManager(TransformComponent));\ncontainer.bind(IDENTIFIER.MeshComponentManager).toConstantValue(new ComponentManager(MeshComponent));\ncontainer.bind(IDENTIFIER.CullableComponentManager).toConstantValue(new ComponentManager(CullableComponent));\ncontainer.bind(IDENTIFIER.GeometryComponentManager).toConstantValue(new ComponentManager(GeometryComponent));\ncontainer.bind(IDENTIFIER.MaterialComponentManager).toConstantValue(new ComponentManager(MaterialComponent)); // https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\n\nexport function createWorldContainer() {\n  var worldContainer = new Container();\n  worldContainer.parent = container;\n  /**\n   * bind systems\n   */\n\n  worldContainer.bind(IDENTIFIER.Systems).to(SceneGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.SceneGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(FrameGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.FrameGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MeshSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MeshSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(GeometrySystem).inSingletonScope().whenTargetNamed(IDENTIFIER.GeometrySystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MaterialSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MaterialSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(RendererSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.RendererSystem); // 资源池\n\n  worldContainer.bind(IDENTIFIER.ResourcePool).to(ResourcePool).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.ConfigService).to(ConfigService).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.InteractorService).to(InteractorService).inSingletonScope();\n  /**\n   * bind render passes\n   */\n\n  worldContainer.bind(IDENTIFIER.RenderPass).to(RenderPass).inSingletonScope().whenTargetNamed(RenderPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(CopyPass).inSingletonScope().whenTargetNamed(CopyPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(PixelPickingPass).inSingletonScope().whenTargetNamed(PixelPickingPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPassFactory).toFactory(function (context) {\n    return function (name) {\n      return context.container.getNamed(IDENTIFIER.RenderPass, name);\n    };\n  });\n  return worldContainer;\n}","map":{"version":3,"sources":["../src/inversify.config.ts"],"names":["container","DECORATORS","getDecorators","lazyInject","original","descriptor","proto","lazyMultiInject","IDENTIFIER","worldContainer","RenderPass","CopyPass","PixelPickingPass","context"],"mappings":"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","sourcesContent":["/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\n\nimport { EventEmitter } from 'eventemitter3';\nimport {\n  Container,\n  ContainerModule,\n  decorate,\n  injectable,\n  interfaces,\n} from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { ISystem } from '.';\nimport { ComponentManager } from './ComponentManager';\nimport { ResourcePool } from './components/framegraph/ResourcePool';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System';\n// import { InteractionSystem } from './components/interaction/System';\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { CopyPass } from './components/renderer/passes/CopyPass';\nimport { IRenderPass } from './components/renderer/passes/IRenderPass';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RenderPass } from './components/renderer/passes/RenderPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { NameComponent } from './components/scenegraph/NameComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { IDENTIFIER } from './identifier';\nimport { ConfigService } from './services/config/ConfigService';\nimport { InteractorService } from './services/interactor/IteractorService';\nimport ShaderModuleService from './services/shader-module/ShaderModuleService';\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\nexport const container = new Container();\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\n// decorate(injectable(), EventEmitter);\n// container.bind(IDENTIFIER.IEventEmitter).to(EventEmitter);\n// 支持使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\nconst DECORATORS = getDecorators(container, false);\n\ninterface IBabelPropertyDescriptor extends PropertyDescriptor {\n  initializer(): any;\n}\n// Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\nexport const lazyInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    // return link to proto, so own value wont be 'undefined' after component's creation\n    if (descriptor) {\n      descriptor.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\nexport const lazyMultiInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyMultiInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor!.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\n/** global services */\ncontainer\n  .bind(IDENTIFIER.ShaderModuleService)\n  .to(ShaderModuleService)\n  .inSingletonScope();\n\n/**\n * bind global component managers in root container\n */\ncontainer\n  .bind<ComponentManager<NameComponent>>(IDENTIFIER.NameComponentManager)\n  .toConstantValue(new ComponentManager(NameComponent));\ncontainer\n  .bind<ComponentManager<HierarchyComponent>>(\n    IDENTIFIER.HierarchyComponentManager,\n  )\n  .toConstantValue(new ComponentManager(HierarchyComponent));\ncontainer\n  .bind<ComponentManager<TransformComponent>>(\n    IDENTIFIER.TransformComponentManager,\n  )\n  .toConstantValue(new ComponentManager(TransformComponent));\ncontainer\n  .bind<ComponentManager<MeshComponent>>(IDENTIFIER.MeshComponentManager)\n  .toConstantValue(new ComponentManager(MeshComponent));\ncontainer\n  .bind<ComponentManager<CullableComponent>>(\n    IDENTIFIER.CullableComponentManager,\n  )\n  .toConstantValue(new ComponentManager(CullableComponent));\ncontainer\n  .bind<ComponentManager<GeometryComponent>>(\n    IDENTIFIER.GeometryComponentManager,\n  )\n  .toConstantValue(new ComponentManager(GeometryComponent));\ncontainer\n  .bind<ComponentManager<MaterialComponent>>(\n    IDENTIFIER.MaterialComponentManager,\n  )\n  .toConstantValue(new ComponentManager(MaterialComponent));\n\n// https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\nexport function createWorldContainer() {\n  const worldContainer = new Container();\n  worldContainer.parent = container;\n\n  /**\n   * bind systems\n   */\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(SceneGraphSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.SceneGraphSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(FrameGraphSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.FrameGraphSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(MeshSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.MeshSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(GeometrySystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.GeometrySystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(MaterialSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.MaterialSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(RendererSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.RendererSystem);\n\n  // 资源池\n  worldContainer\n    .bind(IDENTIFIER.ResourcePool)\n    .to(ResourcePool)\n    .inSingletonScope();\n  worldContainer\n    .bind(IDENTIFIER.ConfigService)\n    .to(ConfigService)\n    .inSingletonScope();\n  worldContainer\n    .bind(IDENTIFIER.InteractorService)\n    .to(InteractorService)\n    .inSingletonScope();\n\n  /**\n   * bind render passes\n   */\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(RenderPass)\n    .inSingletonScope()\n    .whenTargetNamed(RenderPass.IDENTIFIER);\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(CopyPass)\n    .inSingletonScope()\n    .whenTargetNamed(CopyPass.IDENTIFIER);\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(PixelPickingPass)\n    .inSingletonScope()\n    .whenTargetNamed(PixelPickingPass.IDENTIFIER);\n\n  worldContainer\n    .bind<interfaces.Factory<IRenderPass<any>>>(IDENTIFIER.RenderPassFactory)\n    .toFactory<IRenderPass<any>>((context: interfaces.Context) => {\n      return (name: string) => {\n        return context.container.getNamed(IDENTIFIER.RenderPass, name);\n      };\n    });\n\n  return worldContainer;\n}\n"]},"metadata":{},"sourceType":"module"}