{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\n/**\n * sunburst 处理数据\n * @param options\n */\n\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      rawFields = options.rawFields,\n      _a = options.hierarchyConfig,\n      hierarchyConfig = _a === void 0 ? {} : _a;\n  var activeDepth = hierarchyConfig.activeDepth;\n  var transform = {\n    partition: partition,\n    treemap: treemap\n  }; // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n\n  var seriesField = options.seriesField; // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n\n  var type = options.type || 'partition';\n  var nodes = transform[type](data, __assign(__assign({\n    field: seriesField || 'value'\n  }, omit(hierarchyConfig, ['activeDepth'])), {\n    // @ts-ignore\n    type: \"hierarchy.\" + type,\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n\n    var _b, _c, _d, _e, _f;\n\n    if (node.depth === 0) {\n      return null;\n    }\n\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n\n    var path = node.data.name;\n\n    var ancestorNode = __assign({}, node);\n\n    while (ancestorNode.depth > 1) {\n      path = ((_b = ancestorNode.parent.data) === null || _b === void 0 ? void 0 : _b.name) + \" / \" + path;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    var nodeInfo = __assign(__assign(__assign({}, pick(node.data, __spreadArrays(rawFields || [], [hierarchyConfig.field]))), (_a = {}, _a[SUNBURST_PATH_FIELD] = path, _a[SUNBURST_ANCESTOR_FIELD] = ancestorNode.data.name, _a)), node); // note: 兼容旧版本\n\n\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || ((_d = (_c = node.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d[seriesField]);\n    }\n\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || ((_f = (_e = node.parent) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f[colorField]);\n    }\n\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      rawFields: rawFields\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/plots/sunburst/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\nimport { SunburstOptions } from './types';\n\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options: Pick<SunburstOptions, 'data' | 'colorField' | 'rawFields' | 'hierarchyConfig'>) {\n  const { data, colorField, rawFields, hierarchyConfig = {} } = options;\n  const { activeDepth } = hierarchyConfig;\n  const transform = {\n    partition: partition,\n    treemap: treemap,\n  };\n  // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n  const seriesField = options.seriesField;\n  // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n  const type = options.type || 'partition';\n\n  const nodes = transform[type](data, {\n    field: seriesField || 'value',\n    ...omit(hierarchyConfig, ['activeDepth']),\n    // @ts-ignore\n    type: `hierarchy.${type}`,\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n\n    let path = node.data.name;\n    let ancestorNode = { ...node };\n    while (ancestorNode.depth > 1) {\n      path = `${ancestorNode.parent.data?.name} / ${path}`;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    const nodeInfo = {\n      ...pick(node.data, [...(rawFields || []), hierarchyConfig.field]),\n      [SUNBURST_PATH_FIELD]: path,\n      [SUNBURST_ANCESTOR_FIELD]: ancestorNode.data.name,\n      ...node,\n    };\n    // note: 兼容旧版本\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || node.parent?.data?.[seriesField];\n    }\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || node.parent?.data?.[colorField];\n    }\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, colorField, rawFields };\n    result.push(nodeInfo);\n  });\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}