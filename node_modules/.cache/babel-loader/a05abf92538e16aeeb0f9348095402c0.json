{"ast":null,"code":"import { justify } from './align';\nimport { constant, sumBy, maxValueBy, minValueBy } from './helper';\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\n\nfunction computeLinkBreadths(_a) {\n  var nodes = _a.nodes;\n\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var node = nodes_1[_i];\n    var y0 = node.y0;\n    var y1 = y0;\n\n    for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n      var link = _c[_b];\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n\n    for (var _d = 0, _e = node.targetLinks; _d < _e.length; _d++) {\n      var link = _e[_d];\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport function Sankey() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1; // extent\n\n  var dx = 24; // nodeWidth\n\n  var dy = 8,\n      py; // nodePadding\n\n  var id = defaultId;\n  var align = justify;\n  var depth;\n  var sort;\n  var linkSort;\n  var nodes = defaultNodes;\n  var links = defaultLinks;\n  var iterations = 6;\n\n  function sankey(arg) {\n    var graph = {\n      nodes: nodes(arg),\n      links: links(arg)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === 'function' ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === 'function' ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? (depth = typeof _ === 'function' ? _ : _, sankey) : depth;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === 'function' ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === 'function' ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks(_a) {\n    var nodes = _a.nodes,\n        links = _a.links;\n    nodes.forEach(function (node, idx) {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = new Map(nodes.map(function (d) {\n      return [id(d), d];\n    }));\n    links.forEach(function (link, idx) {\n      link.index = idx;\n      var source = link.source,\n          target = link.target;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n\n    if (linkSort != null) {\n      for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n        var _b = nodes_2[_i],\n            sourceLinks = _b.sourceLinks,\n            targetLinks = _b.targetLinks;\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues(_a) {\n    var nodes = _a.nodes;\n\n    for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n      var node = nodes_3[_i];\n      node.value = node.fixedValue === undefined ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value)) : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      current.forEach(function (node) {\n        node.depth = x;\n\n        for (var _i = 0, _a = node.sourceLinks; _i < _a.length; _i++) {\n          var target = _a[_i].target;\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    } // 如果配置了 depth，则设置自定义 depth\n\n\n    if (depth) {\n      var maxDepth = Math.max(maxValueBy(nodes, function (d) {\n        return d.depth;\n      }) + 1, 0);\n      var node = void 0;\n\n      for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n\n  function computeNodeHeights(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      current.forEach(function (node) {\n        node.height = x;\n\n        for (var _i = 0, _a = node.targetLinks; _i < _a.length; _i++) {\n          var source = _a[_i].source;\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers(_a) {\n    var nodes = _a.nodes;\n    var x = Math.max(maxValueBy(nodes, function (d) {\n      return d.depth;\n    }) + 1, 0);\n    var kx = (x1 - x0 - dx) / (x - 1);\n    var columns = new Array(x).fill(0).map(function () {\n      return [];\n    });\n\n    for (var _i = 0, nodes_4 = nodes; _i < nodes_4.length; _i++) {\n      var node = nodes_4[_i];\n      var i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);else columns[i] = [node];\n    }\n\n    if (sort) for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {\n      var column = columns_1[_b];\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    var ky = minValueBy(columns, function (c) {\n      return (y1 - y0 - (c.length - 1) * py) / sumBy(c, value);\n    });\n\n    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n      var nodes_6 = columns_2[_i];\n      var y = y0;\n\n      for (var _a = 0, nodes_5 = nodes_6; _a < nodes_5.length; _a++) {\n        var node = nodes_5[_a];\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n\n        for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n          var link = _c[_b];\n          link.width = link.value * ky;\n        }\n      }\n\n      y = (y1 - y + py) / (nodes_6.length + 1);\n\n      for (var i = 0; i < nodes_6.length; ++i) {\n        var node = nodes_6[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n\n      reorderLinks(nodes_6);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (maxValueBy(columns, function (c) {\n      return c.length;\n    }) - 1));\n    initializeNodeBreadths(columns);\n\n    for (var i = 0; i < iterations; ++i) {\n      var alpha = Math.pow(0.99, i);\n      var beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  } // Reposition each node based on its incoming (target) links.\n\n\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (var i = 1, n = columns.length; i < n; ++i) {\n      var column = columns[i];\n\n      for (var _i = 0, column_1 = column; _i < column_1.length; _i++) {\n        var target = column_1[_i];\n        var y = 0;\n        var w = 0;\n\n        for (var _a = 0, _b = target.targetLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n              source = _c.source,\n              value_1 = _c.value;\n          var v = value_1 * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n\n        if (!(w > 0)) continue;\n        var dy_1 = (y / w - target.y0) * alpha;\n        target.y0 += dy_1;\n        target.y1 += dy_1;\n        reorderNodeLinks(target);\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  } // Reposition each node based on its outgoing (source) links.\n\n\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (var n = columns.length, i = n - 2; i >= 0; --i) {\n      var column = columns[i];\n\n      for (var _i = 0, column_2 = column; _i < column_2.length; _i++) {\n        var source = column_2[_i];\n        var y = 0;\n        var w = 0;\n\n        for (var _a = 0, _b = source.sourceLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n              target = _c.target,\n              value_2 = _c.value;\n          var v = value_2 * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n\n        if (!(w > 0)) continue;\n        var dy_2 = (y / w - source.y0) * alpha;\n        source.y0 += dy_2;\n        source.y1 += dy_2;\n        reorderNodeLinks(source);\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    var i = nodes.length >> 1;\n    var subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  } // Push any overlapping nodes down.\n\n\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      var node = nodes[i];\n      var dy_3 = (y - node.y0) * alpha;\n      if (dy_3 > 1e-6) node.y0 += dy_3, node.y1 += dy_3;\n      y = node.y1 + py;\n    }\n  } // Push any overlapping nodes up.\n\n\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      var node = nodes[i];\n      var dy_4 = (node.y1 - y) * alpha;\n      if (dy_4 > 1e-6) node.y0 -= dy_4, node.y1 -= dy_4;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks(_a) {\n    var sourceLinks = _a.sourceLinks,\n        targetLinks = _a.targetLinks;\n\n    if (linkSort === undefined) {\n      for (var _i = 0, targetLinks_1 = targetLinks; _i < targetLinks_1.length; _i++) {\n        var sourceLinks_2 = targetLinks_1[_i].source.sourceLinks;\n        sourceLinks_2.sort(ascendingTargetBreadth);\n      }\n\n      for (var _b = 0, sourceLinks_1 = sourceLinks; _b < sourceLinks_1.length; _b++) {\n        var targetLinks_2 = sourceLinks_1[_b].target.targetLinks;\n        targetLinks_2.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (var _i = 0, nodes_7 = nodes; _i < nodes_7.length; _i++) {\n        var _a = nodes_7[_i],\n            sourceLinks = _a.sourceLinks,\n            targetLinks = _a.targetLinks;\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  } // Returns the target.y0 that would produce an ideal link from source to target.\n\n\n  function targetTop(source, target) {\n    var y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n\n    for (var _i = 0, _a = source.sourceLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n          node = _b.target,\n          width = _b.width;\n      if (node === target) break;\n      y += width + py;\n    }\n\n    for (var _c = 0, _d = target.targetLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n          node = _e.source,\n          width = _e.width;\n      if (node === source) break;\n      y -= width;\n    }\n\n    return y;\n  } // Returns the source.y0 that would produce an ideal link from source to target.\n\n\n  function sourceTop(source, target) {\n    var y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n\n    for (var _i = 0, _a = target.targetLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n          node = _b.source,\n          width = _b.width;\n      if (node === source) break;\n      y += width + py;\n    }\n\n    for (var _c = 0, _d = source.sourceLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n          node = _e.target,\n          width = _e.width;\n      if (node === target) break;\n      y -= width;\n    }\n\n    return y;\n  }\n\n  return sankey;\n}","map":{"version":3,"sources":["../../../../src/plots/sankey/sankey/sankey.ts"],"names":[],"mappings":"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","sourcesContent":["import { justify } from './align';\nimport { constant, sumBy, maxValueBy, minValueBy } from './helper';\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\n\nfunction computeLinkBreadths({ nodes }) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport function Sankey() {\n  let x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8,\n    py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let depth;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey(arg) {\n    const graph = {\n      nodes: nodes(arg),\n      links: links(arg),\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? ((id = typeof _ === 'function' ? _ : constant(_)), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? ((align = typeof _ === 'function' ? _ : constant(_)), sankey) : align;\n  };\n\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? ((depth = typeof _ === 'function' ? _ : _), sankey) : depth;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? ((sort = _), sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? ((dx = +_), sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? ((dy = py = +_), sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? ((nodes = typeof _ === 'function' ? _ : constant(_)), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? ((links = typeof _ === 'function' ? _ : constant(_)), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? ((linkSort = _), sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? ((x0 = y0 = 0), (x1 = +_[0]), (y1 = +_[1]), sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length\n      ? ((x0 = +_[0][0]), (x1 = +_[1][0]), (y0 = +_[0][1]), (y1 = +_[1][1]), sankey)\n      : [\n          [x0, y0],\n          [x1, y1],\n        ];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? ((iterations = +_), sankey) : iterations;\n  };\n\n  function computeNodeLinks({ nodes, links }) {\n    nodes.forEach((node, idx) => {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n\n    const nodeById = new Map(nodes.map((d) => [id(d), d]));\n\n    links.forEach((link, idx) => {\n      link.index = idx;\n      let { source, target } = link;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n\n    if (linkSort != null) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({ nodes }) {\n    for (const node of nodes) {\n      node.value =\n        node.fixedValue === undefined\n          ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.depth = x;\n        for (const { target } of node.sourceLinks) {\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n\n    // 如果配置了 depth，则设置自定义 depth\n    if (depth) {\n      const maxDepth = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n\n      let node;\n      for (let i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n\n  function computeNodeHeights({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.height = x;\n        for (const { source } of node.targetLinks) {\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers({ nodes }) {\n    const x = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x).fill(0).map(() => []);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort)\n      for (const column of columns) {\n        column.sort(sort);\n      }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = minValueBy(columns, (c: any[]) => (y1 - y0 - (c.length - 1) * py) / sumBy(c, value)) as any as number;\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / ((maxValueBy(columns, (c: any[]) => c.length) as any as number) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const { source, value } of target.targetLinks) {\n          const v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const { target, value } of source.sourceLinks) {\n          const v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) (node.y0 += dy), (node.y1 += dy);\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) (node.y0 -= dy), (node.y1 -= dy);\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({ sourceLinks, targetLinks }) {\n    if (linkSort === undefined) {\n      for (const {\n        source: { sourceLinks },\n      } of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {\n        target: { targetLinks },\n      } of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - ((source.sourceLinks.length - 1) * py) / 2;\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - ((target.targetLinks.length - 1) * py) / 2;\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}