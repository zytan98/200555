{"ast":null,"code":"import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nvar each = function (f) {\n  return function (c0, c1) {\n    var out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n};\n/**\n * 混合方法集合\n */\n\n\nvar blendObject = {\n  normal: function (a) {\n    return a;\n  },\n  multiply: function (a, b) {\n    return a * b / 255;\n  },\n  screen: function (a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  },\n  overlay: function (a, b) {\n    return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n  },\n  darken: function (a, b) {\n    return a > b ? b : a;\n  },\n  lighten: function (a, b) {\n    return a > b ? a : b;\n  },\n  dodge: function (a, b) {\n    if (a === 255) return 255;\n    a = 255 * (b / 255) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: function (a, b) {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;else if (a === 0) return 0;else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  }\n};\n/**\n * 获取混合方法\n */\n\nexport var innerBlend = function (mode) {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n\n  return blendObject[mode];\n};\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\n\nexport function blend(c0, c1, mode) {\n  if (mode === void 0) {\n    mode = 'normal';\n  } // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n\n\n  var blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n\n  var _a = colorToArr(c0),\n      r0 = _a[0],\n      g0 = _a[1],\n      b0 = _a[2],\n      a0 = _a[3];\n\n  var _b = colorToArr(c1),\n      r1 = _b[0],\n      g1 = _b[1],\n      b1 = _b[2],\n      a1 = _b[3];\n\n  var a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n  var r = Math.round((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a * 255);\n  var g = Math.round((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a * 255);\n  var b = Math.round((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a * 255);\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\n\nexport function colorToArr(c) {\n  var color = c.replace('/s+/g', ''); // 去除所有空格\n\n  var rgbaArr; // 'red' -> [r, g, b, 1]\n\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]);\n  } // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n\n\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(','); // '#fff000' -> [r, g, b, 1]\n\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n  // [r, g, b, a] 前三位取整\n\n  return rgbaArr.map(function (item, index) {\n    return index === 3 ? Number(item) : item | 0;\n  });\n}","map":{"version":3,"sources":["../../../src/utils/color/blend.ts"],"names":[],"mappings":"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","sourcesContent":["import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nconst each =\n  (f) =>\n  (c0: number[], c1: number[]): number[] => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n\n/**\n * 混合方法集合\n */\nconst blendObject = {\n  normal: (a: number) => a,\n  multiply: (a: number, b: number) => (a * b) / 255,\n  screen: (a: number, b: number) => 255 * (1 - (1 - a / 255) * (1 - b / 255)),\n  overlay: (a: number, b: number) => (b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))),\n  darken: (a: number, b: number) => (a > b ? b : a),\n  lighten: (a: number, b: number) => (a > b ? a : b),\n  dodge: (a: number, b: number) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: (a: number, b: number) => {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;\n    else if (a === 0) return 0;\n    else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  },\n};\n\n/**\n * 获取混合方法\n */\nexport const innerBlend = (mode: string) => {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n  return blendObject[mode];\n};\n\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\nexport function blend(c0: string, c1: string, mode = 'normal') {\n  // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n  const blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n\n  const [r0, g0, b0, a0] = colorToArr(c0);\n  const [r1, g1, b1, a1] = colorToArr(c1);\n\n  const a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n\n  const r = Math.round(\n    ((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a) * 255\n  );\n  const g = Math.round(\n    ((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a) * 255\n  );\n  const b = Math.round(\n    ((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a) * 255\n  );\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\nexport function colorToArr(c: string): number[] {\n  const color = c.replace('/s+/g', ''); // 去除所有空格\n  let rgbaArr: any[];\n\n  // 'red' -> [r, g, b, 1]\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return (rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]));\n  }\n\n  // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(',');\n\n  // '#fff000' -> [r, g, b, 1]\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n\n  // [r, g, b, a] 前三位取整\n  return rgbaArr.map((item, index) => (index === 3 ? Number(item) : item | 0));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}