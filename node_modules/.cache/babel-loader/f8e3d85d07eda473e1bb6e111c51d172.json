{"ast":null,"code":"import { getNeighbors } from './util';\n\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n\n      if (!seen[next]) {\n        seen[next] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\n\n\nfunction depthFirstSearchRecursive(graphData, currentNode, previousNode, callbacks) {\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  var _a = graphData.edges,\n      edges = _a === void 0 ? [] : _a;\n  getNeighbors(currentNode, edges, 'target').forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graphData, nextNode, currentNode, callbacks);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\n\n\nexport default function depthFirstSearch(graphData, startNodeId, callbacks) {\n  depthFirstSearchRecursive(graphData, startNodeId, '', initCallbacks(callbacks));\n}","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/algorithm/es/dfs.js"],"names":["getNeighbors","initCallbacks","callbacks","initiatedCallback","stubCallback","allowTraversalCallback","seen","_a","next","allowTraversal","enter","leave","depthFirstSearchRecursive","graphData","currentNode","previousNode","current","previous","edges","forEach","nextNode","depthFirstSearch","startNodeId"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;;AAEA,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAIC,iBAAiB,GAAGD,SAAxB;;AAEA,MAAIE,YAAY,GAAG,SAASA,YAAT,GAAwB,CAAE,CAA7C;;AAEA,MAAIC,sBAAsB,GAAG,YAAY;AACvC,QAAIC,IAAI,GAAG,EAAX;AACA,WAAO,UAAUC,EAAV,EAAc;AACnB,UAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;;AAEA,UAAI,CAACF,IAAI,CAACE,IAAD,CAAT,EAAiB;AACfF,QAAAA,IAAI,CAACE,IAAD,CAAJ,GAAa,IAAb;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KATD;AAUD,GAZ4B,EAA7B;;AAcAL,EAAAA,iBAAiB,CAACM,cAAlB,GAAmCP,SAAS,CAACO,cAAV,IAA4BJ,sBAA/D;AACAF,EAAAA,iBAAiB,CAACO,KAAlB,GAA0BR,SAAS,CAACQ,KAAV,IAAmBN,YAA7C;AACAD,EAAAA,iBAAiB,CAACQ,KAAlB,GAA0BT,SAAS,CAACS,KAAV,IAAmBP,YAA7C;AACA,SAAOD,iBAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASS,yBAAT,CAAmCC,SAAnC,EAA8CC,WAA9C,EAA2DC,YAA3D,EAAyEb,SAAzE,EAAoF;AAClFA,EAAAA,SAAS,CAACQ,KAAV,CAAgB;AACdM,IAAAA,OAAO,EAAEF,WADK;AAEdG,IAAAA,QAAQ,EAAEF;AAFI,GAAhB;AAIA,MAAIR,EAAE,GAAGM,SAAS,CAACK,KAAnB;AAAA,MACIA,KAAK,GAAGX,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADjC;AAEAP,EAAAA,YAAY,CAACc,WAAD,EAAcI,KAAd,EAAqB,QAArB,CAAZ,CAA2CC,OAA3C,CAAmD,UAAUC,QAAV,EAAoB;AACrE,QAAIlB,SAAS,CAACO,cAAV,CAAyB;AAC3BQ,MAAAA,QAAQ,EAAEF,YADiB;AAE3BC,MAAAA,OAAO,EAAEF,WAFkB;AAG3BN,MAAAA,IAAI,EAAEY;AAHqB,KAAzB,CAAJ,EAII;AACFR,MAAAA,yBAAyB,CAACC,SAAD,EAAYO,QAAZ,EAAsBN,WAAtB,EAAmCZ,SAAnC,CAAzB;AACD;AACF,GARD;AASAA,EAAAA,SAAS,CAACS,KAAV,CAAgB;AACdK,IAAAA,OAAO,EAAEF,WADK;AAEdG,IAAAA,QAAQ,EAAEF;AAFI,GAAhB;AAID;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASM,gBAAT,CAA0BR,SAA1B,EAAqCS,WAArC,EAAkDpB,SAAlD,EAA6D;AAC1EU,EAAAA,yBAAyB,CAACC,SAAD,EAAYS,WAAZ,EAAyB,EAAzB,EAA6BrB,aAAa,CAACC,SAAD,CAA1C,CAAzB;AACD","sourcesContent":["import { getNeighbors } from './util';\n\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n\n      if (!seen[next]) {\n        seen[next] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\n\n\nfunction depthFirstSearchRecursive(graphData, currentNode, previousNode, callbacks) {\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  var _a = graphData.edges,\n      edges = _a === void 0 ? [] : _a;\n  getNeighbors(currentNode, edges, 'target').forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graphData, nextNode, currentNode, callbacks);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\n\n\nexport default function depthFirstSearch(graphData, startNodeId, callbacks) {\n  depthFirstSearchRecursive(graphData, startNodeId, '', initCallbacks(callbacks));\n}"]},"metadata":{},"sourceType":"module"}