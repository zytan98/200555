{"ast":null,"code":"import { reduce, get, isEmpty, isFunction } from '@antv/util';\nimport { Util } from '@antv/g2';\nimport { deepAssign, findGeometry } from '../../../utils';\nimport { isLine } from './option';\n/**\n * 获取 view 的 legendItem，供存在不含有 seriesField 的图形使用\n * @param params\n */\n\nexport function getViewLegendItems(params) {\n  var view = params.view,\n      geometryOption = params.geometryOption,\n      yField = params.yField,\n      legend = params.legend;\n  var userMarker = get(legend, 'marker');\n  var geometry = findGeometry(view, isLine(geometryOption) ? 'line' : 'interval');\n\n  if (!geometryOption.seriesField) {\n    var legendItemName = get(view, \"options.scales.\" + yField + \".alias\") || yField; // 返回 g2 设置的图例\n\n    var colorAttribute = geometry.getAttribute('color');\n    var color = view.getTheme().defaultColor;\n\n    if (colorAttribute) {\n      color = Util.getMappingValue(colorAttribute, legendItemName, get(colorAttribute, ['values', 0], color));\n    }\n\n    var marker = (isFunction(userMarker) ? userMarker : !isEmpty(userMarker) && deepAssign({}, {\n      style: {\n        stroke: color,\n        fill: color\n      }\n    }, userMarker)) || (isLine(geometryOption) ? {\n      symbol: function (x, y, r) {\n        return [['M', x - r, y], ['L', x + r, y]];\n      },\n      style: {\n        lineWidth: 2,\n        r: 6,\n        stroke: color\n      }\n    } : {\n      symbol: 'square',\n      style: {\n        fill: color\n      }\n    });\n    return [{\n      value: yField,\n      name: legendItemName,\n      marker: marker,\n      isGeometry: true,\n      viewId: view.id\n    }];\n  }\n\n  var attributes = geometry.getGroupAttributes();\n  return reduce(attributes, function (items, attr) {\n    var attrItems = Util.getLegendItems(view, geometry, attr, view.getTheme(), userMarker);\n    return items.concat(attrItems);\n  }, []);\n}","map":{"version":3,"sources":["../../../../src/plots/dual-axes/util/legend.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,GAAjB,EAAsB,OAAtB,EAA+B,UAA/B,QAAiD,YAAjD;AACA,SAAe,IAAf,QAA2B,UAA3B;AACA,SAAS,UAAT,EAAqB,YAArB,QAAyC,gBAAzC;AAGA,SAAS,MAAT,QAAuB,UAAvB;AAEA;;;AAGG;;AACH,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAKL;AACS,MAAA,IAAI,GAAqC,MAAM,CAA3C,IAAJ;AAAA,MAAM,cAAc,GAAqB,MAAM,CAA3B,cAApB;AAAA,MAAsB,MAAM,GAAa,MAAM,CAAnB,MAA5B;AAAA,MAA8B,MAAM,GAAK,MAAM,CAAX,MAApC;AACR,MAAM,UAAU,GAAG,GAAG,CAAC,MAAD,EAAS,QAAT,CAAtB;AAEA,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAD,EAAO,MAAM,CAAC,cAAD,CAAN,GAAyB,MAAzB,GAAkC,UAAzC,CAA7B;;AACA,MAAI,CAAC,cAAc,CAAC,WAApB,EAAiC;AAC/B,QAAM,cAAc,GAAG,GAAG,CAAC,IAAD,EAAO,oBAAkB,MAAlB,GAAwB,QAA/B,CAAH,IAA+C,MAAtE,CAD+B,CAE/B;;AACA,QAAM,cAAc,GAAG,QAAQ,CAAC,YAAT,CAAsB,OAAtB,CAAvB;AACA,QAAI,KAAK,GAAG,IAAI,CAAC,QAAL,GAAgB,YAA5B;;AACA,QAAI,cAAJ,EAAoB;AAClB,MAAA,KAAK,GAAG,IAAI,CAAC,eAAL,CAAqB,cAArB,EAAqC,cAArC,EAAqD,GAAG,CAAC,cAAD,EAAiB,CAAC,QAAD,EAAW,CAAX,CAAjB,EAAgC,KAAhC,CAAxD,CAAR;AACD;;AAED,QAAM,MAAM,GACV,CAAC,UAAU,CAAC,UAAD,CAAV,GACG,UADH,GAEG,CAAC,OAAO,CAAC,UAAD,CAAR,IACA,UAAU,CACR,EADQ,EAER;AACE,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KADH;AAEL,QAAA,IAAI,EAAE;AAFD;AADT,KAFQ,EAQR,UARQ,CAHd,MAaC,MAAM,CAAC,cAAD,CAAN,GACG;AACE,MAAA,MAAM,EAAE,UAAC,CAAD,EAAY,CAAZ,EAAuB,CAAvB,EAAgC;AACtC,eAAO,CACL,CAAC,GAAD,EAAM,CAAC,GAAG,CAAV,EAAa,CAAb,CADK,EAEL,CAAC,GAAD,EAAM,CAAC,GAAG,CAAV,EAAa,CAAb,CAFK,CAAP;AAID,OANH;AAOE,MAAA,KAAK,EAAE;AACL,QAAA,SAAS,EAAE,CADN;AAEL,QAAA,CAAC,EAAE,CAFE;AAGL,QAAA,MAAM,EAAE;AAHH;AAPT,KADH,GAcG;AACE,MAAA,MAAM,EAAE,QADV;AAEE,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,EAAE;AADD;AAFT,KA3BJ,CADF;AAkCA,WAAO,CACL;AACE,MAAA,KAAK,EAAE,MADT;AAEE,MAAA,IAAI,EAAE,cAFR;AAGE,MAAA,MAAM,EAAA,MAHR;AAIE,MAAA,UAAU,EAAE,IAJd;AAKE,MAAA,MAAM,EAAE,IAAI,CAAC;AALf,KADK,CAAP;AASD;;AAED,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAT,EAAnB;AACA,SAAO,MAAM,CACX,UADW,EAEX,UAAC,KAAD,EAAQ,IAAR,EAAY;AACV,QAAM,SAAS,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,QAA1B,EAAoC,IAApC,EAA0C,IAAI,CAAC,QAAL,EAA1C,EAA2D,UAA3D,CAAlB;AACA,WAAO,KAAK,CAAC,MAAN,CAAa,SAAb,CAAP;AACD,GALU,EAMX,EANW,CAAb;AAQD","sourcesContent":["import { reduce, get, isEmpty, isFunction } from '@antv/util';\nimport { View, Util } from '@antv/g2';\nimport { deepAssign, findGeometry } from '../../../utils';\nimport { GeometryOption } from '../types';\nimport { Legend } from '../../../types/legend';\nimport { isLine } from './option';\n\n/**\n * 获取 view 的 legendItem，供存在不含有 seriesField 的图形使用\n * @param params\n */\nexport function getViewLegendItems(params: {\n  view: View;\n  yField: string;\n  geometryOption: GeometryOption;\n  legend: Legend;\n}) {\n  const { view, geometryOption, yField, legend } = params;\n  const userMarker = get(legend, 'marker');\n\n  const geometry = findGeometry(view, isLine(geometryOption) ? 'line' : 'interval');\n  if (!geometryOption.seriesField) {\n    const legendItemName = get(view, `options.scales.${yField}.alias`) || yField;\n    // 返回 g2 设置的图例\n    const colorAttribute = geometry.getAttribute('color');\n    let color = view.getTheme().defaultColor;\n    if (colorAttribute) {\n      color = Util.getMappingValue(colorAttribute, legendItemName, get(colorAttribute, ['values', 0], color));\n    }\n\n    const marker =\n      (isFunction(userMarker)\n        ? userMarker\n        : !isEmpty(userMarker) &&\n          deepAssign(\n            {},\n            {\n              style: {\n                stroke: color,\n                fill: color,\n              },\n            },\n            userMarker\n          )) ||\n      (isLine(geometryOption)\n        ? {\n            symbol: (x: number, y: number, r: number) => {\n              return [\n                ['M', x - r, y],\n                ['L', x + r, y],\n              ];\n            },\n            style: {\n              lineWidth: 2,\n              r: 6,\n              stroke: color,\n            },\n          }\n        : {\n            symbol: 'square',\n            style: {\n              fill: color,\n            },\n          });\n    return [\n      {\n        value: yField,\n        name: legendItemName,\n        marker,\n        isGeometry: true,\n        viewId: view.id,\n      },\n    ];\n  }\n\n  const attributes = geometry.getGroupAttributes();\n  return reduce(\n    attributes,\n    (items, attr) => {\n      const attrItems = Util.getLegendItems(view, geometry, attr, view.getTheme(), userMarker);\n      return items.concat(attrItems);\n    },\n    []\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}