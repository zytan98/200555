{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { mat4, quat, vec3 } from 'gl-matrix';\nimport { Component } from '../../ComponentManager';\nexport var TransformComponent = /*#__PURE__*/function (_Component) {\n  _inherits(TransformComponent, _Component);\n\n  var _super = _createSuper(TransformComponent);\n  /**\n   * local space RTS\n   */\n\n  /**\n   * XMFLOAT4X4._41\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks\n   */\n\n  /**\n   * world space RTS\n   */\n  // 高阶函数，利用闭包重复利用临时变量\n  // @see playcanvas graph node\n\n  /**\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw\n   */\n\n  /**\n   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n   */\n\n  /**\n   * TODO: 支持以下两种：\n   * * translate(x, y, z)\n   * * translate(vec3(x, y, z))\n   */\n\n  /**\n   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n   */\n  // public catmullRom = (() => {\n  //   const aS = vec3.create();\n  //   const aR = quat.create();\n  //   const aT = vec3.create();\n  //   const bS = vec3.create();\n  //   const bR = quat.create();\n  //   const bT = vec3.create();\n  //   const cS = vec3.create();\n  //   const cR = quat.create();\n  //   const cT = vec3.create();\n  //   const dS = vec3.create();\n  //   const dR = quat.create();\n  //   const dT = vec3.create();\n  //   const R = quat.create();\n  //   return (\n  //     a: TransformComponent,\n  //     b: TransformComponent,\n  //     c: TransformComponent,\n  //     d: TransformComponent,\n  //     t: number,\n  //   ) => {\n  //     this.setDirty();\n  //     mat4.getScaling(aS, a.worldTransform);\n  //     mat4.getTranslation(aT, a.worldTransform);\n  //     mat4.getRotation(aR, a.worldTransform);\n  //     mat4.getScaling(bS, b.worldTransform);\n  //     mat4.getTranslation(bT, b.worldTransform);\n  //     mat4.getRotation(bR, b.worldTransform);\n  //     mat4.getScaling(cS, c.worldTransform);\n  //     mat4.getTranslation(cT, c.worldTransform);\n  //     mat4.getRotation(cR, c.worldTransform);\n  //     mat4.getScaling(dS, d.worldTransform);\n  //     mat4.getTranslation(dT, d.worldTransform);\n  //     mat4.getRotation(dR, d.worldTransform);\n  //     vec3.catmullRom(this.localPosition, aT, bT, cT, dT, t);\n  //     vec3.catmullRom(R, aR, bR, cR, dR, t);\n  //     quat.normalize(this.localRotation, R);\n  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);\n  //   };\n  // })();\n\n\n  function TransformComponent(data) {\n    var _this;\n\n    _classCallCheck(this, TransformComponent);\n\n    _this = _super.call(this, data);\n    _this.dirtyFlag = void 0;\n    _this.localDirtyFlag = void 0;\n    _this.parent = null;\n    _this.localPosition = vec3.fromValues(0, 0, 0);\n    _this.localRotation = quat.fromValues(0, 0, 0, 1);\n    _this.localScale = vec3.fromValues(1, 1, 1);\n    _this.localTransform = mat4.create();\n    _this.position = vec3.fromValues(0, 0, 0);\n    _this.rotation = quat.fromValues(0, 0, 0, 1);\n    _this.scaling = vec3.fromValues(1, 1, 1);\n    _this.worldTransform = mat4.create();\n\n    _this.matrixTransform = function () {\n      var transformed = mat4.create();\n      return function (mat) {\n        mat4.multiply(transformed, _this.getLocalTransform(), mat);\n        mat4.getScaling(_this.localScale, transformed);\n        mat4.getTranslation(_this.localPosition, transformed);\n        mat4.getRotation(_this.localRotation, transformed);\n      };\n    }();\n\n    _this.rotateRollPitchYaw = function () {\n      var quatX = quat.create();\n      var quatY = quat.create();\n      var quatZ = quat.create();\n      return function (x, y, z) {\n        _this.setDirty();\n\n        quat.fromEuler(quatX, x, 0, 0);\n        quat.fromEuler(quatY, 0, y, 0);\n        quat.fromEuler(quatZ, 0, 0, z);\n        quat.multiply(_this.localRotation, quatX, _this.localRotation);\n        quat.multiply(_this.localRotation, _this.localRotation, quatY);\n        quat.multiply(_this.localRotation, quatZ, _this.localRotation);\n        quat.normalize(_this.localRotation, _this.localRotation);\n      };\n    }();\n\n    _this.lerp = function () {\n      var aS = vec3.create();\n      var aR = quat.create();\n      var aT = vec3.create();\n      var bS = vec3.create();\n      var bR = quat.create();\n      var bT = vec3.create();\n      return function (a, b, t) {\n        _this.setDirty();\n\n        mat4.getScaling(aS, a.worldTransform);\n        mat4.getTranslation(aT, a.worldTransform);\n        mat4.getRotation(aR, a.worldTransform);\n        mat4.getScaling(bS, b.worldTransform);\n        mat4.getTranslation(bT, b.worldTransform);\n        mat4.getRotation(bR, b.worldTransform);\n        vec3.lerp(_this.localScale, aS, bS, t);\n        quat.slerp(_this.localRotation, aR, bR, t);\n        vec3.lerp(_this.localPosition, aT, bT, t);\n      };\n    }();\n\n    _this.translate = function () {\n      var tr = vec3.create();\n      return function (translation) {\n        vec3.add(tr, _this.getPosition(), translation);\n\n        _this.setPosition(tr);\n\n        _this.setDirty(true);\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    _this.translateLocal = function () {\n      return function (translation) {\n        vec3.transformQuat(translation, translation, _this.localRotation);\n        vec3.add(_this.localPosition, _this.localPosition, translation);\n\n        _this.setLocalDirty(true);\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    _this.setPosition = function () {\n      var parentInvertMatrix = mat4.create();\n      return function (position) {\n        _this.position = position;\n\n        _this.setLocalDirty(true);\n\n        if (_this.parent === null) {\n          vec3.copy(_this.localPosition, position);\n        } else {\n          mat4.copy(parentInvertMatrix, _this.parent.worldTransform);\n          mat4.invert(parentInvertMatrix, parentInvertMatrix);\n          vec3.transformMat4(_this.localPosition, position, parentInvertMatrix);\n        }\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    _this.rotate = function () {\n      var parentInvertRotation = quat.create();\n      return function (quaternion) {\n        if (_this.parent === null) {\n          quat.multiply(_this.localRotation, _this.localRotation, quaternion);\n          quat.normalize(_this.localRotation, _this.localRotation);\n        } else {\n          var rot = _this.getRotation();\n\n          var parentRot = _this.parent.getRotation();\n\n          quat.copy(parentInvertRotation, parentRot);\n          quat.invert(parentInvertRotation, parentInvertRotation);\n          quat.multiply(parentInvertRotation, parentInvertRotation, quaternion);\n          quat.multiply(_this.localRotation, quaternion, rot);\n          quat.normalize(_this.localRotation, _this.localRotation);\n        }\n\n        _this.setLocalDirty();\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    _this.rotateLocal = function () {\n      return function (quaternion) {\n        quat.multiply(_this.localRotation, _this.localRotation, quaternion);\n        quat.normalize(_this.localRotation, _this.localRotation);\n\n        _this.setLocalDirty(true);\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    _this.setRotation = function () {\n      var invParentRot = quat.create();\n      return function (rotation) {\n        if (_this.parent === null) {\n          quat.copy(_this.localRotation, rotation);\n        } else {\n          quat.copy(invParentRot, _this.parent.getRotation());\n          quat.invert(invParentRot, invParentRot);\n          quat.copy(_this.localRotation, invParentRot);\n          quat.mul(_this.localRotation, _this.localRotation, rotation);\n        }\n\n        _this.setLocalDirty(true);\n\n        return _assertThisInitialized(_this);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(TransformComponent, [{\n    key: \"setLocalPosition\",\n    value: function setLocalPosition(position) {\n      vec3.copy(this.localPosition, position);\n      this.setLocalDirty(true);\n    }\n  }, {\n    key: \"setLocalScale\",\n    value: function setLocalScale(scale) {\n      vec3.copy(this.localScale, scale);\n      this.setLocalDirty(true);\n    }\n  }, {\n    key: \"setLocalRotation\",\n    value: function setLocalRotation(rotation) {\n      quat.copy(this.localRotation, rotation);\n      this.setLocalDirty(true);\n      return this;\n    }\n  }, {\n    key: \"isDirty\",\n    value: function isDirty() {\n      return this.dirtyFlag;\n    }\n  }, {\n    key: \"setDirty\",\n    value: function setDirty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (value) {\n        this.dirtyFlag |= TransformComponent.DIRTY;\n      } else {\n        this.dirtyFlag &= ~TransformComponent.DIRTY;\n      }\n    }\n  }, {\n    key: \"isLocalDirty\",\n    value: function isLocalDirty() {\n      return this.localDirtyFlag;\n    }\n  }, {\n    key: \"setLocalDirty\",\n    value: function setLocalDirty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (value) {\n        this.localDirtyFlag |= TransformComponent.DIRTY;\n        this.setDirty(true);\n      } else {\n        this.localDirtyFlag &= ~TransformComponent.DIRTY;\n      }\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform() {\n      if (this.isLocalDirty()) {\n        this.getLocalTransform();\n      }\n\n      if (this.isDirty()) {\n        if (this.parent === null) {\n          mat4.copy(this.worldTransform, this.getLocalTransform());\n          this.setDirty(false);\n        }\n      }\n    }\n  }, {\n    key: \"updateTransformWithParent\",\n    value: function updateTransformWithParent(parent) {\n      mat4.multiply(this.worldTransform, parent.worldTransform, this.getLocalTransform());\n    }\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform() {\n      this.setDirty();\n      mat4.getScaling(this.localScale, this.worldTransform);\n      mat4.getTranslation(this.localPosition, this.worldTransform);\n      mat4.getRotation(this.localRotation, this.worldTransform);\n    }\n  }, {\n    key: \"clearTransform\",\n    value: function clearTransform() {\n      this.setDirty();\n      this.localPosition = vec3.fromValues(0, 0, 0);\n      this.localRotation = quat.fromValues(0, 0, 0, 1);\n      this.localScale = vec3.fromValues(1, 1, 1);\n    }\n  }, {\n    key: \"scaleLocal\",\n    value: function scaleLocal(scaling) {\n      this.setLocalDirty();\n      vec3.multiply(this.localScale, this.localScale, scaling);\n      return this;\n    }\n  }, {\n    key: \"getLocalPosition\",\n    value: function getLocalPosition() {\n      return this.localPosition;\n    }\n  }, {\n    key: \"getLocalRotation\",\n    value: function getLocalRotation() {\n      return this.localRotation;\n    }\n  }, {\n    key: \"getLocalScale\",\n    value: function getLocalScale() {\n      return this.localScale;\n    }\n  }, {\n    key: \"getLocalTransform\",\n    value: function getLocalTransform() {\n      if (this.localDirtyFlag) {\n        mat4.fromRotationTranslationScale(this.localTransform, this.localRotation, this.localPosition, this.localScale);\n        this.setLocalDirty(false);\n      }\n\n      return this.localTransform;\n    }\n  }, {\n    key: \"getWorldTransform\",\n    value: function getWorldTransform() {\n      if (!this.isLocalDirty() && !this.isDirty()) {\n        return this.worldTransform;\n      }\n\n      if (this.parent) {\n        this.parent.getWorldTransform();\n      }\n\n      this.updateTransform();\n      return this.worldTransform;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      mat4.getTranslation(this.position, this.worldTransform);\n      return this.position;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      mat4.getRotation(this.rotation, this.worldTransform);\n      return this.rotation;\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      mat4.getScaling(this.scaling, this.worldTransform);\n      return this.scaling;\n    }\n  }]);\n\n  return TransformComponent;\n}(Component);\nTransformComponent.DIRTY = 1 << 0;","map":{"version":3,"sources":["../../../src/components/scenegraph/TransformComponent.ts"],"names":["TransformComponent","DIRTY","dirtyFlag","localDirtyFlag","parent","localPosition","vec3","localRotation","quat","localScale","localTransform","mat4","position","rotation","scaling","worldTransform","matrixTransform","transformed","rotateRollPitchYaw","quatX","quatY","quatZ","lerp","aS","aR","aT","bS","bR","bT","a","b","translate","tr","translateLocal","setPosition","parentInvertMatrix","rotate","parentInvertRotation","rot","parentRot","rotateLocal","setRotation","invParentRot","value"],"mappings":"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","sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\nimport { Component, NonFunctionProperties } from '../../ComponentManager';\n\nexport class TransformComponent extends Component<TransformComponent> {\n  public static DIRTY = 1 << 0;\n\n  public dirtyFlag: number;\n\n  public localDirtyFlag: number;\n\n  public parent: TransformComponent | null = null;\n\n  /**\n   * local space RTS\n   */\n\n  /**\n   * XMFLOAT4X4._41\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks\n   */\n  public localPosition = vec3.fromValues(0, 0, 0);\n  public localRotation = quat.fromValues(0, 0, 0, 1);\n  public localScale = vec3.fromValues(1, 1, 1);\n  public localTransform = mat4.create();\n\n  /**\n   * world space RTS\n   */\n\n  public position = vec3.fromValues(0, 0, 0);\n  public rotation = quat.fromValues(0, 0, 0, 1);\n  public scaling = vec3.fromValues(1, 1, 1);\n  public worldTransform = mat4.create();\n\n  // 高阶函数，利用闭包重复利用临时变量\n  // @see playcanvas graph node\n  public matrixTransform = (() => {\n    const transformed = mat4.create();\n    return (mat: mat4) => {\n      mat4.multiply(transformed, this.getLocalTransform(), mat);\n      mat4.getScaling(this.localScale, transformed);\n      mat4.getTranslation(this.localPosition, transformed);\n      mat4.getRotation(this.localRotation, transformed);\n    };\n  })();\n\n  /**\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw\n   */\n  public rotateRollPitchYaw = (() => {\n    const quatX = quat.create();\n    const quatY = quat.create();\n    const quatZ = quat.create();\n    return (x: number, y: number, z: number) => {\n      this.setDirty();\n\n      quat.fromEuler(quatX, x, 0, 0);\n      quat.fromEuler(quatY, 0, y, 0);\n      quat.fromEuler(quatZ, 0, 0, z);\n\n      quat.multiply(this.localRotation, quatX, this.localRotation);\n      quat.multiply(this.localRotation, this.localRotation, quatY);\n      quat.multiply(this.localRotation, quatZ, this.localRotation);\n      quat.normalize(this.localRotation, this.localRotation);\n    };\n  })();\n\n  /**\n   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n   */\n  public lerp = (() => {\n    const aS = vec3.create();\n    const aR = quat.create();\n    const aT = vec3.create();\n    const bS = vec3.create();\n    const bR = quat.create();\n    const bT = vec3.create();\n    return (a: TransformComponent, b: TransformComponent, t: number) => {\n      this.setDirty();\n\n      mat4.getScaling(aS, a.worldTransform);\n      mat4.getTranslation(aT, a.worldTransform);\n      mat4.getRotation(aR, a.worldTransform);\n      mat4.getScaling(bS, b.worldTransform);\n      mat4.getTranslation(bT, b.worldTransform);\n      mat4.getRotation(bR, b.worldTransform);\n\n      vec3.lerp(this.localScale, aS, bS, t);\n      quat.slerp(this.localRotation, aR, bR, t);\n      vec3.lerp(this.localPosition, aT, bT, t);\n    };\n  })();\n\n  /**\n   * TODO: 支持以下两种：\n   * * translate(x, y, z)\n   * * translate(vec3(x, y, z))\n   */\n  public translate = (() => {\n    const tr = vec3.create();\n\n    return (translation: vec3) => {\n      vec3.add(tr, this.getPosition(), translation);\n      this.setPosition(tr);\n\n      this.setDirty(true);\n\n      return this;\n    };\n  })();\n\n  public translateLocal = (() => {\n    return (translation: vec3) => {\n      vec3.transformQuat(translation, translation, this.localRotation);\n      vec3.add(this.localPosition, this.localPosition, translation);\n\n      this.setLocalDirty(true);\n\n      return this;\n    };\n  })();\n\n  public setPosition = (() => {\n    const parentInvertMatrix = mat4.create();\n\n    return (position: vec3) => {\n      this.position = position;\n\n      this.setLocalDirty(true);\n\n      if (this.parent === null) {\n        vec3.copy(this.localPosition, position);\n      } else {\n        mat4.copy(parentInvertMatrix, this.parent.worldTransform);\n        mat4.invert(parentInvertMatrix, parentInvertMatrix);\n        vec3.transformMat4(this.localPosition, position, parentInvertMatrix);\n      }\n      return this;\n    };\n  })();\n\n  public rotate = (() => {\n    const parentInvertRotation = quat.create();\n    return (quaternion: quat) => {\n      if (this.parent === null) {\n        quat.multiply(this.localRotation, this.localRotation, quaternion);\n        quat.normalize(this.localRotation, this.localRotation);\n      } else {\n        const rot = this.getRotation();\n        const parentRot = this.parent.getRotation();\n\n        quat.copy(parentInvertRotation, parentRot);\n        quat.invert(parentInvertRotation, parentInvertRotation);\n        quat.multiply(parentInvertRotation, parentInvertRotation, quaternion);\n        quat.multiply(this.localRotation, quaternion, rot);\n        quat.normalize(this.localRotation, this.localRotation);\n      }\n      this.setLocalDirty();\n      return this;\n    };\n  })();\n\n  public rotateLocal = (() => {\n    return (quaternion: quat) => {\n      quat.multiply(this.localRotation, this.localRotation, quaternion);\n      quat.normalize(this.localRotation, this.localRotation);\n      this.setLocalDirty(true);\n      return this;\n    };\n  })();\n\n  public setRotation = (() => {\n    const invParentRot = quat.create();\n\n    return (rotation: quat) => {\n      if (this.parent === null) {\n        quat.copy(this.localRotation, rotation);\n      } else {\n        quat.copy(invParentRot, this.parent.getRotation());\n        quat.invert(invParentRot, invParentRot);\n        quat.copy(this.localRotation, invParentRot);\n        quat.mul(this.localRotation, this.localRotation, rotation);\n      }\n\n      this.setLocalDirty(true);\n      return this;\n    };\n  })();\n\n  /**\n   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n   */\n  // public catmullRom = (() => {\n  //   const aS = vec3.create();\n  //   const aR = quat.create();\n  //   const aT = vec3.create();\n  //   const bS = vec3.create();\n  //   const bR = quat.create();\n  //   const bT = vec3.create();\n  //   const cS = vec3.create();\n  //   const cR = quat.create();\n  //   const cT = vec3.create();\n  //   const dS = vec3.create();\n  //   const dR = quat.create();\n  //   const dT = vec3.create();\n  //   const R = quat.create();\n  //   return (\n  //     a: TransformComponent,\n  //     b: TransformComponent,\n  //     c: TransformComponent,\n  //     d: TransformComponent,\n  //     t: number,\n  //   ) => {\n  //     this.setDirty();\n  //     mat4.getScaling(aS, a.worldTransform);\n  //     mat4.getTranslation(aT, a.worldTransform);\n  //     mat4.getRotation(aR, a.worldTransform);\n  //     mat4.getScaling(bS, b.worldTransform);\n  //     mat4.getTranslation(bT, b.worldTransform);\n  //     mat4.getRotation(bR, b.worldTransform);\n  //     mat4.getScaling(cS, c.worldTransform);\n  //     mat4.getTranslation(cT, c.worldTransform);\n  //     mat4.getRotation(cR, c.worldTransform);\n  //     mat4.getScaling(dS, d.worldTransform);\n  //     mat4.getTranslation(dT, d.worldTransform);\n  //     mat4.getRotation(dR, d.worldTransform);\n\n  //     vec3.catmullRom(this.localPosition, aT, bT, cT, dT, t);\n  //     vec3.catmullRom(R, aR, bR, cR, dR, t);\n  //     quat.normalize(this.localRotation, R);\n  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);\n  //   };\n  // })();\n\n  constructor(data?: Partial<NonFunctionProperties<TransformComponent>>) {\n    super(data);\n  }\n\n  public setLocalPosition(position: vec3) {\n    vec3.copy(this.localPosition, position);\n    this.setLocalDirty(true);\n  }\n\n  public setLocalScale(scale: vec3) {\n    vec3.copy(this.localScale, scale);\n    this.setLocalDirty(true);\n  }\n\n  public setLocalRotation(rotation: quat) {\n    quat.copy(this.localRotation, rotation);\n\n    this.setLocalDirty(true);\n    return this;\n  }\n\n  public isDirty() {\n    return this.dirtyFlag;\n  }\n\n  public setDirty(value = true) {\n    if (value) {\n      this.dirtyFlag |= TransformComponent.DIRTY;\n    } else {\n      this.dirtyFlag &= ~TransformComponent.DIRTY;\n    }\n  }\n\n  public isLocalDirty() {\n    return this.localDirtyFlag;\n  }\n\n  public setLocalDirty(value = true) {\n    if (value) {\n      this.localDirtyFlag |= TransformComponent.DIRTY;\n      this.setDirty(true);\n    } else {\n      this.localDirtyFlag &= ~TransformComponent.DIRTY;\n    }\n  }\n\n  public updateTransform() {\n    if (this.isLocalDirty()) {\n      this.getLocalTransform();\n    }\n    if (this.isDirty()) {\n      if (this.parent === null) {\n        mat4.copy(this.worldTransform, this.getLocalTransform());\n        this.setDirty(false);\n      }\n    }\n  }\n\n  public updateTransformWithParent(parent: TransformComponent) {\n    mat4.multiply(\n      this.worldTransform,\n      parent.worldTransform,\n      this.getLocalTransform(),\n    );\n  }\n\n  public applyTransform() {\n    this.setDirty();\n\n    mat4.getScaling(this.localScale, this.worldTransform);\n    mat4.getTranslation(this.localPosition, this.worldTransform);\n    mat4.getRotation(this.localRotation, this.worldTransform);\n  }\n\n  public clearTransform() {\n    this.setDirty();\n    this.localPosition = vec3.fromValues(0, 0, 0);\n    this.localRotation = quat.fromValues(0, 0, 0, 1);\n    this.localScale = vec3.fromValues(1, 1, 1);\n  }\n\n  public scaleLocal(scaling: vec3) {\n    this.setLocalDirty();\n    vec3.multiply(this.localScale, this.localScale, scaling);\n    return this;\n  }\n\n  public getLocalPosition() {\n    return this.localPosition;\n  }\n\n  public getLocalRotation() {\n    return this.localRotation;\n  }\n\n  public getLocalScale() {\n    return this.localScale;\n  }\n\n  public getLocalTransform() {\n    if (this.localDirtyFlag) {\n      mat4.fromRotationTranslationScale(\n        this.localTransform,\n        this.localRotation,\n        this.localPosition,\n        this.localScale,\n      );\n      this.setLocalDirty(false);\n    }\n    return this.localTransform;\n  }\n\n  public getWorldTransform() {\n    if (!this.isLocalDirty() && !this.isDirty()) {\n      return this.worldTransform;\n    }\n\n    if (this.parent) {\n      this.parent.getWorldTransform();\n    }\n\n    this.updateTransform();\n\n    return this.worldTransform;\n  }\n\n  public getPosition() {\n    mat4.getTranslation(this.position, this.worldTransform);\n    return this.position;\n  }\n\n  public getRotation() {\n    mat4.getRotation(this.rotation, this.worldTransform);\n    return this.rotation;\n  }\n\n  public getScale() {\n    mat4.getScaling(this.scaling, this.worldTransform);\n    return this.scaling;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}