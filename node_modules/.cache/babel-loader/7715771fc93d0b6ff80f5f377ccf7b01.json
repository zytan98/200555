{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\n\n\nimport { createEntity as _createEntity, createWorldContainer, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine'; // tslint:disable-next-line:no-submodule-imports\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\nexport var World = (_dec = injectable(), _dec2 = inject(IDENTIFIER.ConfigService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    this.container = void 0;\n  }\n\n  _createClass(World, [{\n    key: \"getEngine\",\n    value: function () {\n      var _getEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var engine, _this$configService$g, canvas, engineOptions;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                engine = this.container.get(IDENTIFIER.RenderEngine);\n                _this$configService$g = this.configService.get(), canvas = _this$configService$g.canvas, engineOptions = _this$configService$g.engineOptions;\n                _context.next = 4;\n                return engine.init(_objectSpread({\n                  canvas: canvas || createCanvas(),\n                  swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n                  antialiasing: false\n                }, engineOptions));\n\n              case 4:\n                return _context.abrupt(\"return\", engine);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getEngine() {\n        return _getEngine.apply(this, arguments);\n      }\n\n      return getEngine;\n    }()\n    /**\n     * get transform component\n     * @param entity\n     */\n\n  }, {\n    key: \"getTransformComponent\",\n    value: function getTransformComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.TransformComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"getMeshComponent\",\n    value: function getMeshComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.MeshComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.configService.set(config);\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      this.container = container;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity() {\n      return _createEntity();\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene() {\n      return this.container.get(Scene);\n    }\n  }, {\n    key: \"createCamera\",\n    value: function createCamera() {\n      return this.container.get(Camera);\n    }\n  }, {\n    key: \"createView\",\n    value: function createView() {\n      return this.container.get(View);\n    } // public createLight(type: string,) {\n    //   return this.container.getNamed(IDENTIFIER.Light, type)\n    // }\n\n  }, {\n    key: \"createRenderable\",\n    value: function createRenderable(type, config) {\n      var renderable = type ? this.container.getNamed(IDENTIFIER.Renderable, type) : this.container.get(Renderable);\n\n      var entity = _createEntity();\n\n      renderable.setConfig(config || {});\n      renderable.setEntity(entity);\n      return renderable;\n    }\n  }, {\n    key: \"createGeometry\",\n    value: function createGeometry(type, config) {\n      var geometry = this.container.getNamed(IDENTIFIER.Geometry, type);\n\n      var entity = _createEntity();\n\n      geometry.setConfig(config || {});\n      geometry.setEntity(entity);\n      return geometry.getComponent();\n    }\n  }, {\n    key: \"createMaterial\",\n    value: function createMaterial(type, config) {\n      var material = this.container.getNamed(IDENTIFIER.Material, type);\n\n      var entity = _createEntity();\n\n      material.setConfig(config || {});\n      material.setEntity(entity, type);\n      return material.getComponent();\n    }\n  }, {\n    key: \"createTexture2D\",\n    value: function createTexture2D(config) {\n      var texture = this.container.get(Texture2D);\n      texture.setConfig(config);\n      return texture;\n    }\n  }, {\n    key: \"createBufferGeometry\",\n    value: function createBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createBufferGeometry(params);\n    }\n  }, {\n    key: \"createInstancedBufferGeometry\",\n    value: function createInstancedBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createInstancedBufferGeometry(params);\n    }\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var materialSystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.MaterialSystem);\n      return materialSystem.createShaderMaterial(params);\n    }\n  }, {\n    key: \"createKernel\",\n    value: function createKernel(precompiledBundle) {\n      var kernel = this.container.get(Kernel);\n\n      if (typeof precompiledBundle === 'string') {\n        kernel.setBundle(JSON.parse(precompiledBundle));\n      } else {\n        kernel.setBundle(precompiledBundle);\n      }\n\n      kernel.init();\n      return kernel;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      var renderer = this.container.get(Renderer);\n      renderer.container = this.container;\n      renderer.init();\n      return renderer;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var systems = this.container.getAll(IDENTIFIER.Systems);\n      systems.forEach(function (system) {\n        if (system.tearDown) {\n          system.tearDown();\n        }\n      });\n      var engine = this.container.get(IDENTIFIER.RenderEngine);\n      engine.destroy();\n      var interactor = this.container.get(IDENTIFIER.InteractorService);\n      interactor.destroy();\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var worldContainer = createWorldContainer(); // bind render engine, fallback to WebGL\n\n      var engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n\n      if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n        worldContainer.bind(IDENTIFIER.RenderEngine) // @ts-ignore\n        .to(engineClazz).inSingletonScope();\n      }\n\n      worldContainer.bind(Renderer).toSelf();\n      worldContainer.bind(Kernel).toSelf();\n      worldContainer.bind(Renderable).toSelf();\n      worldContainer.bind(View).toSelf();\n      worldContainer.bind(Camera).toSelf();\n      worldContainer.bind(Scene).toSelf();\n      worldContainer.bind(World).toSelf();\n      worldContainer.bind(TextureCache).toSelf();\n      worldContainer.bind(Texture2D).toSelf(); // bind geometries\n\n      worldContainer.bind(IDENTIFIER.Geometry).to(Box).whenTargetNamed(Geometry.BOX);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Sphere).whenTargetNamed(Geometry.SPHERE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Plane).whenTargetNamed(Geometry.PLANE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Merged).whenTargetNamed(Geometry.MERGED); // bind materials\n\n      worldContainer.bind(IDENTIFIER.Material).to(Basic).whenTargetNamed(Material.BASIC); // bind renderables\n\n      worldContainer.bind(IDENTIFIER.Renderable).to(Point).whenTargetNamed(Renderable.POINT);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Line).whenTargetNamed(Renderable.LINE);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Grid).whenTargetNamed(Renderable.GRID);\n      var world = worldContainer.get(World);\n      world.setContainer(worldContainer);\n      world.setConfig(config);\n      return world;\n    }\n  }]);\n\n  return World;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"sources":["../src/World.ts"],"names":["createEntity","injectable","World","config","worldContainer","createWorldContainer","engineClazz","navigator","IDENTIFIER","Geometry","Material","Renderable","world","inject","engine","canvas","engineOptions","createCanvas","swapChainFormat","WebGPUConstants","antialiasing","manager","renderable","type","entity","geometry","material","texture","geometrySystem","materialSystem","kernel","JSON","renderer","systems","system","interactor"],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry, IGeometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { IMaterial, Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n    worldContainer.bind(TextureCache).toSelf();\n    worldContainer.bind(Texture2D).toSelf();\n\n    // bind geometries\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Box)\n      .whenTargetNamed(Geometry.BOX);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Sphere)\n      .whenTargetNamed(Geometry.SPHERE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Plane)\n      .whenTargetNamed(Geometry.PLANE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Merged)\n      .whenTargetNamed(Geometry.MERGED);\n\n    // bind materials\n    worldContainer\n      .bind<IMaterial<unknown>>(IDENTIFIER.Material)\n      .to(Basic)\n      .whenTargetNamed(Material.BASIC);\n\n    // bind renderables\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Grid)\n      .whenTargetNamed(Renderable.GRID);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  // public createLight(type: string,) {\n  //   return this.container.getNamed(IDENTIFIER.Light, type)\n  // }\n\n  public createRenderable<T>(type?: string, config?: T) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    const entity = createEntity();\n    renderable.setConfig(config || {});\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createGeometry<T>(type: string, config?: T) {\n    const geometry: Geometry = this.container.getNamed(\n      IDENTIFIER.Geometry,\n      type,\n    );\n    const entity = createEntity();\n    geometry.setConfig(config || {});\n    geometry.setEntity(entity);\n    return geometry.getComponent();\n  }\n\n  public createMaterial<T>(type: string, config?: T) {\n    const material: Material = this.container.getNamed(\n      IDENTIFIER.Material,\n      type,\n    );\n    const entity = createEntity();\n    material.setConfig(config || {});\n    material.setEntity(entity, type);\n    return material.getComponent();\n  }\n\n  public createTexture2D(\n    config: ITexture2DInitializationOptions & { url: string },\n  ) {\n    const texture = this.container.get(Texture2D);\n    texture.setConfig(config);\n    return texture;\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}