{"ast":null,"code":"import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\n\nexport default (function (text, maxWidth, font, str) {\n  if (str === void 0) {\n    str = '...';\n  }\n\n  var STEP = 16; // 每次 16，调参工程师\n\n  var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n  var leftText = !isString(text) ? toString(text) : text;\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n\n  var currentText;\n  var currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  } // 首先通过 step 计算，找出最大的未超出长度的\n  // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP); // 字符串整体没有超出\n\n    if (!leftText) {\n      return r.join('');\n    }\n  } // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return \"\" + r.join('') + str;\n});","map":{"version":3,"sources":["../src/get-ellipsis-text.ts"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,QAAP,MAAqB,aAArB;AACA,SAAe,OAAO,IAAI,gBAA1B,QAAkD,sBAAlD;AAEA;;;;;;;;;AASG;;AACH,gBAAe,UAAC,IAAD,EAAwB,QAAxB,EAA0C,IAA1C,EAAuD,GAAvD,EAA0E;AAAnB,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAmB;;AACvF,MAAM,IAAI,GAAG,EAAb,CADuF,CACtE;;AACjB,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,GAAD,EAAM,IAAN,CAA1C;AACA,MAAI,QAAQ,GAAG,CAAC,QAAQ,CAAC,IAAD,CAAT,GAAkB,QAAQ,CAAC,IAAD,CAA1B,GAAmC,IAAlD;AAEA,MAAI,SAAS,GAAG,QAAhB;AAEA,MAAM,CAAC,GAAG,EAAV,CAPuF,CAOzE;;AACd,MAAI,WAAJ;AACA,MAAI,YAAJ;;AAEA,MAAI,gBAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB,IAAgC,QAApC,EAA8C;AAC5C,WAAO,IAAP;AACD,GAbsF,CAevF;AACA;;;AACA,SAAO,IAAP,EAAa;AACX;AACA,IAAA,WAAW,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,EAAmB,IAAnB,CAAd,CAFW,CAGX;;AACA,IAAA,YAAY,GAAG,gBAAgB,CAAC,WAAD,EAAc,IAAd,CAA/B,CAJW,CAKX;;AACA,QAAI,YAAY,GAAG,iBAAf,GAAmC,SAAvC,EAAkD;AAChD,UAAI,YAAY,GAAG,SAAnB,EAA8B;AAC5B;AACD;AACF;;AAED,IAAA,CAAC,CAAC,IAAF,CAAO,WAAP,EAZW,CAaX;;AACA,IAAA,SAAS,IAAI,YAAb;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAX,CAfW,CAgBX;;AACA,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,CAAC,CAAC,IAAF,CAAO,EAAP,CAAP;AACD;AACF,GArCsF,CAuCvF;AACA;;;AACA,SAAO,IAAP,EAAa;AACX;AACA,IAAA,WAAW,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAFW,CAGX;;AACA,IAAA,YAAY,GAAG,gBAAgB,CAAC,WAAD,EAAc,IAAd,CAA/B,CAJW,CAKX;;AACA,QAAI,YAAY,GAAG,iBAAf,GAAmC,SAAvC,EAAkD;AAChD;AACD;;AACD,IAAA,CAAC,CAAC,IAAF,CAAO,WAAP,EATW,CAUX;;AACA,IAAA,SAAS,IAAI,YAAb;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAX;;AAEA,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,CAAC,CAAC,IAAF,CAAO,EAAP,CAAP;AACD;AACF;;AACD,SAAO,KAAG,CAAC,CAAC,IAAF,CAAO,EAAP,CAAH,GAAgB,GAAvB;AACD,CA5DD","sourceRoot":"","sourcesContent":["import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\nexport default (function (text, maxWidth, font, str) {\n    if (str === void 0) { str = '...'; }\n    var STEP = 16; // 每次 16，调参工程师\n    var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n    var leftText = !isString(text) ? toString(text) : text;\n    var leftWidth = maxWidth;\n    var r = []; // 最终的分段字符串\n    var currentText;\n    var currentWidth;\n    if (measureTextWidth(text, font) <= maxWidth) {\n        return text;\n    }\n    // 首先通过 step 计算，找出最大的未超出长度的\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, STEP);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n            if (currentWidth > leftWidth) {\n                break;\n            }\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(STEP);\n        // 字符串整体没有超出\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, 1);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n            break;\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(1);\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    return \"\" + r.join('') + str;\n});\n//# sourceMappingURL=get-ellipsis-text.js.map"]},"metadata":{},"sourceType":"module"}