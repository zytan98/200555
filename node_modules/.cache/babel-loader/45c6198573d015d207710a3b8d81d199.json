{"ast":null,"code":"/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { isNumber, isFunction, isArray, getDegree, isObject, getEdgeTerminal } from \"../util\";\n\nconst proccessToFunc = (value, defaultV) => {\n  let func;\n\n  if (!value) {\n    func = d => {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = d => {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n\n  return func;\n};\n/**\n * graphin 中的 force 布局\n */\n\n\nexport class GForceLayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n\n    this.maxIteration = 1000;\n    /** 弹簧引力系数 */\n\n    this.edgeStrength = 200;\n    /** 斥力系数 */\n\n    this.nodeStrength = 1000;\n    /** 库伦系数 */\n\n    this.coulombDisScale = 0.005;\n    /** 阻尼系数 */\n\n    this.damping = 0.9;\n    /** 最大速度 */\n\n    this.maxSpeed = 1000;\n    /** 一次迭代的平均移动距离小于该值时停止迭代 */\n\n    this.minMovement = 0.5;\n    /** 迭代中衰减 */\n\n    this.interval = 0.02;\n    /** 斥力的一个系数 */\n\n    this.factor = 1;\n    /** 理想边长 */\n\n    this.linkDistance = 1;\n    /** 重力大小 */\n\n    this.gravity = 10;\n    /** 是否防止重叠 */\n\n    this.preventOverlap = true;\n    /** 每次迭代结束的回调函数 */\n\n    this.tick = () => {};\n\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.nodeMap = {};\n    this.nodeIdxMap = {};\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      maxIteration: 500,\n      gravity: 10,\n      enableTick: true\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n\n    if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n      window.clearInterval(self.timeInterval);\n    }\n\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    const nodeMap = {};\n    const nodeIdxMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * self.width;\n      if (!isNumber(node.y)) node.y = Math.random() * self.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n    self.linkDistance = proccessToFunc(self.linkDistance, 1);\n    self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n    self.edgeStrength = proccessToFunc(self.edgeStrength, 1); // node size function\n\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n\n    if (self.preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc;\n\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n\n      if (!nodeSize) {\n        nodeSizeFunc = d => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n              return res + nodeSpacingFunc(d);\n            }\n\n            if (isObject(d.size)) {\n              const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n              return res + nodeSpacingFunc(d);\n            }\n\n            return d.size + nodeSpacingFunc(d);\n          }\n\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = d => {\n          const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n          return res + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = d => nodeSize + nodeSpacingFunc(d);\n      }\n    }\n\n    self.nodeSize = nodeSizeFunc;\n    const edges = self.edges;\n    self.degrees = getDegree(nodes.length, self.nodeIdxMap, edges);\n\n    if (!self.getMass) {\n      self.getMass = d => {\n        const mass = self.degrees[self.nodeIdxMap[d.id]] || 1;\n        return mass;\n      };\n    } // layout\n\n\n    self.run();\n  }\n\n  run() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    const maxIteration = self.maxIteration;\n    if (typeof window === \"undefined\") return;\n    let iter = 0; // interval for render the result after each iteration\n\n    this.timeInterval = window.setInterval(() => {\n      const accArray = [];\n      const velArray = [];\n      if (!nodes) return;\n      nodes.forEach((_, i) => {\n        accArray[2 * i] = 0;\n        accArray[2 * i + 1] = 0;\n        velArray[2 * i] = 0;\n        velArray[2 * i + 1] = 0;\n      });\n      self.calRepulsive(accArray, nodes);\n      if (edges) self.calAttractive(accArray, edges);\n      self.calGravity(accArray, nodes);\n      const stepInterval = Math.max(0.02, self.interval - iter * 0.002);\n      self.updateVelocity(accArray, velArray, stepInterval, nodes);\n      const previousPos = [];\n      nodes.forEach(node => {\n        previousPos.push({\n          x: node.x,\n          y: node.y\n        });\n      });\n      self.updatePosition(velArray, stepInterval, nodes);\n      if (self.tick) self.tick(); // whether to stop the iteration\n\n      let movement = 0;\n      nodes.forEach((node, j) => {\n        const vx = node.x - previousPos[j].x;\n        const vy = node.y - previousPos[j].y;\n        movement += Math.sqrt(vx * vx + vy * vy);\n      });\n      movement /= nodes.length;\n\n      if (movement < self.minMovement) {\n        window.clearInterval(self.timeInterval);\n        if (self.onLayoutEnd) self.onLayoutEnd();\n      }\n\n      iter++;\n\n      if (iter >= maxIteration) {\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        window.clearInterval(self.timeInterval);\n      }\n    }, 0);\n  }\n\n  calRepulsive(accArray, nodes) {\n    const self = this; // const nodes = self.nodes;\n\n    const getMass = self.getMass;\n    const nodeStrength = self.nodeStrength;\n    const factor = self.factor;\n    const coulombDisScale = self.coulombDisScale;\n    const preventOverlap = self.preventOverlap;\n    const nodeSize = self.nodeSize;\n    nodes.forEach((ni, i) => {\n      const massi = getMass ? getMass(ni) : 1;\n      nodes.forEach((nj, j) => {\n        if (i >= j) return; // if (!accArray[j]) accArray[j] = 0;\n\n        const vecX = ni.x - nj.x;\n        const vecY = ni.y - nj.y;\n        const vecLength = Math.sqrt(vecX * vecX + vecY * vecY) + 0.01;\n        const nVecLength = (vecLength + 0.1) * coulombDisScale;\n        const direX = vecX / vecLength;\n        const direY = vecY / vecLength;\n        const param = (nodeStrength(ni) + nodeStrength(nj)) / 2 * factor / (nVecLength * nVecLength);\n        const massj = getMass ? getMass(nj) : 1;\n        accArray[2 * i] += direX * param;\n        accArray[2 * i + 1] += direY * param;\n        accArray[2 * j] -= direX * param;\n        accArray[2 * j + 1] -= direY * param;\n\n        if (preventOverlap && vecLength < (nodeSize(ni) + nodeSize(nj)) / 2) {\n          const paramOverlap = (nodeStrength(ni) + nodeStrength(nj)) / 2 / (vecLength * vecLength);\n          accArray[2 * i] += direX * paramOverlap / massi;\n          accArray[2 * i + 1] += direY * paramOverlap / massi;\n          accArray[2 * j] -= direX * paramOverlap / massj;\n          accArray[2 * j + 1] -= direY * paramOverlap / massj;\n        }\n      });\n    });\n  }\n\n  calAttractive(accArray, edges) {\n    const self = this; // const edges = self.edges;\n\n    const nodeMap = self.nodeMap;\n    const nodeIdxMap = self.nodeIdxMap;\n    const linkDistance = self.linkDistance;\n    const edgeStrength = self.edgeStrength;\n    const getMass = self.getMass;\n    edges.forEach((edge, i) => {\n      const source = getEdgeTerminal(edge, 'source');\n      const target = getEdgeTerminal(edge, 'target');\n      const sourceNode = nodeMap[source];\n      const targetNode = nodeMap[target];\n      const vecX = targetNode.x - sourceNode.x;\n      const vecY = targetNode.y - sourceNode.y;\n      const vecLength = Math.sqrt(vecX * vecX + vecY * vecY) + 0.01;\n      const direX = vecX / vecLength;\n      const direY = vecY / vecLength;\n      const length = linkDistance(edge) || 1;\n      const diff = length - vecLength;\n      const param = diff * edgeStrength(edge);\n      const sourceIdx = nodeIdxMap[source];\n      const targetIdx = nodeIdxMap[target];\n      const massSource = getMass ? getMass(sourceNode) : 1;\n      const massTarget = getMass ? getMass(targetNode) : 1;\n      accArray[2 * sourceIdx] -= direX * param / massSource;\n      accArray[2 * sourceIdx + 1] -= direY * param / massSource;\n      accArray[2 * targetIdx] += direX * param / massTarget;\n      accArray[2 * targetIdx + 1] += direY * param / massTarget;\n    });\n  }\n\n  calGravity(accArray, nodes) {\n    const self = this; // const nodes = self.nodes;\n\n    const center = self.center;\n    const defaultGravity = self.gravity;\n    const degrees = self.degrees;\n    const nodeLength = nodes.length;\n\n    for (let i = 0; i < nodeLength; i++) {\n      const node = nodes[i];\n      let vecX = node.x - center[0];\n      let vecY = node.y - center[1];\n      let gravity = defaultGravity;\n\n      if (self.getCenter) {\n        const customCenterOpt = self.getCenter(node, degrees[i]);\n\n        if (customCenterOpt && isNumber(customCenterOpt[0]) && isNumber(customCenterOpt[1]) && isNumber(customCenterOpt[2])) {\n          vecX = node.x - customCenterOpt[0];\n          vecY = node.y - customCenterOpt[1];\n          gravity = customCenterOpt[2];\n        }\n      }\n\n      if (!gravity) continue;\n      accArray[2 * i] -= gravity * vecX;\n      accArray[2 * i + 1] -= gravity * vecY;\n    }\n  }\n\n  updateVelocity(accArray, velArray, stepInterval, nodes) {\n    const self = this;\n    const param = stepInterval * self.damping; // const nodes = self.nodes;\n\n    nodes.forEach((node, i) => {\n      let vx = accArray[2 * i] * param || 0.01;\n      let vy = accArray[2 * i + 1] * param || 0.01;\n      const vLength = Math.sqrt(vx * vx + vy * vy);\n\n      if (vLength > self.maxSpeed) {\n        const param2 = self.maxSpeed / vLength;\n        vx = param2 * vx;\n        vy = param2 * vy;\n      }\n\n      velArray[2 * i] = vx;\n      velArray[2 * i + 1] = vy;\n    });\n  }\n\n  updatePosition(velArray, stepInterval, nodes) {\n    nodes.forEach((node, i) => {\n      if (isNumber(node.fx) && isNumber(node.fy)) {\n        node.x = node.fx;\n        node.y = node.fy;\n        return;\n      }\n\n      const distX = velArray[2 * i] * stepInterval;\n      const distY = velArray[2 * i + 1] * stepInterval;\n      node.x += distX;\n      node.y += distY;\n    });\n  }\n\n  stop() {\n    if (this.timeInterval && typeof window !== \"undefined\") {\n      window.clearInterval(this.timeInterval);\n    }\n  }\n\n  destroy() {\n    const self = this;\n    self.stop();\n    self.tick = null;\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  }\n\n  getType() {\n    return \"gForce\";\n  }\n\n}","map":{"version":3,"sources":["../../src/layout/gForce.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { isNumber, isFunction, isArray, getDegree, isObject, getEdgeTerminal } from \"../util\";\nconst proccessToFunc = (value, defaultV) => {\n    let func;\n    if (!value) {\n        func = (d) => {\n            return defaultV || 1;\n        };\n    }\n    else if (isNumber(value)) {\n        func = (d) => {\n            return value;\n        };\n    }\n    else {\n        func = value;\n    }\n    return func;\n};\n/**\n * graphin 中的 force 布局\n */\nexport class GForceLayout extends Base {\n    constructor(options) {\n        super();\n        /** 停止迭代的最大迭代数 */\n        this.maxIteration = 1000;\n        /** 弹簧引力系数 */\n        this.edgeStrength = 200;\n        /** 斥力系数 */\n        this.nodeStrength = 1000;\n        /** 库伦系数 */\n        this.coulombDisScale = 0.005;\n        /** 阻尼系数 */\n        this.damping = 0.9;\n        /** 最大速度 */\n        this.maxSpeed = 1000;\n        /** 一次迭代的平均移动距离小于该值时停止迭代 */\n        this.minMovement = 0.5;\n        /** 迭代中衰减 */\n        this.interval = 0.02;\n        /** 斥力的一个系数 */\n        this.factor = 1;\n        /** 理想边长 */\n        this.linkDistance = 1;\n        /** 重力大小 */\n        this.gravity = 10;\n        /** 是否防止重叠 */\n        this.preventOverlap = true;\n        /** 每次迭代结束的回调函数 */\n        this.tick = () => { };\n        this.nodes = [];\n        this.edges = [];\n        this.width = 300;\n        this.height = 300;\n        this.nodeMap = {};\n        this.nodeIdxMap = {};\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            maxIteration: 500,\n            gravity: 10,\n            enableTick: true\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        const self = this;\n        const nodes = self.nodes;\n        if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n            window.clearInterval(self.timeInterval);\n        }\n        if (!nodes || nodes.length === 0) {\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        const center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        const nodeMap = {};\n        const nodeIdxMap = {};\n        nodes.forEach((node, i) => {\n            if (!isNumber(node.x))\n                node.x = Math.random() * self.width;\n            if (!isNumber(node.y))\n                node.y = Math.random() * self.height;\n            nodeMap[node.id] = node;\n            nodeIdxMap[node.id] = i;\n        });\n        self.nodeMap = nodeMap;\n        self.nodeIdxMap = nodeIdxMap;\n        self.linkDistance = proccessToFunc(self.linkDistance, 1);\n        self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n        self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n        // node size function\n        const nodeSize = self.nodeSize;\n        let nodeSizeFunc;\n        if (self.preventOverlap) {\n            const nodeSpacing = self.nodeSpacing;\n            let nodeSpacingFunc;\n            if (isNumber(nodeSpacing)) {\n                nodeSpacingFunc = () => nodeSpacing;\n            }\n            else if (isFunction(nodeSpacing)) {\n                nodeSpacingFunc = nodeSpacing;\n            }\n            else {\n                nodeSpacingFunc = () => 0;\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = (d) => {\n                    if (d.size) {\n                        if (isArray(d.size)) {\n                            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                            return res + nodeSpacingFunc(d);\n                        }\n                        if (isObject(d.size)) {\n                            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                            return res + nodeSpacingFunc(d);\n                        }\n                        return d.size + nodeSpacingFunc(d);\n                    }\n                    return 10 + nodeSpacingFunc(d);\n                };\n            }\n            else if (isArray(nodeSize)) {\n                nodeSizeFunc = (d) => {\n                    const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n                    return res + nodeSpacingFunc(d);\n                };\n            }\n            else {\n                nodeSizeFunc = (d) => nodeSize + nodeSpacingFunc(d);\n            }\n        }\n        self.nodeSize = nodeSizeFunc;\n        const edges = self.edges;\n        self.degrees = getDegree(nodes.length, self.nodeIdxMap, edges);\n        if (!self.getMass) {\n            self.getMass = (d) => {\n                const mass = self.degrees[self.nodeIdxMap[d.id]] || 1;\n                return mass;\n            };\n        }\n        // layout\n        self.run();\n    }\n    run() {\n        const self = this;\n        const nodes = self.nodes;\n        const edges = self.edges;\n        const maxIteration = self.maxIteration;\n        if (typeof window === \"undefined\")\n            return;\n        let iter = 0;\n        // interval for render the result after each iteration\n        this.timeInterval = window.setInterval(() => {\n            const accArray = [];\n            const velArray = [];\n            if (!nodes)\n                return;\n            nodes.forEach((_, i) => {\n                accArray[2 * i] = 0;\n                accArray[2 * i + 1] = 0;\n                velArray[2 * i] = 0;\n                velArray[2 * i + 1] = 0;\n            });\n            self.calRepulsive(accArray, nodes);\n            if (edges)\n                self.calAttractive(accArray, edges);\n            self.calGravity(accArray, nodes);\n            const stepInterval = Math.max(0.02, self.interval - iter * 0.002);\n            self.updateVelocity(accArray, velArray, stepInterval, nodes);\n            const previousPos = [];\n            nodes.forEach((node) => {\n                previousPos.push({\n                    x: node.x,\n                    y: node.y\n                });\n            });\n            self.updatePosition(velArray, stepInterval, nodes);\n            if (self.tick)\n                self.tick();\n            // whether to stop the iteration\n            let movement = 0;\n            nodes.forEach((node, j) => {\n                const vx = node.x - previousPos[j].x;\n                const vy = node.y - previousPos[j].y;\n                movement += Math.sqrt(vx * vx + vy * vy);\n            });\n            movement /= nodes.length;\n            if (movement < self.minMovement) {\n                window.clearInterval(self.timeInterval);\n                if (self.onLayoutEnd)\n                    self.onLayoutEnd();\n            }\n            iter++;\n            if (iter >= maxIteration) {\n                if (self.onLayoutEnd)\n                    self.onLayoutEnd();\n                window.clearInterval(self.timeInterval);\n            }\n        }, 0);\n    }\n    calRepulsive(accArray, nodes) {\n        const self = this;\n        // const nodes = self.nodes;\n        const getMass = self.getMass;\n        const nodeStrength = self.nodeStrength;\n        const factor = self.factor;\n        const coulombDisScale = self.coulombDisScale;\n        const preventOverlap = self.preventOverlap;\n        const nodeSize = self.nodeSize;\n        nodes.forEach((ni, i) => {\n            const massi = getMass ? getMass(ni) : 1;\n            nodes.forEach((nj, j) => {\n                if (i >= j)\n                    return;\n                // if (!accArray[j]) accArray[j] = 0;\n                const vecX = ni.x - nj.x;\n                const vecY = ni.y - nj.y;\n                const vecLength = Math.sqrt(vecX * vecX + vecY * vecY) + 0.01;\n                const nVecLength = (vecLength + 0.1) * coulombDisScale;\n                const direX = vecX / vecLength;\n                const direY = vecY / vecLength;\n                const param = (((nodeStrength(ni) + nodeStrength(nj)) / 2) * factor) /\n                    (nVecLength * nVecLength);\n                const massj = getMass ? getMass(nj) : 1;\n                accArray[2 * i] += (direX * param);\n                accArray[2 * i + 1] += (direY * param);\n                accArray[2 * j] -= (direX * param);\n                accArray[2 * j + 1] -= (direY * param);\n                if (preventOverlap && vecLength < (nodeSize(ni) + nodeSize(nj)) / 2) {\n                    const paramOverlap = (nodeStrength(ni) + nodeStrength(nj)) / 2 / (vecLength * vecLength);\n                    accArray[2 * i] += (direX * paramOverlap) / massi;\n                    accArray[2 * i + 1] += (direY * paramOverlap) / massi;\n                    accArray[2 * j] -= (direX * paramOverlap) / massj;\n                    accArray[2 * j + 1] -= (direY * paramOverlap) / massj;\n                }\n            });\n        });\n    }\n    calAttractive(accArray, edges) {\n        const self = this;\n        // const edges = self.edges;\n        const nodeMap = self.nodeMap;\n        const nodeIdxMap = self.nodeIdxMap;\n        const linkDistance = self.linkDistance;\n        const edgeStrength = self.edgeStrength;\n        const getMass = self.getMass;\n        edges.forEach((edge, i) => {\n            const source = getEdgeTerminal(edge, 'source');\n            const target = getEdgeTerminal(edge, 'target');\n            const sourceNode = nodeMap[source];\n            const targetNode = nodeMap[target];\n            const vecX = targetNode.x - sourceNode.x;\n            const vecY = targetNode.y - sourceNode.y;\n            const vecLength = Math.sqrt(vecX * vecX + vecY * vecY) + 0.01;\n            const direX = vecX / vecLength;\n            const direY = vecY / vecLength;\n            const length = linkDistance(edge) || 1;\n            const diff = length - vecLength;\n            const param = diff * edgeStrength(edge);\n            const sourceIdx = nodeIdxMap[source];\n            const targetIdx = nodeIdxMap[target];\n            const massSource = getMass ? getMass(sourceNode) : 1;\n            const massTarget = getMass ? getMass(targetNode) : 1;\n            accArray[2 * sourceIdx] -= (direX * param) / massSource;\n            accArray[2 * sourceIdx + 1] -= (direY * param) / massSource;\n            accArray[2 * targetIdx] += (direX * param) / massTarget;\n            accArray[2 * targetIdx + 1] += (direY * param) / massTarget;\n        });\n    }\n    calGravity(accArray, nodes) {\n        const self = this;\n        // const nodes = self.nodes;\n        const center = self.center;\n        const defaultGravity = self.gravity;\n        const degrees = self.degrees;\n        const nodeLength = nodes.length;\n        for (let i = 0; i < nodeLength; i++) {\n            const node = nodes[i];\n            let vecX = node.x - center[0];\n            let vecY = node.y - center[1];\n            let gravity = defaultGravity;\n            if (self.getCenter) {\n                const customCenterOpt = self.getCenter(node, degrees[i]);\n                if (customCenterOpt &&\n                    isNumber(customCenterOpt[0]) &&\n                    isNumber(customCenterOpt[1]) &&\n                    isNumber(customCenterOpt[2])) {\n                    vecX = node.x - customCenterOpt[0];\n                    vecY = node.y - customCenterOpt[1];\n                    gravity = customCenterOpt[2];\n                }\n            }\n            if (!gravity)\n                continue;\n            accArray[2 * i] -= gravity * vecX;\n            accArray[2 * i + 1] -= gravity * vecY;\n        }\n    }\n    updateVelocity(accArray, velArray, stepInterval, nodes) {\n        const self = this;\n        const param = stepInterval * self.damping;\n        // const nodes = self.nodes;\n        nodes.forEach((node, i) => {\n            let vx = accArray[2 * i] * param || 0.01;\n            let vy = accArray[2 * i + 1] * param || 0.01;\n            const vLength = Math.sqrt(vx * vx + vy * vy);\n            if (vLength > self.maxSpeed) {\n                const param2 = self.maxSpeed / vLength;\n                vx = param2 * vx;\n                vy = param2 * vy;\n            }\n            velArray[2 * i] = vx;\n            velArray[2 * i + 1] = vy;\n        });\n    }\n    updatePosition(velArray, stepInterval, nodes) {\n        nodes.forEach((node, i) => {\n            if (isNumber(node.fx) && isNumber(node.fy)) {\n                node.x = node.fx;\n                node.y = node.fy;\n                return;\n            }\n            const distX = velArray[2 * i] * stepInterval;\n            const distY = velArray[2 * i + 1] * stepInterval;\n            node.x += distX;\n            node.y += distY;\n        });\n    }\n    stop() {\n        if (this.timeInterval && typeof window !== \"undefined\") {\n            window.clearInterval(this.timeInterval);\n        }\n    }\n    destroy() {\n        const self = this;\n        self.stop();\n        self.tick = null;\n        self.nodes = null;\n        self.edges = null;\n        self.destroyed = true;\n    }\n    getType() {\n        return \"gForce\";\n    }\n}\n//# sourceMappingURL=gForce.js.map"]},"metadata":{},"sourceType":"module"}