{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray } from '@antv/util';\nimport { deepAssign } from '../../../utils';\nimport { DualAxesGeometry, AxisType } from '../types';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\n\nexport function isLine(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\n\nexport function isColumn(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\n\nexport function getGeometryOption(xField, yField, geometryOption) {\n  // 空默认为线\n  return isColumn(geometryOption) ? deepAssign({}, {\n    geometry: DualAxesGeometry.Column,\n    label: geometryOption.label && geometryOption.isRange ? {\n      content: function (item) {\n        var _a;\n\n        return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n      }\n    } : undefined\n  }, geometryOption) : __assign({\n    geometry: DualAxesGeometry.Line\n  }, geometryOption);\n}\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\n\nexport function transformObjectToArray(yField, transformAttribute) {\n  var y1 = yField[0],\n      y2 = yField[1];\n\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    var a1_1 = transformAttribute[0],\n        a2_1 = transformAttribute[1];\n    return [a1_1, a2_1];\n  }\n\n  var a1 = get(transformAttribute, y1);\n  var a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\n\nexport function getYAxisWithDefault(yAxis, axisType) {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n\n  return yAxis;\n}","map":{"version":3,"sources":["../../../../src/plots/dual-axes/util/option.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,EAAc,OAAd,QAA6B,YAA7B;AAEA,SAAS,UAAT,QAA2B,gBAA3B;AACA,SAGE,gBAHF,EAME,QANF,QAOO,UAPP;AAQA,SAAS,yBAAT,EAAoC,0BAApC,QAAsE,aAAtE;AAEA;;AAEG;;AACH,OAAM,SAAU,MAAV,CAAiB,cAAjB,EAA+C;AACnD,SAAO,GAAG,CAAC,cAAD,EAAiB,UAAjB,CAAH,KAAoC,gBAAgB,CAAC,IAA5D;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,QAAV,CAAmB,cAAnB,EAAiD;AACrD,SAAO,GAAG,CAAC,cAAD,EAAiB,UAAjB,CAAH,KAAoC,gBAAgB,CAAC,MAA5D;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA4C,MAA5C,EAA4D,cAA5D,EAA0F;AAC9F;AACA,SAAO,QAAQ,CAAC,cAAD,CAAR,GACH,UAAU,CACR,EADQ,EAER;AACE,IAAA,QAAQ,EAAE,gBAAgB,CAAC,MAD7B;AAEE,IAAA,KAAK,EACH,cAAc,CAAC,KAAf,IAAwB,cAAc,CAAC,OAAvC,GACI;AACE,MAAA,OAAO,EAAE,UAAC,IAAD,EAAa;;;AACpB,eAAA,CAAA,EAAA,GAAO,IAAI,CAAC,MAAD,CAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,IAAF,CAAO,GAAP,CAAnB;AACD;AAHH,KADJ,GAMI;AATR,GAFQ,EAaR,cAbQ,CADP,GAgBJ,QAAA,CAAA;AACG,IAAA,QAAQ,EAAE,gBAAgB,CAAC;AAD9B,GAAA,EAEM,cAFN,CAhBH;AAoBD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,sBAAV,CACJ,MADI,EAEJ,kBAFI,EAE2C;AAExC,MAAA,EAAE,GAAQ,MAAM,CAAd,CAAc,CAAhB;AAAA,MAAI,EAAE,GAAI,MAAM,CAAV,CAAU,CAAhB;;AAEP,MAAI,OAAO,CAAC,kBAAD,CAAX,EAAiC;AAC/B;AACO,QAAA,IAAE,GAAQ,kBAAkB,CAA1B,CAA0B,CAA5B;AAAA,QAAI,IAAE,GAAI,kBAAkB,CAAtB,CAAsB,CAA5B;AACP,WAAO,CAAC,IAAD,EAAK,IAAL,CAAP;AACD;;AACD,MAAM,EAAE,GAAG,GAAG,CAAC,kBAAD,EAAqB,EAArB,CAAd;AACA,MAAM,EAAE,GAAG,GAAG,CAAC,kBAAD,EAAqB,EAArB,CAAd;AACA,SAAO,CAAC,EAAD,EAAK,EAAL,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAA2C,QAA3C,EAA6D;AACjE,MAAI,QAAQ,KAAK,QAAQ,CAAC,IAA1B,EAAgC;AAC9B,WAAO,KAAK,KAAK,KAAV,GAAkB,KAAlB,GAA0B,UAAU,CAAC,EAAD,EAAK,yBAAL,EAAgC,KAAhC,CAA3C;AACD,GAFD,MAEO,IAAI,QAAQ,KAAK,QAAQ,CAAC,KAA1B,EAAiC;AACtC,WAAO,KAAK,KAAK,KAAV,GAAkB,KAAlB,GAA0B,UAAU,CAAC,EAAD,EAAK,0BAAL,EAAiC,KAAjC,CAA3C;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import { get, isArray } from '@antv/util';\nimport { Axis } from '../../../types/axis';\nimport { deepAssign } from '../../../utils';\nimport {\n  DualAxesOptions,\n  GeometryOption,\n  DualAxesGeometry,\n  GeometryLineOption,\n  GeometryColumnOption,\n  AxisType,\n} from '../types';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\nexport function isLine(geometryOption: GeometryOption): geometryOption is GeometryLineOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\nexport function isColumn(geometryOption: GeometryOption): geometryOption is GeometryColumnOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\nexport function getGeometryOption(xField: string, yField: string, geometryOption: GeometryOption): GeometryOption {\n  // 空默认为线\n  return isColumn(geometryOption)\n    ? deepAssign(\n        {},\n        {\n          geometry: DualAxesGeometry.Column,\n          label:\n            geometryOption.label && geometryOption.isRange\n              ? {\n                  content: (item: object) => {\n                    return item[yField]?.join('-');\n                  },\n                }\n              : undefined,\n        },\n        geometryOption\n      )\n    : {\n        geometry: DualAxesGeometry.Line,\n        ...geometryOption,\n      };\n}\n\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\nexport function transformObjectToArray(\n  yField: DualAxesOptions['yField'],\n  transformAttribute: Record<string, any> | any[]\n): any[] {\n  const [y1, y2] = yField;\n\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    const [a1, a2] = transformAttribute;\n    return [a1, a2];\n  }\n  const a1 = get(transformAttribute, y1);\n  const a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\nexport function getYAxisWithDefault(yAxis: Axis, axisType: AxisType): Axis {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n  return yAxis;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}