{"ast":null,"code":"export function getUniformLengthByType(type) {\n  var arrayLength = 0;\n\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n\n    case 'mat3':\n      arrayLength = 9;\n      break;\n\n    case 'mat4':\n      arrayLength = 16;\n      break;\n\n    default:\n  }\n\n  return arrayLength;\n}\nvar uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(content) {\n  var uniforms = {};\n  content = content.replace(uniformRegExp, function (_, type, c) {\n    var defaultValues = c.split(':');\n    var uniformName = defaultValues[0].trim();\n    var defaultValue = '';\n\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    } // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n\n\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue.replace('[', '').replace(']', '').split(',').reduce(function (prev, cur) {\n            prev.push(Number(cur.trim()));\n            return prev;\n          }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n\n        break;\n\n      default:\n    } // @ts-ignore\n\n\n    uniforms[uniformName] = defaultValue;\n    return \"uniform \".concat(type, \" \").concat(uniformName, \";\\n\");\n  });\n  return {\n    content: content,\n    uniforms: uniforms\n  };\n}","map":{"version":3,"sources":["../../src/utils/shader-module.ts"],"names":["arrayLength","uniformRegExp","uniforms","content","defaultValues","c","uniformName","defaultValue","Number","prev","cur","getUniformLengthByType"],"mappings":"AAAA,OAAO,SAAA,sBAAA,CAAA,IAAA,EAAsD;AAC3D,MAAIA,WAAW,GAAf,CAAA;;AACA,UAAA,IAAA;AACE,SAAA,MAAA;AACA,SAAA,OAAA;AACEA,MAAAA,WAAW,GAAXA,CAAAA;AACA;;AACF,SAAA,MAAA;AACA,SAAA,OAAA;AACEA,MAAAA,WAAW,GAAXA,CAAAA;AACA;;AACF,SAAA,MAAA;AACA,SAAA,OAAA;AACA,SAAA,MAAA;AACEA,MAAAA,WAAW,GAAXA,CAAAA;AACA;;AACF,SAAA,MAAA;AACEA,MAAAA,WAAW,GAAXA,CAAAA;AACA;;AACF,SAAA,MAAA;AACEA,MAAAA,WAAW,GAAXA,EAAAA;AACA;;AACF;AApBF;;AAsBA,SAAA,WAAA;AACD;AAED,IAAMC,aAAa,GAAnB,iHAAA;AACA,OAAO,SAAA,eAAA,CAAA,OAAA,EAOL;AACA,MAAMC,QAAQ,GAAd,EAAA;AACAC,EAAAA,OAAO,GAAG,OAAO,CAAP,OAAA,CAAA,aAAA,EAA+B,UAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAgB;AACvD,QAAMC,aAAa,GAAGC,CAAC,CAADA,KAAAA,CAAtB,GAAsBA,CAAtB;AACA,QAAMC,WAAW,GAAGF,aAAa,CAAbA,CAAa,CAAbA,CAApB,IAAoBA,EAApB;AACA,QAAIG,YAAiB,GAArB,EAAA;;AACA,QAAIH,aAAa,CAAbA,MAAAA,GAAJ,CAAA,EAA8B;AAC5BG,MAAAA,YAAY,GAAGH,aAAa,CAAbA,CAAa,CAAbA,CAAfG,IAAeH,EAAfG;AALqD,KAAA,CAQvD;AACA;;;AACA,YAAA,IAAA;AACE,WAAA,MAAA;AACEA,QAAAA,YAAY,GAAGA,YAAY,KAA3BA,MAAAA;AACA;;AACF,WAAA,OAAA;AACA,WAAA,KAAA;AACEA,QAAAA,YAAY,GAAGC,MAAM,CAArBD,YAAqB,CAArBA;AACA;;AACF,WAAA,MAAA;AACA,WAAA,MAAA;AACA,WAAA,MAAA;AACA,WAAA,OAAA;AACA,WAAA,OAAA;AACA,WAAA,OAAA;AACA,WAAA,MAAA;AACA,WAAA,MAAA;AACA,WAAA,MAAA;AACE,YAAA,YAAA,EAAkB;AAChBA,UAAAA,YAAY,GAAG,YAAY,CAAZ,OAAA,CAAA,GAAA,EAAA,EAAA,EAAA,OAAA,CAAA,GAAA,EAAA,EAAA,EAAA,KAAA,CAAA,GAAA,EAAA,MAAA,CAIL,UAAA,IAAA,EAAA,GAAA,EAAiC;AACvCE,YAAAA,IAAI,CAAJA,IAAAA,CAAUD,MAAM,CAACE,GAAG,CAApBD,IAAiBC,EAAD,CAAhBD;AACA,mBAAA,IAAA;AANW,WAAA,EAAfF,EAAe,CAAfA;AADF,SAAA,MASO;AACLA,UAAAA,YAAY,GAAG,IAAA,KAAA,CAAUI,sBAAsB,CAAhC,IAAgC,CAAhC,EAAA,IAAA,CAAfJ,CAAe,CAAfA;AACD;;AACD;;AACF;AA9BF,KAVuD,CA2CvD;;;AACAL,IAAAA,QAAQ,CAARA,WAAQ,CAARA,GAAAA,YAAAA;AACA,WAAA,WAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CAAA,WAAA,EAAA,KAAA,CAAA;AA7CFC,GAAU,CAAVA;AA+CA,SAAO;AACLA,IAAAA,OAAO,EADF,OAAA;AAELD,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID","sourcesContent":["export function getUniformLengthByType(type: string): number {\n  let arrayLength = 0;\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n    case 'mat3':\n      arrayLength = 9;\n      break;\n    case 'mat4':\n      arrayLength = 16;\n      break;\n    default:\n  }\n  return arrayLength;\n}\n\nconst uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(\n  content: string,\n): {\n  content: string;\n  uniforms: {\n    [key: string]: any;\n  };\n} {\n  const uniforms = {};\n  content = content.replace(uniformRegExp, (_, type, c) => {\n    const defaultValues = c.split(':');\n    const uniformName = defaultValues[0].trim();\n    let defaultValue: any = '';\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    }\n\n    // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue\n            .replace('[', '')\n            .replace(']', '')\n            .split(',')\n            .reduce((prev: number[], cur: string) => {\n              prev.push(Number(cur.trim()));\n              return prev;\n            }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n        break;\n      default:\n    }\n\n    // @ts-ignore\n    uniforms[uniformName] = defaultValue;\n    return `uniform ${type} ${uniformName};\\n`;\n  });\n  return {\n    content,\n    uniforms,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}