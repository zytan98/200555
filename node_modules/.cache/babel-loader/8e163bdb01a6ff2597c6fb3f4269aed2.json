{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { RenderPass } from './RenderPass';\nvar PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0\n};\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n\nexport var PixelPickingPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ResourcePool), _dec4 = inject(IDENTIFIER.RenderPassFactory), _dec5 = inject(IDENTIFIER.MeshComponentManager), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function PixelPickingPass() {\n    var _this = this;\n\n    _classCallCheck(this, PixelPickingPass);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"renderPassFactory\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor4, this);\n\n    this.pickingFBO = void 0;\n    this.views = void 0;\n    this.highlightEnabled = true;\n    this.highlightColor = [255, 0, 0, 255];\n    this.alreadyInRendering = false;\n\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'picking fbo', {\n        width: 1,\n        height: 1\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      }; // 防止被 FrameGraph 剔除\n\n      passNode.hasSideEffect = true;\n    };\n\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.views = views;\n\n                if (!_this.alreadyInRendering) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _iterator = _createForOfIteratorHelper(views);\n\n                try {\n                  _loop = function _loop() {\n                    var view = _step.value;\n\n                    var _view$getViewport = view.getViewport(),\n                        width = _view$getViewport.width,\n                        height = _view$getViewport.height; // throttled\n\n\n                    _this.alreadyInRendering = true; // 实例化资源\n\n                    var resourceNode = fg.getResourceNode(pass.data.output);\n                    _this.pickingFBO = _this.resourcePool.getOrCreateResource(resourceNode.resource); // TODO: only draw 1x1 quad, with offset camera\n\n                    _this.pickingFBO.resize({\n                      width: width,\n                      height: height\n                    });\n\n                    _this.engine.useFramebuffer(_this.pickingFBO, function () {\n                      _this.engine.clear({\n                        framebuffer: _this.pickingFBO,\n                        color: [0, 0, 0, 0],\n                        stencil: 0,\n                        depth: 1\n                      }); // 渲染\n\n\n                      var renderPass = _this.renderPassFactory(RenderPass.IDENTIFIER); // 修改所有\n\n\n                      var meshes = [];\n                      var scene = view.getScene();\n\n                      var _iterator2 = _createForOfIteratorHelper(scene.getEntities()),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var meshEntity = _step2.value;\n\n                          var mesh = _this.mesh.getComponentByEntity(meshEntity);\n\n                          var material = mesh.material;\n                          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n                          meshes.push(mesh);\n                        } // @ts-ignore\n\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      renderPass.renderView(view);\n                      meshes.forEach(function (mesh) {\n                        var material = mesh.material;\n                        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n                      });\n                      _this.alreadyInRendering = false;\n                    });\n                  };\n\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.pick = function (_ref2, view) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      var _this$engine = _this.engine,\n          readPixels = _this$engine.readPixels,\n          useFramebuffer = _this$engine.useFramebuffer;\n\n      var _view$getViewport2 = view.getViewport(),\n          width = _view$getViewport2.width,\n          height = _view$getViewport2.height;\n\n      var xInDevicePixel = x * window.devicePixelRatio;\n      var yInDevicePixel = y * window.devicePixelRatio; // const xInDevicePixel = x;\n      // const yInDevicePixel = y;\n\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n\n      var pickedColors;\n      var pickedFeatureIdx;\n      useFramebuffer(_this.pickingFBO, function () {\n        // avoid realloc\n        pickedColors = readPixels({\n          x: Math.round(xInDevicePixel),\n          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n          y: Math.round(height - (y + 1) * window.devicePixelRatio),\n          // y: Math.round(height - (y + 1)),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          pickedFeatureIdx = decodePickingColor(pickedColors);\n\n          if (_this.highlightEnabled) {\n            // 高亮\n            _this.highlightPickedFeature(pickedColors, view);\n          }\n        }\n      });\n      return pickedFeatureIdx;\n    };\n  }\n\n  _createClass(PixelPickingPass, [{\n    key: \"enableHighlight\",\n    value: function enableHighlight(enabled) {\n      this.highlightEnabled = enabled;\n    }\n  }, {\n    key: \"setHighlightColor\",\n    value: function setHighlightColor(color) {\n      this.highlightColor = color;\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n\n    /**\n     * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n     * 1. 鼠标移走时无法恢复\n     * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n     * 因此高亮还是放在 shader 中做比较好\n     */\n    value: function highlightPickedFeature(pickedColors, view) {\n      if (pickedColors) {\n        var _iterator3 = _createForOfIteratorHelper(view.getScene().getEntities()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var meshEntity = _step3.value;\n            var mesh = this.mesh.getComponentByEntity(meshEntity);\n            var material = mesh.material;\n            material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n            material.setUniform('u_PickingColor', [pickedColors[0], pickedColors[1], pickedColors[2]]);\n            material.setUniform('u_HighlightColor', this.highlightColor);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }]);\n\n  return PixelPickingPass;\n}(), _class3.IDENTIFIER = 'PixelPicking Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"renderPassFactory\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../../src/components/renderer/passes/PixelPickingPass.ts"],"names":["PickingStage","NONE","ENCODE","HIGHLIGHT","injectable","PixelPickingPass","inject","IDENTIFIER","output","width","height","pass","passNode","view","resourceNode","fg","framebuffer","color","stencil","depth","renderPass","RenderPass","meshes","scene","meshEntity","mesh","material","x","y","readPixels","useFramebuffer","xInDevicePixel","window","yInDevicePixel","pickedColors","Math","data","pickingFBO","pickedFeatureIdx","decodePickingColor"],"mappings":"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","sourcesContent":["import { inject, injectable, named } from 'inversify';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IRendererService, IView } from '../IRendererService';\nimport { IRenderPass } from './IRenderPass';\nimport { RenderPass, RenderPassData } from './RenderPass';\n\nexport interface PixelPickingPassData {\n  output: FrameGraphHandle;\n}\n\nconst PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0,\n};\n\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n@injectable()\nexport class PixelPickingPass implements IRenderPass<PixelPickingPassData> {\n  public static IDENTIFIER = 'PixelPicking Pass';\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  @inject(IDENTIFIER.RenderPassFactory)\n  private readonly renderPassFactory: <T>(name: string) => IRenderPass<T>;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  private pickingFBO: IFramebuffer;\n  private views: IView[];\n  private highlightEnabled = true;\n  private highlightColor = [255, 0, 0, 255];\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public enableHighlight(enabled: boolean) {\n    this.highlightEnabled = enabled;\n  }\n\n  public setHighlightColor(color: number[]) {\n    this.highlightColor = color;\n  }\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<PixelPickingPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'picking fbo', {\n      width: 1,\n      height: 1,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n\n    // 防止被 FrameGraph 剔除\n    passNode.hasSideEffect = true;\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<PixelPickingPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    this.views = views;\n\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    for (const view of views) {\n      const { width, height } = view.getViewport();\n      // throttled\n      this.alreadyInRendering = true;\n\n      // 实例化资源\n      const resourceNode = fg.getResourceNode(pass.data.output);\n      this.pickingFBO = this.resourcePool.getOrCreateResource(\n        resourceNode.resource,\n      );\n\n      // TODO: only draw 1x1 quad, with offset camera\n      this.pickingFBO.resize({ width, height });\n      this.engine.useFramebuffer(this.pickingFBO, () => {\n        this.engine.clear({\n          framebuffer: this.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1,\n        });\n\n        // 渲染\n        const renderPass = this.renderPassFactory<RenderPassData>(\n          RenderPass.IDENTIFIER,\n        );\n\n        // 修改所有\n        const meshes: MeshComponent[] = [];\n        const scene = view.getScene();\n        for (const meshEntity of scene.getEntities()) {\n          const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n          meshes.push(mesh);\n        }\n\n        // @ts-ignore\n        renderPass.renderView(view);\n        meshes.forEach((mesh) => {\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n        });\n\n        this.alreadyInRendering = false;\n      });\n    }\n  };\n\n  public pick = ({ x, y }: { x: number; y: number }, view: IView) => {\n    const { readPixels, useFramebuffer } = this.engine;\n    const { width, height } = view.getViewport();\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    // const xInDevicePixel = x;\n    // const yInDevicePixel = y;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n\n    let pickedColors: Uint8Array | undefined;\n    let pickedFeatureIdx: number | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * window.devicePixelRatio),\n        // y: Math.round(height - (y + 1)),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        pickedFeatureIdx = decodePickingColor(pickedColors);\n\n        if (this.highlightEnabled) {\n          // 高亮\n          this.highlightPickedFeature(pickedColors, view);\n        }\n      }\n    });\n    return pickedFeatureIdx;\n  };\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   */\n  private highlightPickedFeature(\n    pickedColors: Uint8Array | undefined,\n    view: IView,\n  ) {\n    if (pickedColors) {\n      for (const meshEntity of view.getScene().getEntities()) {\n        const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n        const material = mesh.material;\n        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n\n        material.setUniform('u_PickingColor', [\n          pickedColors[0],\n          pickedColors[1],\n          pickedColors[2],\n        ]);\n        material.setUniform('u_HighlightColor', this.highlightColor);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}