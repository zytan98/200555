{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n/**\n * 处理字段数据\n * @param params\n */\n\nfunction field(params) {\n  var chart = params.chart,\n      options = params.options;\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      yField = options.yField,\n      maxSize = options.maxSize,\n      minSize = options.minSize;\n  var formatData = transformData(data, data, {\n    yField: yField,\n    maxSize: maxSize,\n    minSize: minSize\n  }); // 绘制漏斗图\n\n  chart.data(formatData);\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      color = options.color,\n      tooltip = options.tooltip,\n      label = options.label,\n      _a = options.shape,\n      shape = _a === void 0 ? 'funnel' : _a,\n      funnelStyle = options.funnelStyle,\n      state = options.state;\n\n  var _b = getTooltipMapping(tooltip, [xField, yField]),\n      fields = _b.fields,\n      formatter = _b.formatter;\n\n  baseGeometry({\n    chart: chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape: shape,\n        tooltip: formatter,\n        color: color,\n        style: funnelStyle\n      },\n      label: label,\n      state: state\n    }\n  });\n  var geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n  return params;\n}\n/**\n * 转置处理\n * @param params\n */\n\n\nfunction transpose(params) {\n  var chart = params.chart,\n      options = params.options;\n  var isTransposed = options.isTransposed;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : []\n  });\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\n\n\nfunction conversionTag(params) {\n  var options = params.options;\n  var maxSize = options.maxSize;\n\n  var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {\n    var percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return __assign(__assign({}, initLineOption), {\n      start: [datumIndex - 0.5, percent],\n      end: [datumIndex - 0.5, percent + 0.05]\n    });\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n  return params;\n}\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\n\n\nexport function basicFunnel(params) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}","map":{"version":3,"sources":["../../../../src/plots/funnel/geometries/basic.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from '@antv/g2';\nimport { isArray } from '@antv/util';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { Params } from '../../../core/adaptor';\nimport { Datum, Data } from '../../../types/common';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FunnelOptions } from '../types';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { data = [], yField, maxSize, minSize } = options;\n  const formatData = transformData(data, data, {\n    yField,\n    maxSize,\n    minSize,\n  });\n\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { xField, yField, color, tooltip, label, shape = 'funnel', funnelStyle, state } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField]);\n\n  baseGeometry({\n    chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape,\n        tooltip: formatter,\n        color,\n        style: funnelStyle,\n      },\n      label,\n      state,\n    },\n  });\n\n  const geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n\n  return params;\n}\n\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { isTransposed } = options;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : [],\n  });\n  return params;\n}\n\n/**\n * 转化率组件\n * @param params\n */\nfunction conversionTag(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { options } = params;\n  const { maxSize } = options;\n\n  const getLineCoordinate = (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ): Types.LineOption => {\n    const percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return {\n      ...initLineOption,\n      start: [datumIndex - 0.5, percent],\n      end: [datumIndex - 0.5, percent + 0.05],\n    };\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n\n  return params;\n}\n\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params: Params<FunnelOptions>) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}