{"ast":null,"code":"import { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n\n    var behaviorSet = [];\n\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_1 = behaviorSet.length;\n\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_2 = behaviorSet.length;\n\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-core/es/graph/controller/mode.js"],"names":["each","isArray","isString","Behavior","ModeController","graph","destroyed","modes","get","default","formatModes","mode","currentBehaves","setMode","prototype","behavior","i","type","setBehaviors","behaviors","behaves","behave","BehaviorInstance","getBehavior","bind","push","mergeBehaviors","modeBehaviors","indexOf","filterBehaviors","result","forEach","_a","current","emit","delegate","remove","unbind","getMode","manipulateBehaviors","isAdd","_this","currentMode","updateBehavior","newCfg","behaviorSet","length","console","warn","length_1","updateCfg","length_2","Object","assign","destroy"],"mappings":"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","sourcesContent":["import { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n\n    var behaviorSet = [];\n\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_1 = behaviorSet.length;\n\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_2 = behaviorSet.length;\n\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;"]},"metadata":{},"sourceType":"module"}