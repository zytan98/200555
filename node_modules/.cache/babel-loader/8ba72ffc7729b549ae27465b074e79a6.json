{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport { deepMix, each, isFunction } from '@antv/util';\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\n\nvar LinkByColor =\n/** @class */\nfunction (_super) {\n  __extends(LinkByColor, _super);\n\n  function LinkByColor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cache = {};\n    return _this;\n  } // 获取颜色对应的 scale\n\n\n  LinkByColor.prototype.getColorScale = function (view, element) {\n    var colorAttr = element.geometry.getAttribute('color');\n\n    if (!colorAttr) {\n      return null;\n    }\n\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }; // 获取连接的 path\n\n\n  LinkByColor.prototype.getLinkPath = function (element, nextElement) {\n    var view = this.context.view;\n    var isTransposed = view.getCoordinate().isTransposed;\n    var bbox = element.shape.getCanvasBBox();\n    var nextBBox = nextElement.shape.getCanvasBBox();\n    var path = isTransposed ? [['M', bbox.minX, bbox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', nextBBox.maxX, nextBBox.maxY], ['L', bbox.maxX, bbox.minY], ['Z']] : [['M', bbox.maxX, bbox.minY], ['L', nextBBox.minX, nextBBox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', bbox.maxX, bbox.maxY], ['Z']];\n    return path;\n  }; // 添加连接的图形\n\n\n  LinkByColor.prototype.addLinkShape = function (group, element, nextElement, activeStyle) {\n    var style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill')\n    };\n    group.addShape({\n      type: 'path',\n      attrs: __assign(__assign({}, deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle)), {\n        path: this.getLinkPath(element, nextElement)\n      })\n    });\n  }; // 使用图形连接\n\n\n  LinkByColor.prototype.linkByElement = function (element, activeStyle) {\n    var _this = this;\n\n    var view = this.context.view;\n    var scale = this.getColorScale(view, element);\n\n    if (!scale) {\n      return;\n    }\n\n    var value = getElementValue(element, scale.field);\n\n    if (!this.cache[value]) {\n      var elements_1 = getElementsByField(view, scale.field, value);\n      var linkGroup = this.linkGroup;\n      var group_1 = linkGroup.addGroup();\n      this.cache[value] = group_1; // 缓存\n\n      var count_1 = elements_1.length;\n      each(elements_1, function (el, index) {\n        if (index < count_1 - 1) {\n          var nextEl = elements_1[index + 1];\n\n          _this.addLinkShape(group_1, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }; // 移除连接\n\n\n  LinkByColor.prototype.removeLink = function (element) {\n    var scale = this.getColorScale(this.context.view, element);\n\n    if (!scale) {\n      return;\n    }\n\n    var value = getElementValue(element, scale.field);\n\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  };\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n\n\n  LinkByColor.prototype.link = function (args) {\n    var context = this.context;\n\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false\n      });\n    }\n\n    var element = getCurrentElement(context);\n\n    if (element) {\n      this.linkByElement(element, args === null || args === void 0 ? void 0 : args.style);\n    }\n  };\n  /**\n   * 取消连接 elements\n   */\n\n\n  LinkByColor.prototype.unlink = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      this.removeLink(element);\n    }\n  };\n  /**\n   * 清除所有连接\n   */\n\n\n  LinkByColor.prototype.clear = function () {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n\n    this.cache = {};\n  };\n  /**\n   * 销毁\n   */\n\n\n  LinkByColor.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  };\n\n  return LinkByColor;\n}(Action);\n\nexport default LinkByColor;","map":{"version":3,"sources":["../../../../src/interaction/action/element/link-by-color.ts"],"names":[],"mappings":"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","sourcesContent":["import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { deepMix, each, isFunction } from '@antv/util';\nimport { LooseObject } from '../../../interface';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\n\ntype LinkActiveStyle = ShapeAttrs | ((style: ShapeAttrs, Element: Element) => ShapeAttrs);\n\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const view = this.context.view;\n    const { isTransposed } = view.getCoordinate();\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox = nextElement.shape.getCanvasBBox();\n    const path = isTransposed\n      ? [\n          ['M', bbox.minX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', nextBBox.maxX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.minY],\n          ['Z'],\n        ]\n      : [\n          ['M', bbox.maxX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.maxY],\n          ['Z'],\n        ];\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group: IGroup, element: Element, nextElement: Element, activeStyle?: LinkActiveStyle) {\n    const style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill'),\n    };\n    group.addShape({\n      type: 'path',\n      attrs: {\n        ...deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle),\n        path: this.getLinkPath(element, nextElement),\n      },\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element, activeStyle?: LinkActiveStyle) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count - 1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  public link(args?: { style: LinkActiveStyle }) {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false,\n      });\n    }\n    const element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args?.style);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  public unlink() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  public clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}