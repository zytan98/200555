{"ast":null,"code":"// from https://github.com/simple-statistics\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nexport function quantileSorted(x, p) {\n  var idx = x.length * p;\n\n  if (x.length === 0) {\n    throw new Error('quantile requires at least one data point.');\n  } else if (p < 0 || p > 1) {\n    throw new Error('quantiles must be between 0 and 1');\n  } else if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\n/**\n * 交换数组位置\n * @param arr T[]\n * @param i number\n * @param j number\n */\n\nexport function swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\n\nexport function quickselect(arr, k, left, right) {\n  left = left || 0;\n  right = right || arr.length - 1;\n\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n\n    var t = arr[k];\n    var i = left;\n    var j = right;\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n\n      while (arr[i] < t) i++;\n\n      while (arr[j] > t) j--;\n    }\n\n    if (arr[left] === t) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\nfunction quantile(x, p) {\n  var copy = x.slice();\n\n  if (Array.isArray(p)) {\n    // rearrange elements so that each element corresponding to a requested\n    // quantile is on a place it would be if the array was fully sorted\n    multiQuantileSelect(copy, p); // Initialize the result array\n\n    var results = []; // For each requested quantile\n\n    for (var i = 0; i < p.length; i++) {\n      results[i] = quantileSorted(copy, p[i]);\n    }\n\n    return results;\n  } else {\n    var idx = quantileIndex(copy.length, p);\n    quantileSelect(copy, idx, 0, copy.length - 1);\n    return quantileSorted(copy, p);\n  }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n  if (k % 1 === 0) {\n    quickselect(arr, k, left, right);\n  } else {\n    k = Math.floor(k);\n    quickselect(arr, k, left, right);\n    quickselect(arr, k + 1, k + 1, right);\n  }\n}\n\nfunction multiQuantileSelect(arr, p) {\n  var indices = [0];\n\n  for (var i = 0; i < p.length; i++) {\n    indices.push(quantileIndex(arr.length, p[i]));\n  }\n\n  indices.push(arr.length - 1);\n  indices.sort(compare);\n  var stack = [0, indices.length - 1];\n\n  while (stack.length) {\n    var r = Math.ceil(stack.pop());\n    var l = Math.floor(stack.pop());\n    if (r - l <= 1) continue;\n    var m = Math.floor((l + r) / 2);\n    quantileSelect(arr, indices[m], Math.floor(indices[l]), Math.ceil(indices[r]));\n    stack.push(l, m, m, r);\n  }\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction quantileIndex(len, p) {\n  var idx = len * p;\n\n  if (p === 1) {\n    // If p is 1, directly return the last index\n    return len - 1;\n  } else if (p === 0) {\n    // If p is 0, directly return the first index\n    return 0;\n  } else if (idx % 1 !== 0) {\n    // If index is not integer, return the next index in array\n    return Math.ceil(idx) - 1;\n  } else if (len % 2 === 0) {\n    // If the list has even-length, we'll return the middle of two indices\n    // around quantile to indicate that we need an average value of the two\n    return idx - 0.5;\n  } else {\n    // Finally, in the simple case of an integer index\n    // with an odd-length list, return the index\n    return idx;\n  }\n}\n\nexport { quantile };","map":{"version":3,"sources":["../../../src/utils/transform/quantile.ts"],"names":[],"mappings":"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","sourcesContent":["// from https://github.com/simple-statistics\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nexport function quantileSorted(x: number[], p: number) {\n  const idx = x.length * p;\n  if (x.length === 0) {\n    throw new Error('quantile requires at least one data point.');\n  } else if (p < 0 || p > 1) {\n    throw new Error('quantiles must be between 0 and 1');\n  } else if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\n\n/**\n * 交换数组位置\n * @param arr T[]\n * @param i number\n * @param j number\n */\nexport function swap<T = any>(arr: T[], i: number, j: number): void {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nexport function quickselect(arr: number[], k, left?: number, right?: number): void {\n  left = left || 0;\n  right = right || arr.length - 1;\n\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp((2 * z) / 3);\n      let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n      const newRight = Math.min(right, Math.floor(k + ((n - m) * s) / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n\n    const t = arr[k];\n    let i = left;\n    let j = right;\n\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (arr[i] < t) i++;\n      while (arr[j] > t) j--;\n    }\n\n    if (arr[left] === t) swap(arr, left, j);\n    else {\n      j++;\n      swap(arr, j, right);\n    }\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x: number[], p: number): number;\nfunction quantile(x: number[], p: number[]): number[];\nfunction quantile(x: any, p: any): any {\n  const copy = x.slice();\n\n  if (Array.isArray(p)) {\n    // rearrange elements so that each element corresponding to a requested\n    // quantile is on a place it would be if the array was fully sorted\n    multiQuantileSelect(copy, p);\n    // Initialize the result array\n    const results: number[] = [];\n    // For each requested quantile\n    for (let i = 0; i < p.length; i++) {\n      results[i] = quantileSorted(copy, p[i]);\n    }\n    return results;\n  } else {\n    const idx = quantileIndex(copy.length, p);\n    quantileSelect(copy, idx, 0, copy.length - 1);\n    return quantileSorted(copy, p);\n  }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n  if (k % 1 === 0) {\n    quickselect(arr, k, left, right);\n  } else {\n    k = Math.floor(k);\n    quickselect(arr, k, left, right);\n    quickselect(arr, k + 1, k + 1, right);\n  }\n}\n\nfunction multiQuantileSelect(arr, p) {\n  const indices = [0];\n  for (let i = 0; i < p.length; i++) {\n    indices.push(quantileIndex(arr.length, p[i]));\n  }\n  indices.push(arr.length - 1);\n  indices.sort(compare);\n\n  const stack = [0, indices.length - 1];\n\n  while (stack.length) {\n    const r = Math.ceil(stack.pop());\n    const l = Math.floor(stack.pop());\n    if (r - l <= 1) continue;\n\n    const m = Math.floor((l + r) / 2);\n    quantileSelect(arr, indices[m], Math.floor(indices[l]), Math.ceil(indices[r]));\n\n    stack.push(l, m, m, r);\n  }\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction quantileIndex(len, p) {\n  const idx = len * p;\n  if (p === 1) {\n    // If p is 1, directly return the last index\n    return len - 1;\n  } else if (p === 0) {\n    // If p is 0, directly return the first index\n    return 0;\n  } else if (idx % 1 !== 0) {\n    // If index is not integer, return the next index in array\n    return Math.ceil(idx) - 1;\n  } else if (len % 2 === 0) {\n    // If the list has even-length, we'll return the middle of two indices\n    // around quantile to indicate that we need an average value of the two\n    return idx - 0.5;\n  } else {\n    // Finally, in the simple case of an integer index\n    // with an odd-length list, return the index\n    return idx;\n  }\n}\n\nexport { quantile };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}