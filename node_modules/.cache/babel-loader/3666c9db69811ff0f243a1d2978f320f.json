{"ast":null,"code":"import { clone } from \"@antv/util\";\nimport { Graph, VACANT_NODE_LABEL, VACANT_GRAPH_ID, VACANT_EDGE_LABEL } from \"./struct\";\n\nvar DFSedge =\n/** @class */\nfunction () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || VACANT_NODE_LABEL\n    };\n  }\n\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n\n  return DFSedge;\n}(); // DFScode 是 DESedge 的数组\n\n\nvar DFScode =\n/** @class */\nfunction () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n\n    return true;\n  };\n\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n\n\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n\n\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = VACANT_GRAPH_ID;\n    }\n\n    if (directed === void 0) {\n      directed = false;\n    }\n\n    var graph = new Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  }; // 建立 rightmost path\n\n\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n\n    return this.rmpath;\n  };\n\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n\n  return DFScode;\n}();\n\nvar History =\n/** @class */\nfunction () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    } // 倒序\n\n\n    this.edges = this.edges.reverse();\n  }\n\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n\n  return History;\n}();\n\nvar GSpan =\n/** @class */\nfunction () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n        _b = _a.minSupport,\n        minSupport = _b === void 0 ? 2 : _b,\n        _c = _a.minNodeNum,\n        minNodeNum = _c === void 0 ? 1 : _c,\n        _d = _a.maxNodeNum,\n        maxNodeNum = _d === void 0 ? 4 : _d,\n        _e = _a.top,\n        top = _e === void 0 ? 10 : _e,\n        _f = _a.directed,\n        directed = _f === void 0 ? false : _f,\n        _g = _a.verbose,\n        verbose = _g === void 0 ? false : _g; // -------- 第零步，初始化-------\n\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0; // TODO? timestamp = {}\n\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  } // Line 352\n\n\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = node.label + \"-\" + edge.label + \"-\" + otherNode.label;\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    }); // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n\n    var minLabel = this.findMinLabel(root); // line 419\n\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2)); // line 423\n\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n\n      var backwardRoot = {};\n      var flag = false,\n          newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\"; // line 435\n\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n\n        if (state_1 === \"break\") break;\n      }\n\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = edge.label + \"-\" + nodeMap[edge.to].label;\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = edge.label + \"-\" + nodeMap[edge.to].label;\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n\n        if (state_2 === \"break\") break;\n      }\n\n      if (!flag) return true;\n\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[forwardMinEdgeNodeLabel.edgeLabel + \"-\" + forwardMinEdgeNodeLabel.nodeLabel2].projected);\n    };\n\n    var key = minLabel.nodeLabel1 + \"-\" + minLabel.edgeLabel + \"-\" + minLabel.nodeLabel2;\n    return projectIsMin(root[key].projected);\n  };\n\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push(clone(graph));\n  };\n\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p); // backward Line 526\n\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n        if (backwardEdge) {\n          var key = _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode + \"-\" + backwardEdge.label;\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      } // pure forward\n\n\n      if (nodeNum >= _this.maxNodeNum) return;\n\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n      forwardPureEdges.forEach(function (edge) {\n        var key = maxToC + \"-\" + edge.label + \"-\" + nodeMap[edge.to].label;\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode + \"-\" + edge.label + \"-\" + nodeMap[edge.to].label;\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      }; // rmpath forward\n\n\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    }); // backward\n\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n          toNodeId = _a.toNodeId,\n          edgeLabel = _a.edgeLabel;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n\n      _this.subGraphMining(backwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    }); // forward\n\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n          fromNodeId = _a.fromNodeId,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(forwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n        nodeEdgeNodeCounter = {}; // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n\n    var nodeLableCounted = {}; // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap; // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = key + \"-\" + nodeLabel;\n\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        }; // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = key + \"-\" + nodeLabel1 + \"-\" + edgeLabel + \"-\" + nodeLabel2;\n          var nodeEdgeNodeKey = nodeLabel1 + \"-\" + edgeLabel + \"-\" + nodeLabel2;\n\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    }); // 计算频繁的节点\n\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g); // if (minNodeNum <= 1) reportSize1 TODO\n    });\n    return frequentSize1Subgraphs;\n  };\n\n  GSpan.prototype.run = function () {\n    var _this = this; // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n\n\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed; // PDFS 数组的 map Line 304\n\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap; // Line 306\n\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node); // Line 308\n\n\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = node.label + \"-\" + edge.label + \"-\" + toNode.label;\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    }); // Line 313\n\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n          projected = _a.projected,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  return GSpan;\n}();\n\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\n\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n\n      graphData.nodes.push((_a = {\n        id: \"\" + node.id\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n\n      graphData.edges.push((_a = {\n        source: \"\" + edge.from,\n        target: \"\" + edge.to\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\n\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\n\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n      _a = params.directed,\n      directed = _a === void 0 ? false : _a,\n      _b = params.nodeLabelProp,\n      nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n      _c = params.edgeLabelProp,\n      edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n      maxNodeNum = params.maxNodeNum,\n      minNodeNum = params.minNodeNum,\n      verbose = params.verbose,\n      top = params.top; // ------- 初始化与执行算法 -------\n\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\n\nexport default gSpan;","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/algorithm/es/gSpan/gSpan.js"],"names":["clone","Graph","VACANT_NODE_LABEL","VACANT_GRAPH_ID","VACANT_EDGE_LABEL","DFSedge","fromNode","toNode","fromNodeLabel","edgeLabel","toNodeLabel","nodeEdgeNodeLabel","nodeLabel1","nodeLabel2","prototype","equalTo","other","formNode","notEqualTo","DFScode","rmpath","dfsEdgeList","aLength","length","bLength","i","pushBack","push","toGraph","graphId","directed","graph","forEach","dfsEdge","fromNodeId","toNodeId","_a","addNode","addEdge","undefined","buildRmpath","oldFrom","selfLength","fromNodeIdx","toNodeIdx","getNodeNum","nodeMap","Object","keys","History","pdfs","his","nodesUsed","edgesUsed","edges","e","edge","from","to","id","preNode","reverse","hasNode","node","hasEdge","GSpan","graphs","_b","minSupport","_c","minNodeNum","_d","maxNodeNum","_e","top","_f","_g","verbose","dfsCode","support","frequentSize1Subgraphs","frequentSubgraphs","counter","reportDF","findForwardRootEdges","_this","result","label","findBackwardEdge","edge1","edge2","history","edge2To","edge2ToEdges","edgeLength","findForwardPureEdges","rightmostEdge","minNodeLabel","rightmostEdgeToId","findForwardRmpathEdges","newToNodeLabel","getSupport","projected","graphMap","pro","findMinLabel","obj","minLabel","isMin","console","log","dfsCodeMin","root","nodes","forwardEdges","otherNode","projectIsMin","maxToC","backwardRoot","flag","newTo","end","_loop_1","p","backwardEdge","state_1","minBackwardEdgeLabel","idx_1","forwardRoot","newFrom","forwardPureEdges","key","pathLength","_loop_2","value","forwardRmpathEdges","state_2","forwardMinEdgeNodeLabel","idx","report","subGraphMining","nodeNum","_loop_3","pop","generate1EdgeFrequentSubGraphs","nodeLabelCounter","nodeEdgeNodeCounter","nodeLableCounted","nodeEdgeNodeLabelCounted","nodeLabel","graphNodeKey","graphKey","tmp","graphNodeEdgeNodeKey","nodeEdgeNodeKey","count","g","run","forwardRootEdges","formatGraphs","nodeLabelProp","edgeLabelProp","fGraph","nodeIdxMap","j","k","sourceIdx","source","targetIdx","target","toGraphDatas","graphData","DEFAULT_LABEL_NAME","gSpan","params","formattedGraphs","algoParams","calculator"],"mappings":"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","sourcesContent":["import { clone } from \"@antv/util\";\nimport { Graph, VACANT_NODE_LABEL, VACANT_GRAPH_ID, VACANT_EDGE_LABEL } from \"./struct\";\n\nvar DFSedge =\n/** @class */\nfunction () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || VACANT_NODE_LABEL\n    };\n  }\n\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n\n  return DFSedge;\n}(); // DFScode 是 DESedge 的数组\n\n\nvar DFScode =\n/** @class */\nfunction () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n\n    return true;\n  };\n\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n\n\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n\n\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = VACANT_GRAPH_ID;\n    }\n\n    if (directed === void 0) {\n      directed = false;\n    }\n\n    var graph = new Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  }; // 建立 rightmost path\n\n\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n\n    return this.rmpath;\n  };\n\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n\n  return DFScode;\n}();\n\nvar History =\n/** @class */\nfunction () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    } // 倒序\n\n\n    this.edges = this.edges.reverse();\n  }\n\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n\n  return History;\n}();\n\nvar GSpan =\n/** @class */\nfunction () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n        _b = _a.minSupport,\n        minSupport = _b === void 0 ? 2 : _b,\n        _c = _a.minNodeNum,\n        minNodeNum = _c === void 0 ? 1 : _c,\n        _d = _a.maxNodeNum,\n        maxNodeNum = _d === void 0 ? 4 : _d,\n        _e = _a.top,\n        top = _e === void 0 ? 10 : _e,\n        _f = _a.directed,\n        directed = _f === void 0 ? false : _f,\n        _g = _a.verbose,\n        verbose = _g === void 0 ? false : _g; // -------- 第零步，初始化-------\n\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0; // TODO? timestamp = {}\n\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  } // Line 352\n\n\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = node.label + \"-\" + edge.label + \"-\" + otherNode.label;\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    }); // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n\n    var minLabel = this.findMinLabel(root); // line 419\n\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2)); // line 423\n\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n\n      var backwardRoot = {};\n      var flag = false,\n          newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\"; // line 435\n\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n\n        if (state_1 === \"break\") break;\n      }\n\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = edge.label + \"-\" + nodeMap[edge.to].label;\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = edge.label + \"-\" + nodeMap[edge.to].label;\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n\n        if (state_2 === \"break\") break;\n      }\n\n      if (!flag) return true;\n\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[forwardMinEdgeNodeLabel.edgeLabel + \"-\" + forwardMinEdgeNodeLabel.nodeLabel2].projected);\n    };\n\n    var key = minLabel.nodeLabel1 + \"-\" + minLabel.edgeLabel + \"-\" + minLabel.nodeLabel2;\n    return projectIsMin(root[key].projected);\n  };\n\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push(clone(graph));\n  };\n\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p); // backward Line 526\n\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n        if (backwardEdge) {\n          var key = _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode + \"-\" + backwardEdge.label;\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      } // pure forward\n\n\n      if (nodeNum >= _this.maxNodeNum) return;\n\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n      forwardPureEdges.forEach(function (edge) {\n        var key = maxToC + \"-\" + edge.label + \"-\" + nodeMap[edge.to].label;\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode + \"-\" + edge.label + \"-\" + nodeMap[edge.to].label;\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      }; // rmpath forward\n\n\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    }); // backward\n\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n          toNodeId = _a.toNodeId,\n          edgeLabel = _a.edgeLabel;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n\n      _this.subGraphMining(backwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    }); // forward\n\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n          fromNodeId = _a.fromNodeId,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(forwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n        nodeEdgeNodeCounter = {}; // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n\n    var nodeLableCounted = {}; // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap; // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = key + \"-\" + nodeLabel;\n\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        }; // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = key + \"-\" + nodeLabel1 + \"-\" + edgeLabel + \"-\" + nodeLabel2;\n          var nodeEdgeNodeKey = nodeLabel1 + \"-\" + edgeLabel + \"-\" + nodeLabel2;\n\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    }); // 计算频繁的节点\n\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g); // if (minNodeNum <= 1) reportSize1 TODO\n    });\n    return frequentSize1Subgraphs;\n  };\n\n  GSpan.prototype.run = function () {\n    var _this = this; // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n\n\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed; // PDFS 数组的 map Line 304\n\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap; // Line 306\n\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node); // Line 308\n\n\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = node.label + \"-\" + edge.label + \"-\" + toNode.label;\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    }); // Line 313\n\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n          projected = _a.projected,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  return GSpan;\n}();\n\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\n\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n\n      graphData.nodes.push((_a = {\n        id: \"\" + node.id\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n\n      graphData.edges.push((_a = {\n        source: \"\" + edge.from,\n        target: \"\" + edge.to\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\n\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\n\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n      _a = params.directed,\n      directed = _a === void 0 ? false : _a,\n      _b = params.nodeLabelProp,\n      nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n      _c = params.edgeLabelProp,\n      edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n      maxNodeNum = params.maxNodeNum,\n      minNodeNum = params.minNodeNum,\n      verbose = params.verbose,\n      top = params.top; // ------- 初始化与执行算法 -------\n\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\n\nexport default gSpan;"]},"metadata":{},"sourceType":"module"}