{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true);\n  }\n}, 'single-node');","map":{"version":3,"sources":["C:/Users/Home/Desktop/cs-2005/node_modules/@antv/g6-core/es/element/nodes/simple-circle.js"],"names":["__assign","deepMix","Global","Shape","registerNode","options","size","defaultNode","style","x","y","stroke","fill","lineWidth","labelCfg","nodeLabel","fontSize","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","type","draggable","defaultStyle","getOptions","strokeStyle","color","getSize","r","styles","update","item","get","attr","updateShape"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}