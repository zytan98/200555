{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { IDENTIFIER } from '@antv/g-webgpu-core';\nimport { mat3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Material } from '..';\n/* babel-plugin-inline-import './shaders/webgl.basic.frag.glsl' */\n\nvar webglFragmentShaderGLSL = \"varying vec4 fragColor;\\n\\n#pragma include \\\"uv.frag.declaration\\\"\\n#pragma include \\\"map.frag.declaration\\\"\\n\\nvoid main() {\\n  vec4 diffuseColor = fragColor;\\n\\n  #pragma include \\\"map.frag.main\\\"\\n\\n  gl_FragColor = diffuseColor;\\n}\";\n/* babel-plugin-inline-import './shaders/webgl.basic.vert.glsl' */\n\nvar webglVertexShaderGLSL = \"attribute vec3 position;\\nattribute vec3 normal;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform vec4 color;\\n\\nvarying vec4 fragColor;\\n\\n#pragma include \\\"uv.vert.declaration\\\"\\n\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  fragColor = color;\\n\\n  #pragma include \\\"uv.vert.main\\\"\\n}\";\n/* babel-plugin-inline-import './shaders/webgpu.basic.frag.glsl' */\n\nvar webgpuFragmentShaderGLSL = \"// layout(set = 0, binding = 1) uniform WireframeUniforms {\\n//   float lineWidth;\\n//   vec4 lineColor;\\n// } wireframe;\\n\\nlayout(location = 0) in vec4 fragColor;\\n// layout(location = 1) in vec3 v_Barycentric;\\n\\nlayout(location = 0) out vec4 outColor;\\n\\n// wireframe\\n// float edgeFactor() {\\n//   vec3 d = fwidth(v_Barycentric);\\n//   vec3 a3 = smoothstep(vec3(0.0), d * wireframe.lineWidth, v_Barycentric);\\n//   return min(min(a3.x, a3.y), a3.z);\\n// }\\n\\nvoid main() {\\n  // outColor = mix(fragColor, wireframe.lineColor, (1.0 - edgeFactor()));\\n  outColor = fragColor;\\n}\";\n/* babel-plugin-inline-import './shaders/webgpu.basic.vert.glsl' */\n\nvar webgpuVertexShaderGLSL = \"layout(set = 0, binding = 0) uniform Uniforms {\\n  vec4 color;\\n  mat4 projectionMatrix;\\n  mat4 modelViewMatrix;\\n} uniforms;\\n\\nlayout(location = 0) in vec3 position;\\n// layout(location = 1) in vec3 barycentric;\\n\\nlayout(location = 0) out vec4 fragColor;\\n// layout(location = 1) out vec3 v_Barycentric;\\n\\nvoid main() {\\n  gl_Position = uniforms.projectionMatrix * uniforms.modelViewMatrix * vec4(position, 1.0);\\n  fragColor = uniforms.color;\\n  // v_Barycentric = barycentric;\\n}\";\nexport var\n/**\n * This material is not affected by lights.\n * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n */\nBasic = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Material) {\n  _inherits(Basic, _Material);\n\n  var _super = _createSuper(Basic);\n\n  function Basic() {\n    var _this;\n\n    _classCallCheck(this, Basic);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_this, \"engine\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor2, _assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(Basic, [{\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var component = this.getComponent();\n      var vertexShaderGLSL = this.engine.supportWebGPU ? webgpuVertexShaderGLSL : webglVertexShaderGLSL;\n      var fragmentShaderGLSL = this.engine.supportWebGPU ? webgpuFragmentShaderGLSL : webglFragmentShaderGLSL;\n      this.shaderModuleService.registerModule('material-basic', {\n        vs: vertexShaderGLSL,\n        fs: fragmentShaderGLSL\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('material-basic'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          extractedUniforms = _this$shaderModuleSer.uniforms;\n\n      component.vertexShaderGLSL = vs;\n      component.fragmentShaderGLSL = fs; // @ts-ignore\n\n      component.setUniform(extractedUniforms);\n\n      if (this.config.map) {\n        component.setDefines({\n          USE_UV: 1,\n          USE_MAP: 1\n        });\n        component.setUniform({\n          // @ts-ignore\n          map: this.config.map,\n          uvTransform: mat3.create()\n        });\n      }\n    }\n  }]);\n\n  return Basic;\n}(Material), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["../../../src/material/basic/index.ts"],"names":["injectable","Basic","inject","IDENTIFIER","component","vertexShaderGLSL","fragmentShaderGLSL","vs","fs","extractedUniforms","USE_UV","USE_MAP","map","uvTransform","mat3"],"mappings":"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","sourcesContent":["import {\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n} from '@antv/g-webgpu-core';\nimport { mat3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Material } from '..';\nimport { Texture2D } from '../../texture/Texture2D';\nimport webglFragmentShaderGLSL from './shaders/webgl.basic.frag.glsl';\nimport webglVertexShaderGLSL from './shaders/webgl.basic.vert.glsl';\nimport webgpuFragmentShaderGLSL from './shaders/webgpu.basic.frag.glsl';\nimport webgpuVertexShaderGLSL from './shaders/webgpu.basic.vert.glsl';\n\nexport interface IBasicMaterialParams {\n  map: Texture2D;\n}\n\n@injectable()\n/**\n * This material is not affected by lights.\n * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n */\nexport class Basic extends Material<Partial<IBasicMaterialParams>> {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  protected onEntityCreated() {\n    const component = this.getComponent();\n    const vertexShaderGLSL = this.engine.supportWebGPU\n      ? webgpuVertexShaderGLSL\n      : webglVertexShaderGLSL;\n    const fragmentShaderGLSL = this.engine.supportWebGPU\n      ? webgpuFragmentShaderGLSL\n      : webglFragmentShaderGLSL;\n\n    this.shaderModuleService.registerModule('material-basic', {\n      vs: vertexShaderGLSL,\n      fs: fragmentShaderGLSL,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('material-basic');\n\n    component.vertexShaderGLSL = vs!;\n    component.fragmentShaderGLSL = fs!;\n    // @ts-ignore\n    component.setUniform(extractedUniforms);\n\n    if (this.config.map) {\n      component.setDefines({\n        USE_UV: 1,\n        USE_MAP: 1,\n      });\n      component.setUniform({\n        // @ts-ignore\n        map: this.config.map,\n        uvTransform: mat3.create(),\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}